/*
 * generated by Xtext 2.10.0
 */
package de.tu_bs.cs.isf.cbc.textual.tool.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CbCProblemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.CbCProblem");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cCbcformulaAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cCbcformulaCbCFormulaParserRuleCall_0_0 = (RuleCall)cCbcformulaAssignment_0.eContents().get(0);
		private final Assignment cGlobalconditionAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cGlobalconditionGlobalConditionsParserRuleCall_1_0 = (RuleCall)cGlobalconditionAssignment_1.eContents().get(0);
		private final Assignment cJavaVariableAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cJavaVariableJavaVariablesParserRuleCall_2_0 = (RuleCall)cJavaVariableAssignment_2.eContents().get(0);
		private final Assignment cRenamingAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cRenamingRenamingParserRuleCall_3_0 = (RuleCall)cRenamingAssignment_3.eContents().get(0);
		
		//CbCProblem:
		//	cbcformula=CbCFormula
		//	& globalcondition=GlobalConditions?
		//	& javaVariable=JavaVariables?
		//	& renaming=Renaming?;
		@Override public ParserRule getRule() { return rule; }
		
		//cbcformula=CbCFormula & globalcondition=GlobalConditions? & javaVariable=JavaVariables? & renaming=Renaming?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//cbcformula=CbCFormula
		public Assignment getCbcformulaAssignment_0() { return cCbcformulaAssignment_0; }
		
		//CbCFormula
		public RuleCall getCbcformulaCbCFormulaParserRuleCall_0_0() { return cCbcformulaCbCFormulaParserRuleCall_0_0; }
		
		//globalcondition=GlobalConditions?
		public Assignment getGlobalconditionAssignment_1() { return cGlobalconditionAssignment_1; }
		
		//GlobalConditions
		public RuleCall getGlobalconditionGlobalConditionsParserRuleCall_1_0() { return cGlobalconditionGlobalConditionsParserRuleCall_1_0; }
		
		//javaVariable=JavaVariables?
		public Assignment getJavaVariableAssignment_2() { return cJavaVariableAssignment_2; }
		
		//JavaVariables
		public RuleCall getJavaVariableJavaVariablesParserRuleCall_2_0() { return cJavaVariableJavaVariablesParserRuleCall_2_0; }
		
		//renaming=Renaming?
		public Assignment getRenamingAssignment_3() { return cRenamingAssignment_3; }
		
		//Renaming
		public RuleCall getRenamingRenamingParserRuleCall_3_0() { return cRenamingRenamingParserRuleCall_3_0; }
	}
	public class CbCFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.CbCFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormulaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPreKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPreConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPreConditionConditionParserRuleCall_4_0 = (RuleCall)cPreConditionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementAbstractStatementParserRuleCall_7_0 = (RuleCall)cStatementAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cPostKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPostConditionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPostConditionConditionParserRuleCall_11_0 = (RuleCall)cPostConditionAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//CbCFormula:
		//	'Formula'
		//	name=EString
		//	'pre:' '{' preCondition=Condition '}'
		//	'{' statement=AbstractStatement '}'
		//	'post:' '{' postCondition=Condition '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Formula' name=EString 'pre:' '{' preCondition=Condition '}' '{' statement=AbstractStatement '}' 'post:' '{'
		//postCondition=Condition '}'
		public Group getGroup() { return cGroup; }
		
		//'Formula'
		public Keyword getFormulaKeyword_0() { return cFormulaKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'pre:'
		public Keyword getPreKeyword_2() { return cPreKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//preCondition=Condition
		public Assignment getPreConditionAssignment_4() { return cPreConditionAssignment_4; }
		
		//Condition
		public RuleCall getPreConditionConditionParserRuleCall_4_0() { return cPreConditionConditionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//statement=AbstractStatement
		public Assignment getStatementAssignment_7() { return cStatementAssignment_7; }
		
		//AbstractStatement
		public RuleCall getStatementAbstractStatementParserRuleCall_7_0() { return cStatementAbstractStatementParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'post:'
		public Keyword getPostKeyword_9() { return cPostKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//postCondition=Condition
		public Assignment getPostConditionAssignment_11() { return cPostConditionAssignment_11; }
		
		//Condition
		public RuleCall getPostConditionConditionParserRuleCall_11_0() { return cPostConditionConditionParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class AbstractStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.AbstractStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractStatement_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSkipStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelectionStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSmallRepetitionStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMethodStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReturnStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cStrengthWeakStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//AbstractStatement:
		//	AbstractStatement_Impl | SkipStatement | CompositionStatement | SelectionStatement | SmallRepetitionStatement |
		//	MethodStatement | ReturnStatement | StrengthWeakStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractStatement_Impl | SkipStatement | CompositionStatement | SelectionStatement | SmallRepetitionStatement |
		//MethodStatement | ReturnStatement | StrengthWeakStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractStatement_Impl
		public RuleCall getAbstractStatement_ImplParserRuleCall_0() { return cAbstractStatement_ImplParserRuleCall_0; }
		
		//SkipStatement
		public RuleCall getSkipStatementParserRuleCall_1() { return cSkipStatementParserRuleCall_1; }
		
		//CompositionStatement
		public RuleCall getCompositionStatementParserRuleCall_2() { return cCompositionStatementParserRuleCall_2; }
		
		//SelectionStatement
		public RuleCall getSelectionStatementParserRuleCall_3() { return cSelectionStatementParserRuleCall_3; }
		
		//SmallRepetitionStatement
		public RuleCall getSmallRepetitionStatementParserRuleCall_4() { return cSmallRepetitionStatementParserRuleCall_4; }
		
		//MethodStatement
		public RuleCall getMethodStatementParserRuleCall_5() { return cMethodStatementParserRuleCall_5; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_6() { return cReturnStatementParserRuleCall_6; }
		
		//StrengthWeakStatement
		public RuleCall getStrengthWeakStatementParserRuleCall_7() { return cStrengthWeakStatementParserRuleCall_7; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class CodeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.CodeString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cVariableStringParserRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cOperationParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_2 = (Alternatives)cGroup_5.eContents().get(2);
		private final RuleCall cVariableStringParserRuleCall_5_2_0 = (RuleCall)cAlternatives_5_2.eContents().get(0);
		private final Group cGroup_5_2_1 = (Group)cAlternatives_5_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_5_2_1_0 = (Keyword)cGroup_5_2_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_5_2_1_1 = (RuleCall)cGroup_5_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CodeString:
		//	(ID ('[' (ID | INT) ']')? '=' '('? (VariableString | '-'? INT) (Operation '('* (VariableString | '-'? INT) ')'*)*
		//	';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID ('[' (ID | INT) ']')? '=' '('? (VariableString | '-'? INT) (Operation '('* (VariableString | '-'? INT) ')'*)* ';')+
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('[' (ID | INT) ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//(ID | INT)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0() { return cIDTerminalRuleCall_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'('?
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(VariableString | '-'? INT)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_4_0() { return cVariableStringParserRuleCall_4_0; }
		
		//'-'? INT
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1_0() { return cHyphenMinusKeyword_4_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_1_1() { return cINTTerminalRuleCall_4_1_1; }
		
		//(Operation '('* (VariableString | '-'? INT) ')'*)*
		public Group getGroup_5() { return cGroup_5; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_5_0() { return cOperationParserRuleCall_5_0; }
		
		//'('*
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//(VariableString | '-'? INT)
		public Alternatives getAlternatives_5_2() { return cAlternatives_5_2; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_5_2_0() { return cVariableStringParserRuleCall_5_2_0; }
		
		//'-'? INT
		public Group getGroup_5_2_1() { return cGroup_5_2_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_5_2_1_0() { return cHyphenMinusKeyword_5_2_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5_2_1_1() { return cINTTerminalRuleCall_5_2_1_1; }
		
		//')'*
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class VariableStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.VariableString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_0_1 = (Group)cGroup_2_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_0_0_1_0 = (Alternatives)cGroup_2_0_0_1.eContents().get(0);
		private final RuleCall cVariableStringParserRuleCall_2_0_0_1_0_0 = (RuleCall)cAlternatives_2_0_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_0_1_0_1 = (Group)cAlternatives_2_0_0_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_0_0_1_0_1_0 = (Keyword)cGroup_2_0_0_1_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_0_0_1_0_1_1 = (RuleCall)cGroup_2_0_0_1_0_1.eContents().get(1);
		private final Group cGroup_2_0_0_1_1 = (Group)cGroup_2_0_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_0_1_1_0 = (Keyword)cGroup_2_0_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0_1_1_1 = (Alternatives)cGroup_2_0_0_1_1.eContents().get(1);
		private final RuleCall cVariableStringParserRuleCall_2_0_0_1_1_1_0 = (RuleCall)cAlternatives_2_0_0_1_1_1.eContents().get(0);
		private final Group cGroup_2_0_0_1_1_1_1 = (Group)cAlternatives_2_0_0_1_1_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_0_0_1_1_1_1_0 = (Keyword)cGroup_2_0_0_1_1_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_0_0_1_1_1_1_1 = (RuleCall)cGroup_2_0_0_1_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_0_0_2 = (Keyword)cGroup_2_0_0.eContents().get(2);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cVariableStringParserRuleCall_2_0_1_1 = (RuleCall)cGroup_2_0_1.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_0_1 = (Alternatives)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cVariableStringParserRuleCall_2_1_0_1_0 = (RuleCall)cAlternatives_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_0_1_1 = (Group)cAlternatives_2_1_0_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_1_0_1_1_0 = (Keyword)cGroup_2_1_0_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1_0_1_1_1 = (RuleCall)cGroup_2_1_0_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_1_0_2 = (Keyword)cGroup_2_1_0.eContents().get(2);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cVariableStringParserRuleCall_2_1_1_1 = (RuleCall)cGroup_2_1_1.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cFullStopKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final RuleCall cVariableStringParserRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		
		////CodeString returns ecore::EString: 
		////			(ID ('[' (ID | INT) ']')? '=' TermString ';')+
		////		;		
		////		
		////TermString returns ecore::EString:
		////	'('? (VariableString | '-'? INT | TermString2) Operation TermString ')'?
		////;
		////
		////TermString2 returns ecore::EString:
		////	'('? (VariableString | '-'? INT | TermString) Operation TermString ')'?
		////;
		//VariableString:
		//	'-'? ID (('(' ((VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? | ('['
		//	(VariableString | '-'? INT)? ']') ('.' VariableString)? | '.' VariableString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? ID (('(' ((VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? | ('['
		//(VariableString | '-'? INT)? ']') ('.' VariableString)? | '.' VariableString)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//(('(' ((VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? | ('['
		//(VariableString | '-'? INT)? ']') ('.' VariableString)? | '.' VariableString)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('(' ((VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//('(' ((VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')')
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0_0() { return cLeftParenthesisKeyword_2_0_0_0; }
		
		//((VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)?
		public Group getGroup_2_0_0_1() { return cGroup_2_0_0_1; }
		
		//(VariableString | '-'? INT)
		public Alternatives getAlternatives_2_0_0_1_0() { return cAlternatives_2_0_0_1_0; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_0_0_1_0_0() { return cVariableStringParserRuleCall_2_0_0_1_0_0; }
		
		//'-'? INT
		public Group getGroup_2_0_0_1_0_1() { return cGroup_2_0_0_1_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2_0_0_1_0_1_0() { return cHyphenMinusKeyword_2_0_0_1_0_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_0_1_0_1_1() { return cINTTerminalRuleCall_2_0_0_1_0_1_1; }
		
		//(',' (VariableString | '-'? INT))*
		public Group getGroup_2_0_0_1_1() { return cGroup_2_0_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_0_1_1_0() { return cCommaKeyword_2_0_0_1_1_0; }
		
		//(VariableString | '-'? INT)
		public Alternatives getAlternatives_2_0_0_1_1_1() { return cAlternatives_2_0_0_1_1_1; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_0_0_1_1_1_0() { return cVariableStringParserRuleCall_2_0_0_1_1_1_0; }
		
		//'-'? INT
		public Group getGroup_2_0_0_1_1_1_1() { return cGroup_2_0_0_1_1_1_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2_0_0_1_1_1_1_0() { return cHyphenMinusKeyword_2_0_0_1_1_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_0_1_1_1_1_1() { return cINTTerminalRuleCall_2_0_0_1_1_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_0_2() { return cRightParenthesisKeyword_2_0_0_2; }
		
		//('.' VariableString)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_1_0() { return cFullStopKeyword_2_0_1_0; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_0_1_1() { return cVariableStringParserRuleCall_2_0_1_1; }
		
		//('[' (VariableString | '-'? INT)? ']') ('.' VariableString)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//('[' (VariableString | '-'? INT)? ']')
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_0_0() { return cLeftSquareBracketKeyword_2_1_0_0; }
		
		//(VariableString | '-'? INT)?
		public Alternatives getAlternatives_2_1_0_1() { return cAlternatives_2_1_0_1; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_1_0_1_0() { return cVariableStringParserRuleCall_2_1_0_1_0; }
		
		//'-'? INT
		public Group getGroup_2_1_0_1_1() { return cGroup_2_1_0_1_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2_1_0_1_1_0() { return cHyphenMinusKeyword_2_1_0_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1_0_1_1_1() { return cINTTerminalRuleCall_2_1_0_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_0_2() { return cRightSquareBracketKeyword_2_1_0_2; }
		
		//('.' VariableString)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1_1_0() { return cFullStopKeyword_2_1_1_0; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_1_1_1() { return cVariableStringParserRuleCall_2_1_1_1; }
		
		//'.' VariableString
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_2_0() { return cFullStopKeyword_2_2_0; }
		
		//VariableString
		public RuleCall getVariableStringParserRuleCall_2_2_1() { return cVariableStringParserRuleCall_2_2_1; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		////ID( ('[' | '(') ( (VariableString | INT) (',' (VariableString | INT))*)? (']' | ')'))?
		//Operation:
		//	'+' | '-' | '*' | '/' | '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
	}
	public class AbstractStatement_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.AbstractStatement_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbstractStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCodeStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AbstractStatement_Impl AbstractStatement:
		//	{AbstractStatement} name=CodeString
		@Override public ParserRule getRule() { return rule; }
		
		//{AbstractStatement} name=CodeString
		public Group getGroup() { return cGroup; }
		
		//{AbstractStatement}
		public Action getAbstractStatementAction_0() { return cAbstractStatementAction_0; }
		
		//name=CodeString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CodeString
		public RuleCall getNameCodeStringParserRuleCall_1_0() { return cNameCodeStringParserRuleCall_1_0; }
	}
	public class MethodStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.MethodStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//MethodStatement:
		//	{MethodStatement} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodStatement} name=EString
		public Group getGroup() { return cGroup; }
		
		//{MethodStatement}
		public Action getMethodStatementAction_0() { return cMethodStatementAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCodeStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ReturnStatement:
		//	{ReturnStatement}
		//	'return' name=CodeString;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStatement} 'return' name=CodeString
		public Group getGroup() { return cGroup; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//name=CodeString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//CodeString
		public RuleCall getNameCodeStringParserRuleCall_2_0() { return cNameCodeStringParserRuleCall_2_0; }
	}
	public class StrengthWeakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.StrengthWeakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStrengthWeakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPreConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPreConditionConditionParserRuleCall_3_0 = (RuleCall)cPreConditionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameCodeStringParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cPostKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cPostConditionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPostConditionConditionParserRuleCall_10_0 = (RuleCall)cPostConditionAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//StrengthWeakStatement:
		//	{StrengthWeakStatement}
		//	'pre:' '{' preCondition=Condition '}'
		//	'{' name=CodeString '}'
		//	'post:' '{' postCondition=Condition '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StrengthWeakStatement} 'pre:' '{' preCondition=Condition '}' '{' name=CodeString '}' 'post:' '{'
		//postCondition=Condition '}'
		public Group getGroup() { return cGroup; }
		
		//{StrengthWeakStatement}
		public Action getStrengthWeakStatementAction_0() { return cStrengthWeakStatementAction_0; }
		
		//'pre:'
		public Keyword getPreKeyword_1() { return cPreKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//preCondition=Condition
		public Assignment getPreConditionAssignment_3() { return cPreConditionAssignment_3; }
		
		//Condition
		public RuleCall getPreConditionConditionParserRuleCall_3_0() { return cPreConditionConditionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//name=CodeString
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//CodeString
		public RuleCall getNameCodeStringParserRuleCall_6_0() { return cNameCodeStringParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'post:'
		public Keyword getPostKeyword_8() { return cPostKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//postCondition=Condition
		public Assignment getPostConditionAssignment_10() { return cPostConditionAssignment_10; }
		
		//Condition
		public RuleCall getPostConditionConditionParserRuleCall_10_0() { return cPostConditionConditionParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Condition:
		//	{Condition} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition} name=EString
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class SkipStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.SkipStatement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameSemicolonKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//SkipStatement:
		//	name=';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=';'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//';'
		public Keyword getNameSemicolonKeyword_0() { return cNameSemicolonKeyword_0; }
	}
	public class CompositionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.CompositionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstStatementAbstractStatementParserRuleCall_2_0 = (RuleCall)cFirstStatementAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIntmKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIntermediateConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIntermediateConditionConditionParserRuleCall_6_0 = (RuleCall)cIntermediateConditionAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSecondStatementAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSecondStatementAbstractStatementParserRuleCall_9_0 = (RuleCall)cSecondStatementAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//CompositionStatement:
		//	{CompositionStatement}
		//	'{' firstStatement=AbstractStatement '}'
		//	'intm:' '[' intermediateCondition=Condition ']'
		//	'{' secondStatement=AbstractStatement '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositionStatement} '{' firstStatement=AbstractStatement '}' 'intm:' '[' intermediateCondition=Condition ']' '{'
		//secondStatement=AbstractStatement '}'
		public Group getGroup() { return cGroup; }
		
		//{CompositionStatement}
		public Action getCompositionStatementAction_0() { return cCompositionStatementAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//firstStatement=AbstractStatement
		public Assignment getFirstStatementAssignment_2() { return cFirstStatementAssignment_2; }
		
		//AbstractStatement
		public RuleCall getFirstStatementAbstractStatementParserRuleCall_2_0() { return cFirstStatementAbstractStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//'intm:'
		public Keyword getIntmKeyword_4() { return cIntmKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//intermediateCondition=Condition
		public Assignment getIntermediateConditionAssignment_6() { return cIntermediateConditionAssignment_6; }
		
		//Condition
		public RuleCall getIntermediateConditionConditionParserRuleCall_6_0() { return cIntermediateConditionConditionParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//secondStatement=AbstractStatement
		public Assignment getSecondStatementAssignment_9() { return cSecondStatementAssignment_9; }
		
		//AbstractStatement
		public RuleCall getSecondStatementAbstractStatementParserRuleCall_9_0() { return cSecondStatementAbstractStatementParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class SelectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.SelectionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGuardsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGuardsConditionParserRuleCall_3_0 = (RuleCall)cGuardsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCommandsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCommandsAbstractStatementParserRuleCall_7_0 = (RuleCall)cCommandsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cElseifKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cGuardsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cGuardsConditionParserRuleCall_9_2_0 = (RuleCall)cGuardsAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Keyword cThenKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_9_5 = (Keyword)cGroup_9.eContents().get(5);
		private final Assignment cCommandsAssignment_9_6 = (Assignment)cGroup_9.eContents().get(6);
		private final RuleCall cCommandsAbstractStatementParserRuleCall_9_6_0 = (RuleCall)cCommandsAssignment_9_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_7 = (Keyword)cGroup_9.eContents().get(7);
		private final Keyword cFiKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//SelectionStatement:
		//	{SelectionStatement}
		//	'if' '(' guards+=Condition ')' 'then' '{' commands+=AbstractStatement '}' ('elseif' '(' guards+=Condition ')' 'then'
		//	'{' commands+=AbstractStatement '}')* 'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectionStatement} 'if' '(' guards+=Condition ')' 'then' '{' commands+=AbstractStatement '}' ('elseif' '('
		//guards+=Condition ')' 'then' '{' commands+=AbstractStatement '}')* 'fi'
		public Group getGroup() { return cGroup; }
		
		//{SelectionStatement}
		public Action getSelectionStatementAction_0() { return cSelectionStatementAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//guards+=Condition
		public Assignment getGuardsAssignment_3() { return cGuardsAssignment_3; }
		
		//Condition
		public RuleCall getGuardsConditionParserRuleCall_3_0() { return cGuardsConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//commands+=AbstractStatement
		public Assignment getCommandsAssignment_7() { return cCommandsAssignment_7; }
		
		//AbstractStatement
		public RuleCall getCommandsAbstractStatementParserRuleCall_7_0() { return cCommandsAbstractStatementParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//('elseif' '(' guards+=Condition ')' 'then' '{' commands+=AbstractStatement '}')*
		public Group getGroup_9() { return cGroup_9; }
		
		//'elseif'
		public Keyword getElseifKeyword_9_0() { return cElseifKeyword_9_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }
		
		//guards+=Condition
		public Assignment getGuardsAssignment_9_2() { return cGuardsAssignment_9_2; }
		
		//Condition
		public RuleCall getGuardsConditionParserRuleCall_9_2_0() { return cGuardsConditionParserRuleCall_9_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
		
		//'then'
		public Keyword getThenKeyword_9_4() { return cThenKeyword_9_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_5() { return cLeftCurlyBracketKeyword_9_5; }
		
		//commands+=AbstractStatement
		public Assignment getCommandsAssignment_9_6() { return cCommandsAssignment_9_6; }
		
		//AbstractStatement
		public RuleCall getCommandsAbstractStatementParserRuleCall_9_6_0() { return cCommandsAbstractStatementParserRuleCall_9_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_7() { return cRightCurlyBracketKeyword_9_7; }
		
		//'fi'
		public Keyword getFiKeyword_10() { return cFiKeyword_10; }
	}
	public class SmallRepetitionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.SmallRepetitionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSmallRepetitionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGuardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGuardConditionParserRuleCall_3_0 = (RuleCall)cGuardAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDoKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cInvKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cInvariantAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInvariantConditionParserRuleCall_8_0 = (RuleCall)cInvariantAssignment_8.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cVarKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cVariantAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cVariantVariantParserRuleCall_12_0 = (RuleCall)cVariantAssignment_12.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cLoopStatementAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cLoopStatementAbstractStatementParserRuleCall_15_0 = (RuleCall)cLoopStatementAssignment_15.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cOdKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		////RepetitionStatement returns RepetitionStatement:
		////	{RepetitionStatement}
		////		'{' startStatement=AbstractStatement '}'
		////		'while' '(' guard=Condition ')' 'do'
		////		'inv:' '[' invariant=Condition ']'
		////		'var:' '[' variant=Variant ']'
		////		'{' loopStatement=AbstractStatement '}' 'od'
		////		'{' endStatement=AbstractStatement '}'
		////	;
		////Composition3Statement returns Composition3Statement:
		////	{Composition3Statement}
		////		'compo3' '{' firstStatement=AbstractStatement ')'
		////		'intm1:' '[' firstIntermediateCondition=Condition ']'
		////		'{' secondStatement=AbstractStatement ')'
		////		'intm2:' '[' secondIntermediateCondition=Condition ']'
		////		'{' thirdStatement=AbstractStatement ')' '3opmoc'
		////	;
		//SmallRepetitionStatement:
		//	{SmallRepetitionStatement}
		//	'while' '(' guard=Condition ')' 'do'
		//	'inv:' '[' invariant=Condition ']'
		//	'var:' '[' variant=Variant ']'
		//	'{' loopStatement=AbstractStatement '}' 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//{SmallRepetitionStatement} 'while' '(' guard=Condition ')' 'do' 'inv:' '[' invariant=Condition ']' 'var:' '['
		//variant=Variant ']' '{' loopStatement=AbstractStatement '}' 'od'
		public Group getGroup() { return cGroup; }
		
		//{SmallRepetitionStatement}
		public Action getSmallRepetitionStatementAction_0() { return cSmallRepetitionStatementAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//guard=Condition
		public Assignment getGuardAssignment_3() { return cGuardAssignment_3; }
		
		//Condition
		public RuleCall getGuardConditionParserRuleCall_3_0() { return cGuardConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'do'
		public Keyword getDoKeyword_5() { return cDoKeyword_5; }
		
		//'inv:'
		public Keyword getInvKeyword_6() { return cInvKeyword_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7() { return cLeftSquareBracketKeyword_7; }
		
		//invariant=Condition
		public Assignment getInvariantAssignment_8() { return cInvariantAssignment_8; }
		
		//Condition
		public RuleCall getInvariantConditionParserRuleCall_8_0() { return cInvariantConditionParserRuleCall_8_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
		
		//'var:'
		public Keyword getVarKeyword_10() { return cVarKeyword_10; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_11() { return cLeftSquareBracketKeyword_11; }
		
		//variant=Variant
		public Assignment getVariantAssignment_12() { return cVariantAssignment_12; }
		
		//Variant
		public RuleCall getVariantVariantParserRuleCall_12_0() { return cVariantVariantParserRuleCall_12_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_14() { return cLeftCurlyBracketKeyword_14; }
		
		//loopStatement=AbstractStatement
		public Assignment getLoopStatementAssignment_15() { return cLoopStatementAssignment_15; }
		
		//AbstractStatement
		public RuleCall getLoopStatementAbstractStatementParserRuleCall_15_0() { return cLoopStatementAbstractStatementParserRuleCall_15_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
		
		//'od'
		public Keyword getOdKeyword_17() { return cOdKeyword_17; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variant:
		//	{Variant} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variant} name=EString
		public Group getGroup() { return cGroup; }
		
		//{Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class JavaVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.JavaVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJavaVariablesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJavaVariablesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVariablesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVariablesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cVariablesJavaVariableParserRuleCall_2_2_0 = (RuleCall)cVariablesAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cVariablesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cVariablesJavaVariableParserRuleCall_2_3_1_0 = (RuleCall)cVariablesAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//JavaVariables:
		//	{JavaVariables}
		//	'JavaVariables' ('variables' '{' variables+=JavaVariable ("," variables+=JavaVariable)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{JavaVariables} 'JavaVariables' ('variables' '{' variables+=JavaVariable ("," variables+=JavaVariable)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{JavaVariables}
		public Action getJavaVariablesAction_0() { return cJavaVariablesAction_0; }
		
		//'JavaVariables'
		public Keyword getJavaVariablesKeyword_1() { return cJavaVariablesKeyword_1; }
		
		//('variables' '{' variables+=JavaVariable ("," variables+=JavaVariable)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'variables'
		public Keyword getVariablesKeyword_2_0() { return cVariablesKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//variables+=JavaVariable
		public Assignment getVariablesAssignment_2_2() { return cVariablesAssignment_2_2; }
		
		//JavaVariable
		public RuleCall getVariablesJavaVariableParserRuleCall_2_2_0() { return cVariablesJavaVariableParserRuleCall_2_2_0; }
		
		//("," variables+=JavaVariable)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//variables+=JavaVariable
		public Assignment getVariablesAssignment_2_3_1() { return cVariablesAssignment_2_3_1; }
		
		//JavaVariable
		public RuleCall getVariablesJavaVariableParserRuleCall_2_3_1_0() { return cVariablesJavaVariableParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}
	public class JavaVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.JavaVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJavaVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//JavaVariable:
		//	{JavaVariable} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{JavaVariable} name=EString
		public Group getGroup() { return cGroup; }
		
		//{JavaVariable}
		public Action getJavaVariableAction_0() { return cJavaVariableAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class GlobalConditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.GlobalConditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalConditionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGlobalConditionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConditionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConditionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_2_2_0 = (RuleCall)cConditionsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cConditionsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_2_3_1_0 = (RuleCall)cConditionsAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//GlobalConditions:
		//	{GlobalConditions}
		//	'GlobalConditions' ('conditions' '{' conditions+=Condition ("," conditions+=Condition)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalConditions} 'GlobalConditions' ('conditions' '{' conditions+=Condition ("," conditions+=Condition)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{GlobalConditions}
		public Action getGlobalConditionsAction_0() { return cGlobalConditionsAction_0; }
		
		//'GlobalConditions'
		public Keyword getGlobalConditionsKeyword_1() { return cGlobalConditionsKeyword_1; }
		
		//('conditions' '{' conditions+=Condition ("," conditions+=Condition)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'conditions'
		public Keyword getConditionsKeyword_2_0() { return cConditionsKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_2_2() { return cConditionsAssignment_2_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_2_0() { return cConditionsConditionParserRuleCall_2_2_0; }
		
		//("," conditions+=Condition)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_2_3_1() { return cConditionsAssignment_2_3_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_3_1_0() { return cConditionsConditionParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}
	public class RenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Renaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRenamingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRenamingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRenamesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRenameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRenameRenameParserRuleCall_2_2_0 = (RuleCall)cRenameAssignment_2_2.eContents().get(0);
		private final Assignment cRenameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRenameRenameParserRuleCall_2_3_0 = (RuleCall)cRenameAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Renaming:
		//	{Renaming}
		//	'Renaming' ('renames' '{' rename+=Rename rename+=Rename* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Renaming} 'Renaming' ('renames' '{' rename+=Rename rename+=Rename* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Renaming}
		public Action getRenamingAction_0() { return cRenamingAction_0; }
		
		//'Renaming'
		public Keyword getRenamingKeyword_1() { return cRenamingKeyword_1; }
		
		//('renames' '{' rename+=Rename rename+=Rename* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'renames'
		public Keyword getRenamesKeyword_2_0() { return cRenamesKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//rename+=Rename
		public Assignment getRenameAssignment_2_2() { return cRenameAssignment_2_2; }
		
		//Rename
		public RuleCall getRenameRenameParserRuleCall_2_2_0() { return cRenameRenameParserRuleCall_2_2_0; }
		
		//rename+=Rename*
		public Assignment getRenameAssignment_2_3() { return cRenameAssignment_2_3; }
		
		//Rename
		public RuleCall getRenameRenameParserRuleCall_2_3_0() { return cRenameRenameParserRuleCall_2_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}
	public class RenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.tu_bs.cs.isf.cbc.textual.tool.Dsl.Rename");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRenameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeEStringParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cFunctionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionEStringParserRuleCall_5_0 = (RuleCall)cFunctionAssignment_5.eContents().get(0);
		private final Keyword cNewNameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNewNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNewNameEStringParserRuleCall_7_0 = (RuleCall)cNewNameAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Rename:
		//	{Rename}
		//	'{'
		//	'type' type=EString
		//	'function' function=EString
		//	'newName' newName=EString
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Rename} '{' 'type' type=EString 'function' function=EString 'newName' newName=EString '}'
		public Group getGroup() { return cGroup; }
		
		//{Rename}
		public Action getRenameAction_0() { return cRenameAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=EString
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_3_0() { return cTypeEStringParserRuleCall_3_0; }
		
		//'function'
		public Keyword getFunctionKeyword_4() { return cFunctionKeyword_4; }
		
		//function=EString
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }
		
		//EString
		public RuleCall getFunctionEStringParserRuleCall_5_0() { return cFunctionEStringParserRuleCall_5_0; }
		
		//'newName'
		public Keyword getNewNameKeyword_6() { return cNewNameKeyword_6; }
		
		//newName=EString
		public Assignment getNewNameAssignment_7() { return cNewNameAssignment_7; }
		
		//EString
		public RuleCall getNewNameEStringParserRuleCall_7_0() { return cNewNameEStringParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	
	
	private final CbCProblemElements pCbCProblem;
	private final CbCFormulaElements pCbCFormula;
	private final AbstractStatementElements pAbstractStatement;
	private final EStringElements pEString;
	private final CodeStringElements pCodeString;
	private final VariableStringElements pVariableString;
	private final OperationElements pOperation;
	private final AbstractStatement_ImplElements pAbstractStatement_Impl;
	private final MethodStatementElements pMethodStatement;
	private final ReturnStatementElements pReturnStatement;
	private final StrengthWeakStatementElements pStrengthWeakStatement;
	private final ConditionElements pCondition;
	private final SkipStatementElements pSkipStatement;
	private final CompositionStatementElements pCompositionStatement;
	private final SelectionStatementElements pSelectionStatement;
	private final SmallRepetitionStatementElements pSmallRepetitionStatement;
	private final EIntElements pEInt;
	private final VariantElements pVariant;
	private final JavaVariablesElements pJavaVariables;
	private final JavaVariableElements pJavaVariable;
	private final GlobalConditionsElements pGlobalConditions;
	private final RenamingElements pRenaming;
	private final RenameElements pRename;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCbCProblem = new CbCProblemElements();
		this.pCbCFormula = new CbCFormulaElements();
		this.pAbstractStatement = new AbstractStatementElements();
		this.pEString = new EStringElements();
		this.pCodeString = new CodeStringElements();
		this.pVariableString = new VariableStringElements();
		this.pOperation = new OperationElements();
		this.pAbstractStatement_Impl = new AbstractStatement_ImplElements();
		this.pMethodStatement = new MethodStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pStrengthWeakStatement = new StrengthWeakStatementElements();
		this.pCondition = new ConditionElements();
		this.pSkipStatement = new SkipStatementElements();
		this.pCompositionStatement = new CompositionStatementElements();
		this.pSelectionStatement = new SelectionStatementElements();
		this.pSmallRepetitionStatement = new SmallRepetitionStatementElements();
		this.pEInt = new EIntElements();
		this.pVariant = new VariantElements();
		this.pJavaVariables = new JavaVariablesElements();
		this.pJavaVariable = new JavaVariableElements();
		this.pGlobalConditions = new GlobalConditionsElements();
		this.pRenaming = new RenamingElements();
		this.pRename = new RenameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tu_bs.cs.isf.cbc.textual.tool.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CbCProblem:
	//	cbcformula=CbCFormula
	//	& globalcondition=GlobalConditions?
	//	& javaVariable=JavaVariables?
	//	& renaming=Renaming?;
	public CbCProblemElements getCbCProblemAccess() {
		return pCbCProblem;
	}
	
	public ParserRule getCbCProblemRule() {
		return getCbCProblemAccess().getRule();
	}
	
	//CbCFormula:
	//	'Formula'
	//	name=EString
	//	'pre:' '{' preCondition=Condition '}'
	//	'{' statement=AbstractStatement '}'
	//	'post:' '{' postCondition=Condition '}';
	public CbCFormulaElements getCbCFormulaAccess() {
		return pCbCFormula;
	}
	
	public ParserRule getCbCFormulaRule() {
		return getCbCFormulaAccess().getRule();
	}
	
	//AbstractStatement:
	//	AbstractStatement_Impl | SkipStatement | CompositionStatement | SelectionStatement | SmallRepetitionStatement |
	//	MethodStatement | ReturnStatement | StrengthWeakStatement;
	public AbstractStatementElements getAbstractStatementAccess() {
		return pAbstractStatement;
	}
	
	public ParserRule getAbstractStatementRule() {
		return getAbstractStatementAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//CodeString:
	//	(ID ('[' (ID | INT) ']')? '=' '('? (VariableString | '-'? INT) (Operation '('* (VariableString | '-'? INT) ')'*)*
	//	';')+;
	public CodeStringElements getCodeStringAccess() {
		return pCodeString;
	}
	
	public ParserRule getCodeStringRule() {
		return getCodeStringAccess().getRule();
	}
	
	////CodeString returns ecore::EString: 
	////			(ID ('[' (ID | INT) ']')? '=' TermString ';')+
	////		;		
	////		
	////TermString returns ecore::EString:
	////	'('? (VariableString | '-'? INT | TermString2) Operation TermString ')'?
	////;
	////
	////TermString2 returns ecore::EString:
	////	'('? (VariableString | '-'? INT | TermString) Operation TermString ')'?
	////;
	//VariableString:
	//	'-'? ID (('(' ((VariableString | '-'? INT) (',' (VariableString | '-'? INT))*)? ')') ('.' VariableString)? | ('['
	//	(VariableString | '-'? INT)? ']') ('.' VariableString)? | '.' VariableString)?;
	public VariableStringElements getVariableStringAccess() {
		return pVariableString;
	}
	
	public ParserRule getVariableStringRule() {
		return getVariableStringAccess().getRule();
	}
	
	////ID( ('[' | '(') ( (VariableString | INT) (',' (VariableString | INT))*)? (']' | ')'))?
	//Operation:
	//	'+' | '-' | '*' | '/' | '%';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//AbstractStatement_Impl AbstractStatement:
	//	{AbstractStatement} name=CodeString
	public AbstractStatement_ImplElements getAbstractStatement_ImplAccess() {
		return pAbstractStatement_Impl;
	}
	
	public ParserRule getAbstractStatement_ImplRule() {
		return getAbstractStatement_ImplAccess().getRule();
	}
	
	//MethodStatement:
	//	{MethodStatement} name=EString;
	public MethodStatementElements getMethodStatementAccess() {
		return pMethodStatement;
	}
	
	public ParserRule getMethodStatementRule() {
		return getMethodStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	{ReturnStatement}
	//	'return' name=CodeString;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//StrengthWeakStatement:
	//	{StrengthWeakStatement}
	//	'pre:' '{' preCondition=Condition '}'
	//	'{' name=CodeString '}'
	//	'post:' '{' postCondition=Condition '}';
	public StrengthWeakStatementElements getStrengthWeakStatementAccess() {
		return pStrengthWeakStatement;
	}
	
	public ParserRule getStrengthWeakStatementRule() {
		return getStrengthWeakStatementAccess().getRule();
	}
	
	//Condition:
	//	{Condition} name=EString;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//SkipStatement:
	//	name=';';
	public SkipStatementElements getSkipStatementAccess() {
		return pSkipStatement;
	}
	
	public ParserRule getSkipStatementRule() {
		return getSkipStatementAccess().getRule();
	}
	
	//CompositionStatement:
	//	{CompositionStatement}
	//	'{' firstStatement=AbstractStatement '}'
	//	'intm:' '[' intermediateCondition=Condition ']'
	//	'{' secondStatement=AbstractStatement '}';
	public CompositionStatementElements getCompositionStatementAccess() {
		return pCompositionStatement;
	}
	
	public ParserRule getCompositionStatementRule() {
		return getCompositionStatementAccess().getRule();
	}
	
	//SelectionStatement:
	//	{SelectionStatement}
	//	'if' '(' guards+=Condition ')' 'then' '{' commands+=AbstractStatement '}' ('elseif' '(' guards+=Condition ')' 'then'
	//	'{' commands+=AbstractStatement '}')* 'fi';
	public SelectionStatementElements getSelectionStatementAccess() {
		return pSelectionStatement;
	}
	
	public ParserRule getSelectionStatementRule() {
		return getSelectionStatementAccess().getRule();
	}
	
	////RepetitionStatement returns RepetitionStatement:
	////	{RepetitionStatement}
	////		'{' startStatement=AbstractStatement '}'
	////		'while' '(' guard=Condition ')' 'do'
	////		'inv:' '[' invariant=Condition ']'
	////		'var:' '[' variant=Variant ']'
	////		'{' loopStatement=AbstractStatement '}' 'od'
	////		'{' endStatement=AbstractStatement '}'
	////	;
	////Composition3Statement returns Composition3Statement:
	////	{Composition3Statement}
	////		'compo3' '{' firstStatement=AbstractStatement ')'
	////		'intm1:' '[' firstIntermediateCondition=Condition ']'
	////		'{' secondStatement=AbstractStatement ')'
	////		'intm2:' '[' secondIntermediateCondition=Condition ']'
	////		'{' thirdStatement=AbstractStatement ')' '3opmoc'
	////	;
	//SmallRepetitionStatement:
	//	{SmallRepetitionStatement}
	//	'while' '(' guard=Condition ')' 'do'
	//	'inv:' '[' invariant=Condition ']'
	//	'var:' '[' variant=Variant ']'
	//	'{' loopStatement=AbstractStatement '}' 'od';
	public SmallRepetitionStatementElements getSmallRepetitionStatementAccess() {
		return pSmallRepetitionStatement;
	}
	
	public ParserRule getSmallRepetitionStatementRule() {
		return getSmallRepetitionStatementAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Variant:
	//	{Variant} name=EString;
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//JavaVariables:
	//	{JavaVariables}
	//	'JavaVariables' ('variables' '{' variables+=JavaVariable ("," variables+=JavaVariable)* '}')?;
	public JavaVariablesElements getJavaVariablesAccess() {
		return pJavaVariables;
	}
	
	public ParserRule getJavaVariablesRule() {
		return getJavaVariablesAccess().getRule();
	}
	
	//JavaVariable:
	//	{JavaVariable} name=EString;
	public JavaVariableElements getJavaVariableAccess() {
		return pJavaVariable;
	}
	
	public ParserRule getJavaVariableRule() {
		return getJavaVariableAccess().getRule();
	}
	
	//GlobalConditions:
	//	{GlobalConditions}
	//	'GlobalConditions' ('conditions' '{' conditions+=Condition ("," conditions+=Condition)* '}')?;
	public GlobalConditionsElements getGlobalConditionsAccess() {
		return pGlobalConditions;
	}
	
	public ParserRule getGlobalConditionsRule() {
		return getGlobalConditionsAccess().getRule();
	}
	
	//Renaming:
	//	{Renaming}
	//	'Renaming' ('renames' '{' rename+=Rename rename+=Rename* '}')?;
	public RenamingElements getRenamingAccess() {
		return pRenaming;
	}
	
	public ParserRule getRenamingRule() {
		return getRenamingAccess().getRule();
	}
	
	//Rename:
	//	{Rename}
	//	'{'
	//	'type' type=EString
	//	'function' function=EString
	//	'newName' newName=EString
	//	'}';
	public RenameElements getRenameAccess() {
		return pRename;
	}
	
	public ParserRule getRenameRule() {
		return getRenameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
