\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Sep 26 14:55:53 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_corc2.0/runtime-EclipseApplication/IntegerListOO";\include "helper.key";\programVariables {int tmp; int j; int i; IntList self; Heap heapAtPre;}\problem {
     \forall int k;
       (   leq(Z(0(#)), k) & lt(k, i)
        -> \forall int m;
             (     lt(k, m)
                 & lt(m,
                      length(int[]::select(heap,
                                           self,
                                           IntList::$data)))
              -> leq(int::select(heap,
                                 int[]::select(heap,
                                               self,
                                               IntList::$data),
                                 arr(k)),
                     int::select(heap,
                                 int[]::select(heap,
                                               self,
                                               IntList::$data),
                                 arr(m)))))
   & \forall int h;
       (     lt(j, h)
           & lt(h,
                length(int[]::select(heap,
                                     self,
                                     IntList::$data)))
        -> leq(int::select(heap,
                           int[]::select(heap,
                                         self,
                                         IntList::$data),
                           arr(add(j, Z(1(#))))),
               int::select(heap,
                           int[]::select(heap,
                                         self,
                                         IntList::$data),
                           arr(h))))
   & geq(j, i)
   & gt(int::select(heap,
                    int[]::select(heap,
                                  self,
                                  IntList::$data),
                    arr(j)),
        int::select(heap,
                    int[]::select(heap,
                                  self,
                                  IntList::$data),
                    arr(add(j, Z(1(#))))))
   & !int[]::select(heap, self, IntList::$data) = null
   & geq(i, Z(0(#)))
   & leq(i,
         length(int[]::select(heap,
                              self,
                              IntList::$data)))
   & leq(j,
         sub(length(int[]::select(heap,
                                  self,
                                  IntList::$data)),
             Z(2(#))))
   & geq(j, sub(i, Z(1(#))))
   &   int[]::exactInstance(int[]::select(heap,
                                          self,
                                          IntList::$data))
     = TRUE
   &   boolean::select(heap,
                       int[]::select(heap,
                                     self,
                                     IntList::$data),
                       java.lang.Object::<created>)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & IntList::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap}
     \<{
         tmp=self.data[j];
         self.data[j]=self.data[j+1];
         self.data[j+1]=tmp;
       }\> (  \forall int k;
                (   leq(Z(0(#)), k) & lt(k, i)
                 -> \forall int m;
                      (     lt(k, m)
                          & lt(m,
                               length(int[]::select(heap,
                                                    self,
                                                    IntList::$data)))
                       -> leq(int::select(heap,
                                          int[]::select(heap,
                                                        self,
                                                        IntList::$data),
                                          arr(k)),
                              int::select(heap,
                                          int[]::select(heap,
                                                        self,
                                                        IntList::$data),
                                          arr(m)))))
            & \forall int h;
                (     lt(j, h)
                    & lt(h,
                         length(int[]::select(heap,
                                              self,
                                              IntList::$data)))
                 -> leq(int::select(heap,
                                    int[]::select(heap,
                                                  self,
                                                  IntList::$data),
                                    arr(j)),
                        int::select(heap,
                                    int[]::select(heap,
                                                  self,
                                                  IntList::$data),
                                    arr(h)))))

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "1762")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "polySimp_elimSub" (formula "8") (term "1"))
(rule "mul_literals" (formula "8") (term "1,1"))
(rule "polySimp_elimSub" (formula "7") (term "1"))
(rule "mul_literals" (formula "7") (term "1,1"))
(rule "polySimp_addComm0" (formula "4") (term "0,2,1"))
(rule "polySimp_addComm0" (formula "2") (term "0,2,0,1,0"))
(rule "polySimp_addComm0" (formula "8") (term "1"))
(rule "polySimp_addComm0" (formula "7") (term "1"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,1,0,0,0"))
(rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
(rule "inEqSimp_gtToGeq" (formula "4"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "4") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "1,0"))
(rule "inEqSimp_homoInEq0" (formula "7"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "eval_order_array_access4" (formula "17") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "17"))
(rule "variableDeclaration" (formula "17") (newnames "x_arr"))
(rule "assignment_read_attribute" (formula "17"))
(branch "Normal Execution (self != null)"
   (rule "assignment_array2" (formula "17"))
   (branch "Normal Execution (x_arr != null)"
      (builtin "One Step Simplification" (formula "17"))
      (rule "eval_order_array_access1" (formula "17") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr_1"))
      (rule "assignment_read_attribute" (formula "17"))
      (branch "Normal Execution (self != null)"
         (builtin "One Step Simplification" (formula "17"))
         (rule "eval_order_array_access3" (formula "17") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr_2"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr_2"))
         (rule "assignment" (formula "17") (term "1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x"))
         (rule "assignment" (formula "17") (term "1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_1"))
         (rule "eval_order_array_access4" (formula "17") (term "1") (inst "#v0=x_arr_3"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr_3"))
         (rule "assignment_read_attribute" (formula "17"))
         (branch "Normal Execution (self != null)"
            (builtin "One Step Simplification" (formula "17"))
            (rule "eval_order_array_access5" (formula "17") (term "1") (inst "#v1=x_2") (inst "#ar1=x_arr_4"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr_4"))
            (rule "assignment" (formula "17") (term "1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_2"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1"))
            (rule "polySimp_rightDist" (formula "7") (term "1"))
            (rule "mul_literals" (formula "7") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,1"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0,1"))
            (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
            (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "qeq_literals" (formula "8") (term "0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "nnf_imp2or" (formula "2") (term "0"))
            (rule "nnf_imp2or" (formula "1") (term "0"))
            (rule "nnf_imp2or" (formula "16") (term "0,1,0,1"))
            (rule "nnf_notAnd" (formula "2") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "2") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "nnf_imp2or" (formula "16") (term "0,0,0,1"))
            (rule "nnf_imp2or" (formula "1") (term "0,1,0"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,1,0,1"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,1,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,1,0,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,1,0,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,1,0,1"))
            (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,0,1"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1,0"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1"))
            (rule "nnf_imp2or" (formula "16") (term "0,1,0,0,0,1"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,1,0,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,1,0,0,0,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,1,0,0,0,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0,0,0,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,0,0,0,1"))
            (rule "commute_or" (formula "1") (term "0,0,1,0"))
            (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "arrayLengthNotNegative" (formula "6") (term "0"))
            (rule "assignmentAdditionInt" (formula "17") (term "1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "translateJavaAddInt" (formula "17") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
            (rule "assignment_array2" (formula "17"))
            (branch "Normal Execution (x_arr_4 != null)"
               (builtin "One Step Simplification" (formula "17"))
               (rule "assignment_to_primitive_array_component" (formula "17"))
               (branch "Normal Execution (x_arr_2 != null)"
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "eval_order_array_access1" (formula "17") (term "1") (inst "#v0=x_arr"))
                  (rule "variableDeclarationAssign" (formula "17") (term "1"))
                  (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr_5"))
                  (rule "assignment_read_attribute" (formula "17"))
                  (branch "Normal Execution (self != null)"
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "dismissNonSelectedField" (formula "17") (term "0,1,0"))
                     (rule "eval_order_array_access2" (formula "17") (term "1") (inst "#v0=x") (inst "#ar1=x_arr_6"))
                     (rule "variableDeclarationAssign" (formula "17") (term "1"))
                     (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr_6"))
                     (rule "assignment" (formula "17") (term "1"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "variableDeclarationAssign" (formula "17") (term "1"))
                     (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_3"))
                     (rule "assignmentAdditionInt" (formula "17") (term "1"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "translateJavaAddInt" (formula "17") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                     (rule "assignment_to_primitive_array_component" (formula "17"))
                     (branch "Normal Execution (x_arr_6 != null)"
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "emptyModality" (formula "17") (term "1"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,1,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,1"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,1"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,1,1,0,1"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,1,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,1"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,1"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,1,1,0,1"))
                        (rule "pullOutSelect" (formula "17") (term "1,1,0,1") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "equal_literals" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "castDel" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "18") (term "1,1,0,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "andRight" (formula "17"))
                        (branch
                           (rule "allRight" (formula "17") (inst "sk=k_0"))
                           (rule "orRight" (formula "17"))
                           (rule "orRight" (formula "17"))
                           (rule "allRight" (formula "19") (inst "sk=m_0"))
                           (rule "orRight" (formula "19"))
                           (rule "orRight" (formula "19"))
                           (rule "inEqSimp_leqRight" (formula "17"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfStore" (formula "3"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "castDel" (formula "3") (term "1,0"))
                           (rule "eqSymm" (formula "3") (term "0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                           (rule "times_zero_1" (formula "6") (term "0,0"))
                           (rule "add_zero_left" (formula "6") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "mul_literals" (formula "6") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "6"))
                           (rule "leq_literals" (formula "12") (term "0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=arr_4"))
                           (rule "simplifySelectOfStore" (formula "3"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "castDel" (formula "3") (term "1,0"))
                           (rule "eqSymm" (formula "3") (term "0,0"))
                           (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_5"))
                           (rule "simplifySelectOfStore" (formula "5"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "castDel" (formula "5") (term "1,0"))
                           (rule "eqSymm" (formula "5") (term "0,0"))
                           (rule "pullOutSelect" (formula "5") (term "2,0") (inst "selectSK=arr_6"))
                           (rule "simplifySelectOfStore" (formula "5"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "castDel" (formula "5") (term "1,0"))
                           (rule "eqSymm" (formula "5") (term "0,0"))
                           (rule "all_pull_out3" (formula "11") (term "0"))
                           (rule "shift_paren_or" (formula "11") (term "0,0"))
                           (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "23"))
                           (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
                           (rule "true_left" (formula "1"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "m_0 = j TRUE"
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "3"))
                              (rule "polySimp_homoEq" (formula "4") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,0"))
                              (rule "equal_literals" (formula "4") (term "0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1"))
                              (rule "polySimp_rightDist" (formula "6") (term "1"))
                              (rule "mul_literals" (formula "6") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_contradEq3" (formula "4") (term "0,0") (ifseqformula "2"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                              (rule "qeq_literals" (formula "4") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "inEqSimp_contradEq3" (formula "4") (term "0,0") (ifseqformula "2"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                              (rule "qeq_literals" (formula "4") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                              (rule "times_zero_1" (formula "6") (term "0,0"))
                              (rule "add_zero_left" (formula "6") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "allLeft" (formula "8") (inst "t=k_0"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0,0,0,0") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "8") (term "0,0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq0" (formula "8") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
                              (rule "leq_literals" (formula "8") (term "0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "commute_or" (formula "8") (term "0,0"))
                              (rule "allLeft" (formula "8") (inst "t=add(Z(1(#)), j)"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                              (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "8") (term "0,0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "8") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1"))
                              (rule "leq_literals" (formula "8") (term "0,1"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "8"))
                              (rule "andLeft" (formula "16"))
                              (rule "inEqSimp_homoInEq1" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
                              (rule "add_literals" (formula "16") (term "1,1,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0"))
                              (rule "add_zero_right" (formula "16") (term "0"))
                              (rule "leq_literals" (formula "16"))
                              (rule "closeFalse" (formula "16"))
                           )
                           (branch "m_0 = j FALSE"
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "allLeft" (formula "10") (inst "t=k_0"))
                              (rule "inEqSimp_contradInEq0" (formula "10") (term "1,0,0,0,0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0,0"))
                              (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0,0,0") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "10") (term "0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "commute_or" (formula "10") (term "0,0"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch "k_0 = j TRUE"
                                 (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "10") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "10") (term "0,2,1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                 (rule "polySimp_homoEq" (formula "5") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                 (rule "equal_literals" (formula "5") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "8") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "4"))
                                 (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                                 (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0"))
                                 (rule "leq_literals" (formula "23") (term "0"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "false_right" (formula "23"))
                                 (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "6"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "12"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                 (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                 (rule "add_literals" (formula "12") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0"))
                                 (rule "add_zero_right" (formula "12") (term "0"))
                                 (rule "leq_literals" (formula "12"))
                                 (rule "closeFalse" (formula "12"))
                              )
                              (branch "k_0 = j FALSE"
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "m_0 = 1 + j TRUE"
                                    (rule "applyEqReverse" (formula "6") (term "1,1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                                    (rule "polySimp_homoEq" (formula "24"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                                    (rule "mul_literals" (formula "24") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                    (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                    (rule "add_literals" (formula "24") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "24") (term "1,0"))
                                    (rule "add_zero_right" (formula "24") (term "0"))
                                    (rule "equal_literals" (formula "24"))
                                    (rule "false_right" (formula "24"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                    (rule "mul_literals" (formula "2") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "2") (term "0,0"))
                                    (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "3"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "1"))
                                    (rule "add_literals" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1"))
                                    (rule "mul_literals" (formula "4") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradEq3" (formula "3") (term "0,0") (ifseqformula "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "3") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "inEqSimp_homoInEq0" (formula "3"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "mul_literals" (formula "3") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                    (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "21"))
                                    (rule "inEqSimp_contradEq3" (formula "21") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                                    (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0"))
                                    (rule "qeq_literals" (formula "21") (term "0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "false_right" (formula "21"))
                                    (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "6") (term "0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                    (rule "mul_literals" (formula "6") (term "1"))
                                    (rule "allLeft" (formula "8") (inst "t=j"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                    (rule "inEqSimp_contradInEq0" (formula "8") (term "0,0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "8") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "16"))
                                    (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0"))
                                    (rule "leq_literals" (formula "8") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "3"))
                                    (rule "andLeft" (formula "8"))
                                    (rule "inEqSimp_homoInEq1" (formula "8"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0"))
                                    (rule "add_zero_right" (formula "8") (term "0"))
                                    (rule "leq_literals" (formula "8"))
                                    (rule "closeFalse" (formula "8"))
                                 )
                                 (branch "m_0 = 1 + j FALSE"
                                    (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                    (rule "mul_literals" (formula "4") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                    (rule "allLeft" (formula "8") (inst "t=m_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "8") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,0"))
                                    (rule "leq_literals" (formula "8") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "4"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "8") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "ifthenelse_split" (formula "3") (term "0"))
                                    (branch "k_0 = 1 + j TRUE"
                                       (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "9") (term "1,1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEq" (formula "9") (term "0,2,1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                                       (rule "polySimp_homoEq" (formula "25"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                       (rule "polySimp_addComm0" (formula "25") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                                       (rule "add_literals" (formula "25") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0"))
                                       (rule "add_zero_right" (formula "25") (term "0"))
                                       (rule "equal_literals" (formula "25"))
                                       (rule "false_right" (formula "25"))
                                       (rule "applyEq" (formula "7") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0"))
                                       (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "3"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "1"))
                                       (rule "add_literals" (formula "2") (term "0,1"))
                                       (rule "applyEq" (formula "10") (term "0,2,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "10") (term "1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "3"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                       (rule "mul_literals" (formula "7") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "2"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                                       (rule "add_literals" (formula "23") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                                       (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0"))
                                       (rule "leq_literals" (formula "23") (term "0"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "false_right" (formula "23"))
                                       (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "2"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                                       (rule "add_literals" (formula "23") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "23") (term "0,0"))
                                       (rule "leq_literals" (formula "23") (term "0"))
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "false_right" (formula "23"))
                                       (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "5"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "inEqSimp_homoInEq1" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                       (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                       (rule "add_literals" (formula "12") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0"))
                                       (rule "add_zero_right" (formula "12") (term "0"))
                                       (rule "leq_literals" (formula "12"))
                                       (rule "closeFalse" (formula "12"))
                                    )
                                    (branch "k_0 = 1 + j FALSE"
                                       (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "8") (term "1,1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "7"))
                                       (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                       (rule "add_literals" (formula "7") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "7") (term "1,0"))
                                       (rule "add_zero_right" (formula "7") (term "0"))
                                       (rule "qeq_literals" (formula "7"))
                                       (rule "closeFalse" (formula "7"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch
                           (rule "allRight" (formula "17") (inst "sk=h_0"))
                           (rule "orRight" (formula "17"))
                           (rule "orRight" (formula "17"))
                           (rule "inEqSimp_geqRight" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
                           (rule "simplifySelectOfStore" (formula "3"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "castDel" (formula "3") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "3") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "3") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "7") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfStore" (formula "3"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "castDel" (formula "3") (term "1,0"))
                           (rule "inEqSimp_contradEq3" (formula "3") (term "0,0") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "3") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "9"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "8"))
                           (rule "times_zero_1" (formula "11") (term "0,0"))
                           (rule "add_zero_left" (formula "11") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "mul_literals" (formula "11") (term "1"))
                           (rule "all_pull_out3" (formula "6") (term "0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0,0") (ifseqformula "21"))
                           (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "23"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "18")))
                           (rule "true_left" (formula "16"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "j = -1 + h_0 TRUE"
                              (rule "applyEqReverse" (formula "6") (term "1,1") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "1,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "leq_literals" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "j = -1 + h_0 FALSE"
                              (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "2") (term "1"))
                              (rule "add_literals" (formula "2") (term "0,1"))
                              (rule "inEqSimp_contradEq3" (formula "21") (ifseqformula "2"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                              (rule "add_literals" (formula "21") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0"))
                              (rule "add_zero_right" (formula "21") (term "0,0"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "false_right" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "2"))
                              (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                              (rule "polySimp_elimOne" (formula "8") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "8"))
                              (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                              (rule "add_literals" (formula "7") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0,0"))
                              (rule "add_zero_right" (formula "7") (term "0,0"))
                              (rule "qeq_literals" (formula "7") (term "0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "9"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "7"))
                              (rule "times_zero_1" (formula "11") (term "0,0"))
                              (rule "add_zero_left" (formula "11") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                              (rule "mul_literals" (formula "11") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "11"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "allLeft" (formula "6") (inst "t=h_0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                              (rule "inEqSimp_commuteGeq" (formula "6") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "6") (term "0,0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "6") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "6") (term "0,0,1"))
                              (rule "leq_literals" (formula "6") (term "0,1"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "1"))
                              (rule "andLeft" (formula "6"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                              (rule "add_literals" (formula "6") (term "1,1,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "leq_literals" (formula "6"))
                              (rule "closeFalse" (formula "6"))
                           )
                        )
                     )
                     (branch "Null Reference (x_arr_6 = null)"
                        (builtin "One Step Simplification" (formula "18"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (x_arr_6 != null, but x_3 Out of Bounds!)"
                        (builtin "One Step Simplification" (formula "18"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                        (rule "false_right" (formula "18"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                  )
                  (branch "Null Reference (self = null)"
                     (builtin "One Step Simplification" (formula "18"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Null Reference (x_arr_2 = null)"
                  (builtin "One Step Simplification" (formula "18"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (x_arr_2 != null, but x Out of Bounds!)"
                  (rule "false_right" (formula "18"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
            (branch "Null Reference (x_arr_4 = null)"
               (rule "false_right" (formula "18"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (x_arr_4 != null, but x_2 Out of Bounds!)"
               (rule "false_right" (formula "18"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
               (rule "add_literals" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0"))
               (rule "leq_literals" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "4"))
               (rule "qeq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "closeFalse" (formula "7"))
            )
         )
         (branch "Null Reference (self = null)"
            (builtin "One Step Simplification" (formula "18"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (self = null)"
         (builtin "One Step Simplification" (formula "18"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (x_arr = null)"
      (rule "false_right" (formula "18"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (x_arr != null, but j Out of Bounds!)"
      (builtin "One Step Simplification" (formula "18"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "false_right" (formula "18"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "5"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0"))
      (rule "polySimp_elimOne" (formula "5") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8"))
      (rule "polySimp_mulComm0" (formula "8") (term "1"))
      (rule "polySimp_rightDist" (formula "8") (term "1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
      (rule "mul_literals" (formula "8") (term "0,1"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "4"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
      (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
      (rule "add_literals" (formula "9") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0"))
      (rule "qeq_literals" (formula "9") (term "0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
      (rule "polySimp_addComm0" (formula "4") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "7"))
      (rule "qeq_literals" (formula "4") (term "0"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
(branch "Null Reference (self = null)"
   (rule "close" (formula "17") (ifseqformula "1"))
)
)

}
