<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="push" proven="true" className="IntList" methodName="push">
    <statement name="statement">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true">
        <firstStatement name="statement1">
          <refinement name="tmp = new int[data.length+1];" proven="true">
            <postCondition name="modifiable(tmp); tmp.length = data.length + 1"/>
            <preCondition name="true"/>
          </refinement>
          <postCondition name="modifiable(tmp);&#xD;&#xA;tmp.length = data.length + 1"/>
          <preCondition name="true"/>
        </firstStatement>
        <secondStatement name="statement2">
          <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true">
            <firstStatement name="statement1">
              <refinement name="tmp[tmp.length-1] = newTop;" proven="true">
                <postCondition name="modifiable(tmp,tmp[tmp.length-1]); &#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
                <preCondition name="modifiable(tmp);&#xD;&#xA;tmp.length = data.length + 1"/>
              </refinement>
              <postCondition name="modifiable(tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
              <preCondition name="modifiable(tmp);&#xD;&#xA;tmp.length = data.length + 1"/>
            </firstStatement>
            <secondStatement name="statement2">
              <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true">
                <firstStatement name="statement1">
                  <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true">
                    <firstStatement name="statement1">
                      <refinement name="i = 0;" proven="true">
                        <postCondition name="modifiable(i,tmp,tmp[tmp.length-1]); &#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                        <preCondition name="modifiable(tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
                      </refinement>
                      <postCondition name="modifiable(i,tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                      <preCondition name="modifiable(tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
                    </firstStatement>
                    <secondStatement name="statement2">
                      <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" variantProven="true" preProven="true" postProven="true">
                        <postCondition name="modifiable(i,tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                        <preCondition name="modifiable(i,tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                        <loopStatement name="loop">
                          <refinement name="tmp[i] = data[i];&#xD;&#xA;i++;" proven="true">
                            <postCondition name="modifiable(i,tmp,tmp[i],tmp[tmp.length-1]); &#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                            <preCondition name="modifiable(i,tmp,tmp[tmp.length-1]);&#xD;&#xA;(tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))) &amp; (i &lt; data.length)"/>
                          </refinement>
                          <postCondition name="modifiable(i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                          <preCondition name="modifiable(i,tmp,tmp[tmp.length-1]);&#xD;&#xA;(tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))) &amp; (i &lt; data.length)"/>
                        </loopStatement>
                        <variant name="data.length - i"/>
                        <invariant name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                        <guard name="i &lt; data.length"/>
                      </refinement>
                      <postCondition name="modifiable(data[*],data[*],i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                      <preCondition name="modifiable(i,tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                    </secondStatement>
                    <intermediateCondition name="modifiable(i,tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                  </refinement>
                  <postCondition name="modifiable(data[*],i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                  <preCondition name="modifiable(tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
                </firstStatement>
                <secondStatement name="statement2">
                  <refinement name="data = tmp;" proven="true">
                    <postCondition name="modifiable(data[*],data[*],i,tmp,tmp[i],tmp[tmp.length-1]); &#xD;&#xA;(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
                    <preCondition name="modifiable(data[*],i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                  </refinement>
                  <postCondition name="modifiable(data[*],data[*],i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
                  <preCondition name="modifiable(data[*],i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                </secondStatement>
                <intermediateCondition name="modifiable(data[*],i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
              </refinement>
              <postCondition name="modifiable(data[*],data[*],i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
              <preCondition name="modifiable(tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
            </secondStatement>
            <intermediateCondition name="modifiable(tmp,tmp[tmp.length-1]);&#xD;&#xA;tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
          </refinement>
          <postCondition name="modifiable(data[*],data[*],i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
          <preCondition name="modifiable(tmp);&#xD;&#xA;tmp.length = data.length + 1"/>
        </secondStatement>
        <intermediateCondition name="modifiable(tmp);&#xD;&#xA;tmp.length = data.length + 1"/>
      </refinement>
      <postCondition name="modifiable(data[*],data[*],i,tmp,tmp[i],tmp[tmp.length-1]);&#xD;&#xA;(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
      <preCondition name="true"/>
    </statement>
    <preCondition name="pre"/>
    <postCondition name="post"/>
    <methodObj href="IntList.cbcclass#//@methods.0"/>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int newTop" kind="PARAM"/>
    <variables name="int[] tmp"/>
    <variables name="int i"/>
    <fields href="IntList.cbcclass#//@fields.0"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="data != null"/>
    <conditions name="data.length >= 0"/>
    <conditions name="i >= 0"/>
    <conditions name="\old(data) = data"/>
    <conditions name="tmp != null"/>
  </cbcmodel:GlobalConditions>
</xmi:XMI>
