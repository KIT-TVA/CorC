\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Sep 25 18:24:08 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_corc2.0/runtime-EclipseApplication/BankAccountOO";\include "helper.key";\programVariables {int old_destination_balance; int old_source_balance; boolean tmp; boolean tmp2; Account source; Account destination; int amount; boolean ret; int old_destination_balance_old; int old_source_balance_old; Account source_old; Account destination_old; int amount_old; boolean ret_old; Account self; Heap heapAtPre;}\problem {
     (   tmp2 = TRUE
      ->   add(old_destination_balance, amount)
         = int::select(heap,
                       destination,
                       Account::$balance))
   & (   tmp2 = FALSE
      ->   old_destination_balance
         = int::select(heap,
                       destination,
                       Account::$balance))
   & (   tmp = TRUE
      ->     sub(old_source_balance, amount)
           = int::select(heap,
                         source,
                         Account::$balance)
         & geq(int::select(heap,
                           source,
                           Account::$balance),
               int::select(heap,
                           source,
                           Account::$OVERDRAFT_LIMIT)))
   & (   tmp = FALSE
      ->   old_source_balance
         = int::select(heap, source, Account::$balance))
   & tmp = TRUE
   & gt(amount, Z(0(#)))
   & FALSE = tmp2
   & !source = destination
   & Account::exactInstance(source) = TRUE
   &   boolean::select(heap,
                       source,
                       java.lang.Object::<created>)
     = TRUE
   & !source = null
   & Account::exactInstance(destination) = TRUE
   &   boolean::select(heap,
                       destination,
                       java.lang.Object::<created>)
     = TRUE
   & !destination = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Account::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || old_destination_balance_old:=old_destination_balance
    || old_source_balance_old:=old_source_balance
    || source_old:=source
    || destination_old:=destination
    || amount_old:=amount
    || ret_old:=ret}
     \<{
         source.undoUpdate(amount*-1);
       }\> (    old_destination_balance
              = int::select(heap,
                            destination,
                            Account::$balance)
            &   old_source_balance
              = int::select(heap,
                            source,
                            Account::$balance)
            &   old_destination_balance
              = old_destination_balance_old
            &   old_source_balance
              = old_source_balance_old
            & source = source_old
            & destination = destination_old
            & amount = amount_old
            & ret = ret_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "487")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "20") (term "0,0,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "20") (term "1,0,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "20") (term "1,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "20") (term "1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "20") (term "1,0,0,0,0,1"))
(rule "eqSymm" (formula "20") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "20") (term "1,0,0,1"))
(rule "eqSymm" (formula "20") (term "1,0,1"))
(rule "eqSymm" (formula "7"))
(builtin "One Step Simplification" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "eqSymm" (formula "4") (term "1"))
(rule "eqSymm" (formula "3") (term "0,1"))
(rule "eqSymm" (formula "1") (term "1"))
(rule "eqSymm" (formula "2") (term "1"))
(rule "replace_known_left" (formula "3") (term "0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "16"))
(builtin "One Step Simplification" (formula "1"))
(rule "true_left" (formula "1"))
(rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "15"))
(builtin "One Step Simplification" (formula "1"))
(rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "4"))
(rule "true_left" (formula "4"))
(rule "polySimp_elimSub" (formula "2") (term "1"))
(rule "polySimp_addComm0" (formula "2") (term "1"))
(rule "inEqSimp_gtToGeq" (formula "5"))
(rule "mul_literals" (formula "5") (term "1,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0"))
(rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
(rule "inEqSimp_commuteGeq" (formula "3"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "mul_literals" (formula "5") (term "1"))
(rule "methodCallUnfoldArguments" (formula "19") (term "1"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "var"))
(rule "assignment" (formula "19") (term "1"))
(builtin "One Step Simplification" (formula "19"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "var_1"))
(rule "assignmentMultiplicationInt" (formula "19") (term "1"))
(builtin "One Step Simplification" (formula "19"))
(rule "translateJavaMulInt" (formula "19") (term "0,1,0"))
(builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_undoUpdate,result,exc,heapAfter_undoUpdate,anon_heap_undoUpdate") (contract "Account[Account::undoUpdate(int)].JML normal_behavior operation contract.0"))
(branch "Post (undoUpdate)"
   (builtin "One Step Simplification" (formula "15"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "translateJavaSubInt" (formula "15") (term "0,0,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,0,1,1"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "polySimp_elimSub" (formula "18") (term "1,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1"))
   (rule "polySimp_elimSub" (formula "18") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "1,0,0"))
   (rule "polySimp_addComm0" (formula "18") (term "1,0,1"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0"))
   (rule "inEqSimp_commuteGeq" (formula "18") (term "0"))
   (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "2"))
   (rule "polySimp_addAssoc" (formula "18") (term "1,0"))
   (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0"))
   (rule "add_literals" (formula "18") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "18") (term "0,1,0"))
   (rule "add_zero_left" (formula "18") (term "1,0"))
   (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "2"))
   (rule "applyEq" (formula "18") (term "1,1,0,1") (ifseqformula "2"))
   (rule "polySimp_addAssoc" (formula "18") (term "1,0,1"))
   (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,1"))
   (rule "add_literals" (formula "18") (term "1,0,1,0,1"))
   (rule "times_zero_1" (formula "18") (term "0,1,0,1"))
   (rule "add_zero_left" (formula "18") (term "1,0,1"))
   (rule "pullOutSelect" (formula "17") (term "0,1") (inst "selectSK=Account_balance_0"))
   (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "17"))
   (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "15"))
   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "22")) (ifInst ""  (formula "7")))
   (rule "eqSymm" (formula "19") (term "0,1"))
   (rule "polySimp_homoEq" (formula "18") (term "1"))
   (rule "polySimp_addComm1" (formula "18") (term "0,1"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0,1"))
   (rule "elementOfSingleton" (formula "17") (term "0,0"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "applyEqReverse" (formula "19") (term "1,0,1") (ifseqformula "17"))
   (rule "applyEqReverse" (formula "18") (term "0,0,0,0,1") (ifseqformula "17"))
   (rule "hideAuxiliaryEq" (formula "17"))
   (rule "eqSymm" (formula "18") (term "0,1"))
   (rule "polySimp_addComm0" (formula "17") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "17") (term "0,1"))
   (rule "polySimp_sepNegMonomial" (formula "17") (term "1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,1"))
   (rule "pullOutSelect" (formula "18") (term "0,0") (inst "selectSK=Account_OVERDRAFT_LIMIT_0"))
   (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "15"))
   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")) (ifInst ""  (formula "7")))
   (rule "elementOfSingleton" (formula "18") (term "0,0"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "applyEqReverse" (formula "19") (term "0,0") (ifseqformula "18"))
   (rule "hideAuxiliaryEq" (formula "18"))
   (rule "commute_and" (formula "18") (term "1"))
   (rule "emptyModality" (formula "24") (term "1"))
   (builtin "One Step Simplification" (formula "24"))
   (rule "replaceKnownSelect_taclet0_0" (formula "24") (term "0,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "24") (term "0,1"))
   (rule "pullOutSelect" (formula "24") (term "0,0") (inst "selectSK=Account_balance_1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "10")))
   (rule "eqSymm" (formula "25") (term "0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "1") (term "0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "21"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "25") (term "1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "eqSymm" (formula "24") (term "0"))
   (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "24"))
   (rule "replace_known_right" (formula "18") (term "1,1") (ifseqformula "24"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "notLeft" (formula "18"))
   (rule "inEqSimp_leqRight" (formula "18"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "4"))
   (rule "polySimp_rightDist" (formula "1") (term "0,0"))
   (rule "mul_literals" (formula "1") (term "0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Exceptional Post (undoUpdate)"
   (builtin "One Step Simplification" (formula "15"))
   (builtin "One Step Simplification" (formula "21"))
   (rule "translateJavaSubInt" (formula "15") (term "0,0,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "15") (term "1,0,1,1,0,1,1"))
   (rule "andLeft" (formula "15"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0") (ifseqformula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "18"))
   (rule "notLeft" (formula "16"))
   (rule "close" (formula "20") (ifseqformula "19"))
)
(branch "Pre (undoUpdate)"
   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "13")))
   (rule "closeTrue" (formula "19"))
)
(branch "Null reference (var = null)"
   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "16")))
   (rule "closeTrue" (formula "19"))
)
)

}
