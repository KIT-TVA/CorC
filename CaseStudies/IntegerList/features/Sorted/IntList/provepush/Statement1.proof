\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "optimisedSelectRules" : "optimisedSelectRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 2147483647,
        "Timeout" : -1,
        "options" : { 
            "ABSTRACT_PROOF_FIRST_ORDER_GOALS_FORBIDDEN" : "true",
            "ABSTRACT_PROOF_FORBIDDEN_RULES" : "sorted,containsNewTop,containsOldElements,original,original_pre,original_post,definition_axiom,ifthenelse_split",
            "ABSTRACT_PROOF_FORBIDDEN_RULE_SETS" : "sorted,containsNewTop,containsOldElements,original,original_pre,original_post,expand_def,cut,cut_direct",
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_EXPAND",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_NONCLOSE",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "C:/Users/Markus/Documents/Studium/HIWI/work/CorC/CaseStudies/IntegerList";
\include "helper.key";
\programVariables {
int newTop;
int newTop_old;
int[] data1_oldVal;
int newTop_oldVal;
int[] data_oldVal;
IntList self;
Heap heapAtPre;
}
\problem {
     original_pre
   & (  \forall int k;
          (     leq(Z(0(#)), k)
              & lt(k,
                   sub(length(int[]::select(heap,
                                            self,
                                            IntList::$data)),
                       Z(1(#))))
           -> geq(int::select(heap,
                              int[]::select(heap,
                                            self,
                                            IntList::$data),
                              arr(k)),
                  int::select(heap,
                              int[]::select(heap,
                                            self,
                                            IntList::$data),
                              arr(add(k, Z(1(#)))))))
      | \forall int k;
          (     leq(Z(0(#)), k)
              & lt(k,
                   sub(length(int[]::select(heap,
                                            self,
                                            IntList::$data)),
                       Z(1(#))))
           -> leq(int::select(heap,
                              int[]::select(heap,
                                            self,
                                            IntList::$data),
                              arr(k)),
                  int::select(heap,
                              int[]::select(heap,
                                            self,
                                            IntList::$data),
                              arr(add(k, Z(1(#))))))))
   & !int[]::select(heap, self, IntList::$data) = null
   & geq(length(int[]::select(heap,
                              self,
                              IntList::$data)),
         Z(0(#)))
   & !data1_oldVal = null
   & geq(length(data1_oldVal), Z(0(#)))
   &   data1_oldVal
     = int[]::select(heap, self, IntList::$data)
   &   int[]::exactInstance(int[]::select(heap,
                                          self,
                                          IntList::$data))
     = TRUE
   &   boolean::select(heap,
                       int[]::select(heap,
                                     self,
                                     IntList::$data),
                       java.lang.Object::<created>)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & IntList::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {newTop_oldVal:=newTop
    || data_oldVal:=int[]::select(heap,
                                  self,
                                  IntList::$data)
    || heapAtPre:=heap
    || newTop_old:=newTop}
     \<{
       self.original_push(newTop);
     }\> (original_post & newTop = newTop_old)
}

\proof {
(keyLog "0" (keyUser "Markus" ) (keyVersion "255661ae2f2ff3b2df9506575116825ddb2e1159"))

(autoModeTime "519")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "15") (term "1,0,1"))
(rule "eqSymm" (formula "5"))
(rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "1,1,1,0,0,0"))
(rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1"))
(rule "mul_literals" (formula "2") (term "1,1,1,0,0,1"))
(rule "polySimp_addComm0" (formula "2") (term "0,2,1,1,0,1"))
(rule "polySimp_addComm0" (formula "2") (term "0,2,1,1,0,0"))
(rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1"))
(rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,0"))
(rule "applyEq" (formula "7") (term "1,0") (ifseqformula "5"))
(rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
(rule "applyEq" (formula "2") (term "1,0,1,0,1") (ifseqformula "4"))
(rule "applyEq" (formula "2") (term "1,1,1,0,1") (ifseqformula "4"))
(rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "4"))
(rule "applyEq" (formula "2") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "4"))
(rule "applyEq" (formula "2") (term "0,0,1,0,0,1,0,0,1") (ifseqformula "4"))
(rule "applyEq" (formula "2") (term "1,0,1,0,0") (ifseqformula "4"))
(rule "applyEq" (formula "2") (term "1,1,1,0,0") (ifseqformula "4"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
(rule "nnf_imp2or" (formula "2") (term "0,0"))
(rule "nnf_imp2or" (formula "2") (term "0,1"))
(rule "nnf_notAnd" (formula "2") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0,1"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
 (builtin "Use Operation Contract" (formula "13") (newnames "heapBefore_original_push,exc,heapAfter_original_push,anon_heap_original_push") (contract "IntList[IntList::original_push(int)].JML normal_behavior operation contract.0") (modality "diamond"))
(branch "Post (original_push)"
    (opengoal " original_pre,    \\forall int k;      (  leq(k, Z(neglit(1(#))))       | geq(k,             add(Z(neglit(1(#))), length(data1_oldVal)))       | leq(int::select(heap,                         data1_oldVal,                         arr(add(Z(1(#)), k))),             int::select(heap, data1_oldVal, arr(k))))  | \\forall int k;      (  leq(k, Z(neglit(1(#))))       | geq(k,             add(Z(neglit(1(#))), length(data1_oldVal)))       | geq(int::select(heap,                         data1_oldVal,                         arr(add(Z(1(#)), k))),             int::select(heap, data1_oldVal, arr(k)))),  geq(length(data1_oldVal), Z(0(#))),    int[]::select(heap, self, IntList::$data)  = data1_oldVal,  int[]::exactInstance(data1_oldVal) = TRUE,    boolean::select(heap,                    data1_oldVal,                    java.lang.Object::<created>)  = TRUE,    boolean::select(heap,                    self,                    java.lang.Object::<created>)  = TRUE,  IntList::exactInstance(self) = TRUE,  java.lang.Object::<inv>(heap, self),  wellFormed(heap),  wellFormed(anon_heap_original_push<<anonHeapFunction>>),  {newTop_old:=newTop}    {heapBefore_original_push:=heap}      (    anon(heap,                allFields(int[]::select(heap,                                        self,                                        IntList::$data))<<origin(\"assignable @ file IntList.java @ line 33\",\"[]\")>>,                anon_heap_original_push<<anonHeapFunction>>)         = heapAfter_original_push       & {heap:=heapAfter_original_push}           (  exc = null            & (  ((((\\exists int v;                       ((  inInt(v)                         & ((  (leq(Z(0(#)), v)                             & lt(v,                                  length(int[]::select(heap,                                                       self,                                                       IntList::$data))))<<SC>>                             &   int::select(heap,                                             int[]::select(heap,                                                           self,                                                           IntList::$data),                                             arr(v))                               = newTop)<<SC>>))<<SC>>)               & \\forall int k;                   (   inInt(k)                    -> (  leq(Z(0(#)), k)                        & lt(k,                             length(int[]::select(heapBefore_original_push,                                                  self,                                                  IntList::$data))))<<SC>>                    -> \\exists int z;                         ((  inInt(z)                           & ((  (leq(Z(0(#)), z)                               & lt(z,                                    length(int[]::select(heap,                                                         self,                                                         IntList::$data))))<<SC>>                               &   int::select(heap,                                               int[]::select(heap,                                                             self,                                                             IntList::$data),                                               arr(z))                                 = int::select(heap,                                               int[]::select(heapBefore_original_push,                                                             self,                                                             IntList::$data),                                               arr(k)))<<SC>>))<<SC>>)))<<SC>>               & !  int[]::select(heap,                                  self,                                  IntList::$data)                  = null)<<SC>>               & !self = null)<<SC,                                origin(\"ensures @ file IntList.java @ line 32\",\"[]\")>>               & java.lang.Object::<inv>(heap, self)<<impl>>)<<SC>>               & (exc = null)<<impl,                               origin(\"ensures (implicit)\",\"[]\")>>))) ==>  data1_oldVal = null,  self = null,  {newTop_old:=newTop}    {heap:=heapAfter_original_push}      \\<{}\\> (original_post & newTop_old = newTop)")
)
(branch "Exceptional Post (original_push)"
    (opengoal " original_pre,    \\forall int k;      (  leq(k, Z(neglit(1(#))))       | geq(k,             add(Z(neglit(1(#))), length(data1_oldVal)))       | leq(int::select(heap,                         data1_oldVal,                         arr(add(Z(1(#)), k))),             int::select(heap, data1_oldVal, arr(k))))  | \\forall int k;      (  leq(k, Z(neglit(1(#))))       | geq(k,             add(Z(neglit(1(#))), length(data1_oldVal)))       | geq(int::select(heap,                         data1_oldVal,                         arr(add(Z(1(#)), k))),             int::select(heap, data1_oldVal, arr(k)))),  geq(length(data1_oldVal), Z(0(#))),    int[]::select(heap, self, IntList::$data)  = data1_oldVal,  int[]::exactInstance(data1_oldVal) = TRUE,    boolean::select(heap,                    data1_oldVal,                    java.lang.Object::<created>)  = TRUE,    boolean::select(heap,                    self,                    java.lang.Object::<created>)  = TRUE,  IntList::exactInstance(self) = TRUE,  java.lang.Object::<inv>(heap, self),  wellFormed(heap),  wellFormed(anon_heap_original_push<<anonHeapFunction>>),  {newTop_old:=newTop}    {heapBefore_original_push:=heap}      (    anon(heap,                allFields(int[]::select(heap,                                        self,                                        IntList::$data))<<origin(\"assignable @ file IntList.java @ line 33\",\"[]\")>>,                anon_heap_original_push<<anonHeapFunction>>)         = heapAfter_original_push       & {heap:=heapAfter_original_push}           (  !exc = null            &   boolean::select(heap,                                exc,                                java.lang.Object::<created>)              = TRUE            & (  ((((\\exists int v;                       ((  inInt(v)                         & ((  (leq(Z(0(#)), v)                             & lt(v,                                  length(int[]::select(heap,                                                       self,                                                       IntList::$data))))<<SC>>                             &   int::select(heap,                                             int[]::select(heap,                                                           self,                                                           IntList::$data),                                             arr(v))                               = newTop)<<SC>>))<<SC>>)               & \\forall int k;                   (   inInt(k)                    -> (  leq(Z(0(#)), k)                        & lt(k,                             length(int[]::select(heapBefore_original_push,                                                  self,                                                  IntList::$data))))<<SC>>                    -> \\exists int z;                         ((  inInt(z)                           & ((  (leq(Z(0(#)), z)                               & lt(z,                                    length(int[]::select(heap,                                                         self,                                                         IntList::$data))))<<SC>>                               &   int::select(heap,                                               int[]::select(heap,                                                             self,                                                             IntList::$data),                                               arr(z))                                 = int::select(heap,                                               int[]::select(heapBefore_original_push,                                                             self,                                                             IntList::$data),                                               arr(k)))<<SC>>))<<SC>>)))<<SC>>               & !  int[]::select(heap,                                  self,                                  IntList::$data)                  = null)<<SC>>               & !self = null)<<SC,                                origin(\"ensures @ file IntList.java @ line 32\",\"[]\")>>               & java.lang.Object::<inv>(heap, self)<<impl>>)<<SC>>               & (exc = null)<<impl,                               origin(\"ensures (implicit)\",\"[]\")>>))) ==>  data1_oldVal = null,  self = null,  {newTop_old:=newTop}    {heap:=heapAfter_original_push}      \\<{        throw exc;      }\\> (original_post & newTop_old = newTop)")
)
(branch "Pre (original_push)"
    (opengoal " original_pre,    \\forall int k;      (  leq(k, Z(neglit(1(#))))       | geq(k,             add(Z(neglit(1(#))), length(data1_oldVal)))       | leq(int::select(heap,                         data1_oldVal,                         arr(add(Z(1(#)), k))),             int::select(heap, data1_oldVal, arr(k))))  | \\forall int k;      (  leq(k, Z(neglit(1(#))))       | geq(k,             add(Z(neglit(1(#))), length(data1_oldVal)))       | geq(int::select(heap,                         data1_oldVal,                         arr(add(Z(1(#)), k))),             int::select(heap, data1_oldVal, arr(k)))),  geq(length(data1_oldVal), Z(0(#))),    int[]::select(heap, self, IntList::$data)  = data1_oldVal,  int[]::exactInstance(data1_oldVal) = TRUE,    boolean::select(heap,                    data1_oldVal,                    java.lang.Object::<created>)  = TRUE,    boolean::select(heap,                    self,                    java.lang.Object::<created>)  = TRUE,  IntList::exactInstance(self) = TRUE,  java.lang.Object::<inv>(heap, self),  wellFormed(heap) ==>  data1_oldVal = null,  self = null,  {newTop_old:=newTop}    {heapBefore_original_push:=heap}      (  java.lang.Object::<inv>(heap, self)<<impl>>       & (  wellFormed(heap)          &   boolean::select(heap,                              self,                              java.lang.Object::<created>)            = TRUE          & inInt(newTop)))")
)
(branch "Null reference (self = null)"
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")))
   (rule "orLeft" (formula "2"))
   (branch "forall int k; ( k <= -1 | k >= -1 + data1_oldVal.length | data1_oldVal[1 + k] <= data1_oldVal[k])"
       (opengoal " original_pre,  \\forall int k;    (  leq(k, Z(neglit(1(#))))     | geq(k,           add(Z(neglit(1(#))), length(data1_oldVal)))     | leq(int::select(heap,                       data1_oldVal,                       arr(add(Z(1(#)), k))),           int::select(heap, data1_oldVal, arr(k)))),  geq(length(data1_oldVal), Z(0(#))),    int[]::select(heap, self, IntList::$data)  = data1_oldVal,  int[]::exactInstance(data1_oldVal) = TRUE,    boolean::select(heap,                    data1_oldVal,                    java.lang.Object::<created>)  = TRUE,    boolean::select(heap,                    self,                    java.lang.Object::<created>)  = TRUE,  IntList::exactInstance(self) = TRUE,  java.lang.Object::<inv>(heap, self),  wellFormed(heap) ==> data1_oldVal = null, self = null, true")
   )
   (branch "forall int k; ( k <= -1 | k >= -1 + data1_oldVal.length | data1_oldVal[1 + k] >= data1_oldVal[k])"
      (rule "arrayLengthIsAnInt" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "14")))
      (rule "arrayLengthNotNegative" (formula "4") (term "0"))
       (opengoal " original_pre,  \\forall int k;    (  leq(k, Z(neglit(1(#))))     | geq(k,           add(Z(neglit(1(#))), length(data1_oldVal)))     | geq(int::select(heap,                       data1_oldVal,                       arr(add(Z(1(#)), k))),           int::select(heap, data1_oldVal, arr(k)))),  false,  geq(length(data1_oldVal), Z(0(#))),    int[]::select(heap, self, IntList::$data)  = data1_oldVal,  int[]::exactInstance(data1_oldVal) = TRUE,    boolean::select(heap,                    data1_oldVal,                    java.lang.Object::<created>)  = TRUE,    boolean::select(heap,                    self,                    java.lang.Object::<created>)  = TRUE,  IntList::exactInstance(self) = TRUE,  java.lang.Object::<inv>(heap, self),  wellFormed(heap) ==> data1_oldVal = null, self = null, true")
   )
)
)
}
