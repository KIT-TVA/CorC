<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="push" proven="true" comment="" className="IntList" methodName="push">
    <statement name="statement" id="0359c701-72f3-446e-96ad-33bdbf3a29df">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="e3ae0d60-1fe8-4c91-be6e-70a65151eccf">
        <firstStatement name="statement1" id="a65834d7-01ea-4cea-ba55-44fe43384b63">
          <refinement xsi:type="cbcmodel:OriginalStatement" name="original(newTop);" proven="true" id="3c119bcc-f168-4523-801f-5bcb9956bb6a">
            <postCondition name="((\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop))&amp;(\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z; (0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))))"/>
            <preCondition name="(\forall int k; (0 &lt;= k &#xD;&#xA;&amp; k &lt; data.length-1 &#xD;&#xA;-> data[k] >= data[k+1]))"/>
          </refinement>
          <postCondition name="((\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop))&amp;(\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z; (0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))))"/>
          <preCondition name="(\forall int k; (0 &lt;= k &#xD;&#xA;&amp; k &lt; data.length-1 &#xD;&#xA;-> data[k] >= data[k+1]))"/>
        </firstStatement>
        <secondStatement name="statement2" id="4d8695c1-655f-4f66-b6f8-9b5e11a7bce1">
          <refinement xsi:type="cbcmodel:MethodStatement" name="sort();" proven="true" id="f07928fb-1968-4d13-b165-1c828f63a8c3">
            <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z; (0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k]))))&#xD;&#xA;&amp; ((\forall int k; (0 &lt;= k &#xD;&#xA;&amp; k &lt; data.length-1 &#xD;&#xA;-> (data[k] >= data[k+1]))) | (\forall int k; (0 &lt;= k &#xD;&#xA;&amp; k &lt; data.length-1 &#xD;&#xA;-> (data[k] &lt;= data[k+1]))))"/>
            <preCondition name="((\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop))&amp;(\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z; (0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))))"/>
          </refinement>
          <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z; (0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k]))))&#xD;&#xA;&amp; ((\forall int k; (0 &lt;= k &#xD;&#xA;&amp; k &lt; data.length-1 &#xD;&#xA;-> (data[k] >= data[k+1]))) | (\forall int k; (0 &lt;= k &#xD;&#xA;&amp; k &lt; data.length-1 &#xD;&#xA;-> (data[k] &lt;= data[k+1]))))"/>
          <preCondition name="((\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop))&amp;(\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z; (0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))))"/>
        </secondStatement>
        <intermediateCondition name="((\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop))&amp;(\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z; (0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))))"/>
      </refinement>
      <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z; (0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k]))))&#xD;&#xA;&amp; ((\forall int k; (0 &lt;= k &#xD;&#xA;&amp; k &lt; data.length-1 &#xD;&#xA;-> (data[k] >= data[k+1]))) | (\forall int k; (0 &lt;= k &#xD;&#xA;&amp; k &lt; data.length-1 &#xD;&#xA;-> (data[k] &lt;= data[k+1]))))"/>
      <preCondition name="(\forall int k; (0 &lt;= k &#xD;&#xA;&amp; k &lt; data.length-1 &#xD;&#xA;-> data[k] >= data[k+1]))"/>
    </statement>
    <preCondition name="pre"/>
    <postCondition name="post"/>
    <methodObj href="IntList.cbcclass#//@methods.0"/>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables/>
  <cbcmodel:GlobalConditions>
    <conditions name="data != null"/>
    <conditions name="data.length >= 0"/>
    <conditions name="\old(data) != null"/>
    <conditions name="\old(data).length >= 0"/>
    <conditions name="\old(data) = data"/>
  </cbcmodel:GlobalConditions>
</xmi:XMI>
