<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:de.tu-bs.cs.isf.cbc.cbcmodel="http://www.example.org/cbcmodel">
  <de.tu-bs.cs.isf.cbc.cbcmodel:GlobalConditions>
    <conditions name="data != null"/>
    <conditions name="data.length >= 0"/>
    <conditions name="i >= 0"/>
    <conditions name="\old(data) = data"/>
    <conditions name="tmp != null"/>
  </de.tu-bs.cs.isf.cbc.cbcmodel:GlobalConditions>
  <de.tu-bs.cs.isf.cbc.cbcmodel:JavaVariables>
    <variables name="int i"/>
    <variables name="int[] tmp"/>
    <fields href="file:/C:/Important/Work/Projektarbeit/CorC/CaseStudies/IntegerList/features/Base/IntList/IntList.cbcclass#//@fields.0"/>
    <fields href="file:/C:/Important/Work/Projektarbeit/CorC/CaseStudies/IntegerList/features/Base/IntList/IntList.cbcclass#//@fields.1"/>
    <params type="int" name="newTop"/>
  </de.tu-bs.cs.isf.cbc.cbcmodel:JavaVariables>
  <de.tu-bs.cs.isf.cbc.cbcmodel:CbCFormula name="push" comment="" className="IntList">
    <statement name="statement" id="f3177ece-2cb4-405b-b2b0-46355121cfb4">
      <refinement xsi:type="de.tu-bs.cs.isf.cbc.cbcmodel:CompositionStatement" id="542bc894-1648-4ca8-a07b-c1050b6015dc">
        <firstStatement name="statement1" id="a1948a1f-bf69-41a7-97b9-ea21407bb819">
          <refinement name="tmp = new int[data.length+1];&#xA;" id="e5b11a56-1e79-4b37-8c95-013c2b58e00d">
            <postCondition name="tmp.length = data.length + 1"/>
            <preCondition name="true"/>
          </refinement>
          <postCondition name="tmp.length = data.length + 1"/>
          <preCondition name="true"/>
        </firstStatement>
        <secondStatement name="statement2" id="191b5ecc-0587-426c-a72a-916b44ac19ac">
          <refinement xsi:type="de.tu-bs.cs.isf.cbc.cbcmodel:CompositionStatement" id="af58f11a-38b3-48a8-8a6d-0869705a69e6">
            <firstStatement name="statement1" id="99b4283e-d123-4463-a7f9-851294e6262d">
              <refinement name="tmp[tmp.length-1] = newTop;&#xA;" proven="true" id="ffb0a34d-e331-492f-a384-950155ecf729">
                <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop"/>
                <preCondition name="tmp.length = data.length + 1"/>
              </refinement>
              <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop"/>
              <preCondition name="tmp.length = data.length + 1"/>
            </firstStatement>
            <secondStatement name="statement2" id="c9b59d3d-46f2-40a8-9389-883dd265c57f">
              <refinement xsi:type="de.tu-bs.cs.isf.cbc.cbcmodel:CompositionStatement" id="8015cfad-c11c-49b0-af32-0bda6766ebef">
                <firstStatement name="statement1" id="e4fd6bb5-e5e1-4bd6-b513-5095dfcf6ad2">
                  <refinement xsi:type="de.tu-bs.cs.isf.cbc.cbcmodel:CompositionStatement" id="e2d69d4a-ac20-4738-8737-969b7332fb54">
                    <firstStatement name="statement1" id="c4b90ae8-defd-4ea4-9e1a-22366f47144c">
                      <refinement name="i = 0;&#xA;" id="9d5ff107-aa74-4733-b17d-6265d96f9673">
                        <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                        <preCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop"/>
                      </refinement>
                      <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                      <preCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop"/>
                    </firstStatement>
                    <secondStatement name="statement2" id="0986ce6d-bf5d-48d7-90b4-0d693d757dc5">
                      <refinement xsi:type="de.tu-bs.cs.isf.cbc.cbcmodel:SmallRepetitionStatement" id="1d77e33e-2f52-40b0-97f7-ebde8cf3c71a">
                        <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int i;(0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                        <preCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                        <loopStatement name="statement1" id="41a5bece-c428-4e69-aa85-4f0ddce452d7">
                          <refinement name="i++;&#xA;" id="faa79e03-0594-4e8d-a750-d572163f1f0e">
                            <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                            <preCondition name="(tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))) &amp; (i &lt; data.length)"/>
                          </refinement>
                          <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                          <preCondition name="(tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))) &amp; (i &lt; data.length)"/>
                        </loopStatement>
                        <variant name="data.length - i"/>
                        <invariant name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                        <guard name="i &lt; data.length"/>
                      </refinement>
                      <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int i;(0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                      <preCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                    </secondStatement>
                    <intermediateCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j;(0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                  </refinement>
                  <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int i;(0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                  <preCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop"/>
                </firstStatement>
                <secondStatement name="statement2" id="f059e6ad-3c94-4d88-ad5c-85ebdb84dafd">
                  <refinement name="data = tmp;" proven="true" id="31d1437d-3fbf-4e64-b2f8-286213ac9dc4">
                    <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop)) &amp; (\forall int k;(0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
                    <preCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int i;(0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                  </refinement>
                  <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop)) &amp; (\forall int k;(0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
                  <preCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int i;(0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                </secondStatement>
                <intermediateCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int i;(0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
              </refinement>
              <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop)) &amp; (\forall int k;(0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
              <preCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop"/>
            </secondStatement>
            <intermediateCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop"/>
          </refinement>
          <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop)) &amp; (\forall int k;(0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
          <preCondition name="tmp.length = data.length + 1"/>
        </secondStatement>
        <intermediateCondition name="tmp.length = data.length + 1"/>
      </refinement>
      <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop)) &amp; (\forall int k;(0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
      <preCondition name="true"/>
    </statement>
    <preCondition name="true"/>
    <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = newTop)) &amp; (\forall int k;(0 &lt;= k &amp; k &lt; \old(data).length -> (\exists int z;(0 &lt;= z &amp; z &lt; data.length &amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop"/>
    <methodObj href="file:/C:/Important/Work/Projektarbeit/CorC/CaseStudies/IntegerList/features/Base/IntList/IntList.cbcclass#//@methods.0"/>
  </de.tu-bs.cs.isf.cbc.cbcmodel:CbCFormula>
</xmi:XMI>
