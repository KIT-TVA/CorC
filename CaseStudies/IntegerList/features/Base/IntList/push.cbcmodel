<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="push" proven="true" comment="" className="IntList" methodName="push">
    <statement name="statement" id="43a79344-df6d-4960-9252-057d82f2680a">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="0190d707-73f9-4ee3-ba20-9b4522f1a434">
        <firstStatement name="statement1" id="9a48b75e-48f1-4d13-aa40-6964b9d85589">
          <refinement name="tmp = new int[data.length+1];" proven="true" id="0826c050-e371-4c81-8fb8-1f1c5831d972">
            <postCondition name="tmp.length = data.length + 1">
              <modifiables>tmp</modifiables>
            </postCondition>
            <preCondition name="true"/>
          </refinement>
          <postCondition name="tmp.length = data.length + 1">
            <modifiables>tmp</modifiables>
          </postCondition>
          <preCondition name="true"/>
        </firstStatement>
        <secondStatement name="statement2" id="ad420d14-8764-4f66-9230-50008815b16c">
          <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="2b4f6afc-849f-4297-a2e3-b7e1fd11e64f">
            <firstStatement name="statement1" id="16fecf46-2d4e-41e8-8944-c224d3303225">
              <refinement name="tmp[tmp.length-1] = newTop;" proven="true" id="33a60aab-967a-44b1-885d-56ec414d16e3">
                <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop">
                  <modifiables>tmp</modifiables>
                  <modifiables>tmp[tmp.length-1]</modifiables>
                </postCondition>
                <preCondition name="tmp.length = data.length + 1">
                  <modifiables>tmp</modifiables>
                </preCondition>
              </refinement>
              <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop">
                <modifiables>tmp</modifiables>
                <modifiables>tmp[tmp.length-1]</modifiables>
              </postCondition>
              <preCondition name="tmp.length = data.length + 1">
                <modifiables>tmp</modifiables>
              </preCondition>
            </firstStatement>
            <secondStatement name="statement2" id="ef260f1b-a368-4923-90e9-04850ecd1c68">
              <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="b91cb8ec-a591-496e-8c3c-170bedd212c2">
                <firstStatement name="statement1" id="aba79a90-61b6-4610-9b5d-042b4cd1f4a1">
                  <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="40af7936-82ca-4b46-a507-9c9cb9e9d8f1">
                    <firstStatement name="statement1" id="4a395a1e-8b9e-44bf-af00-c21a9126331d">
                      <refinement name="i = 0;" proven="true" id="c768c94b-77ca-4751-96c8-4c8fe45da753">
                        <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0">
                          <modifiables>i</modifiables>
                          <modifiables>tmp</modifiables>
                          <modifiables>tmp[tmp.length-1]</modifiables>
                        </postCondition>
                        <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop">
                          <modifiables>tmp</modifiables>
                          <modifiables>tmp[tmp.length-1]</modifiables>
                        </preCondition>
                      </refinement>
                      <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0">
                        <modifiables>i</modifiables>
                        <modifiables>tmp</modifiables>
                        <modifiables>tmp[tmp.length-1]</modifiables>
                      </postCondition>
                      <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop">
                        <modifiables>tmp</modifiables>
                        <modifiables>tmp[tmp.length-1]</modifiables>
                      </preCondition>
                    </firstStatement>
                    <secondStatement name="statement2" id="846e9a4f-805d-4eb1-b5c5-39b923d823e4">
                      <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" id="5d75796e-4840-4e31-b966-1613d7561f2d" variantProven="true" preProven="true" postProven="true">
                        <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))">
                          <modifiables>i</modifiables>
                          <modifiables>tmp</modifiables>
                          <modifiables>tmp[i]</modifiables>
                          <modifiables>tmp[tmp.length-1]</modifiables>
                        </postCondition>
                        <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0">
                          <modifiables>i</modifiables>
                          <modifiables>tmp</modifiables>
                          <modifiables>tmp[tmp.length-1]</modifiables>
                        </preCondition>
                        <loopStatement name="loop" id="d35fbec7-9927-42fe-bbf9-779f49d3239d">
                          <refinement name="tmp[i] = data[i];&#xD;&#xA;i++;" proven="true" id="cd734c9c-4fe8-4331-9e52-79fc54e7adb1">
                            <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))">
                              <modifiables>i</modifiables>
                              <modifiables>tmp</modifiables>
                              <modifiables>tmp[i]</modifiables>
                              <modifiables>tmp[tmp.length-1]</modifiables>
                            </postCondition>
                            <preCondition name="(tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))) &amp; (i &lt; data.length)">
                              <modifiables>i</modifiables>
                              <modifiables>tmp</modifiables>
                              <modifiables>tmp[tmp.length-1]</modifiables>
                            </preCondition>
                          </refinement>
                          <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))">
                            <modifiables>i</modifiables>
                            <modifiables>tmp</modifiables>
                            <modifiables>tmp[i]</modifiables>
                            <modifiables>tmp[tmp.length-1]</modifiables>
                          </postCondition>
                          <preCondition name="(tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))) &amp; (i &lt; data.length)">
                            <modifiables>i</modifiables>
                            <modifiables>tmp</modifiables>
                            <modifiables>tmp[tmp.length-1]</modifiables>
                          </preCondition>
                        </loopStatement>
                        <variant name="data.length - i"/>
                        <invariant name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                        <guard name="i &lt; data.length"/>
                      </refinement>
                      <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))">
                        <modifiables>i</modifiables>
                        <modifiables>tmp</modifiables>
                        <modifiables>tmp[i]</modifiables>
                        <modifiables>tmp[tmp.length-1]</modifiables>
                      </postCondition>
                      <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0">
                        <modifiables>i</modifiables>
                        <modifiables>tmp</modifiables>
                        <modifiables>tmp[tmp.length-1]</modifiables>
                      </preCondition>
                    </secondStatement>
                    <intermediateCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0">
                      <modifiables>i</modifiables>
                      <modifiables>tmp</modifiables>
                      <modifiables>tmp[tmp.length-1]</modifiables>
                    </intermediateCondition>
                  </refinement>
                  <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))">
                    <modifiables>i</modifiables>
                    <modifiables>tmp</modifiables>
                    <modifiables>tmp[i]</modifiables>
                    <modifiables>tmp[tmp.length-1]</modifiables>
                  </postCondition>
                  <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop">
                    <modifiables>tmp</modifiables>
                    <modifiables>tmp[tmp.length-1]</modifiables>
                  </preCondition>
                </firstStatement>
                <secondStatement name="statement2" id="b3644205-eafd-4591-8699-316468d6c99d">
                  <refinement name="data = tmp;" proven="true" id="0380f313-c880-4e78-893d-5ffc4abdf40f">
                    <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop">
                      <modifiables>data[*]</modifiables>
                      <modifiables>i</modifiables>
                      <modifiables>tmp</modifiables>
                      <modifiables>tmp[i]</modifiables>
                      <modifiables>tmp[tmp.length-1]</modifiables>
                    </postCondition>
                    <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))">
                      <modifiables>i</modifiables>
                      <modifiables>tmp</modifiables>
                      <modifiables>tmp[i]</modifiables>
                      <modifiables>tmp[tmp.length-1]</modifiables>
                    </preCondition>
                  </refinement>
                  <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop">
                    <modifiables>data[*]</modifiables>
                    <modifiables>i</modifiables>
                    <modifiables>tmp</modifiables>
                    <modifiables>tmp[i]</modifiables>
                    <modifiables>tmp[tmp.length-1]</modifiables>
                  </postCondition>
                  <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))">
                    <modifiables>i</modifiables>
                    <modifiables>tmp</modifiables>
                    <modifiables>tmp[i]</modifiables>
                    <modifiables>tmp[tmp.length-1]</modifiables>
                  </preCondition>
                </secondStatement>
                <intermediateCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))">
                  <modifiables>i</modifiables>
                  <modifiables>tmp</modifiables>
                  <modifiables>tmp[i]</modifiables>
                  <modifiables>tmp[tmp.length-1]</modifiables>
                </intermediateCondition>
              </refinement>
              <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop">
                <modifiables>data[*]</modifiables>
                <modifiables>i</modifiables>
                <modifiables>tmp</modifiables>
                <modifiables>tmp[i]</modifiables>
                <modifiables>tmp[tmp.length-1]</modifiables>
              </postCondition>
              <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop">
                <modifiables>tmp</modifiables>
                <modifiables>tmp[tmp.length-1]</modifiables>
              </preCondition>
            </secondStatement>
            <intermediateCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop">
              <modifiables>tmp</modifiables>
              <modifiables>tmp[tmp.length-1]</modifiables>
            </intermediateCondition>
          </refinement>
          <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop">
            <modifiables>data[*]</modifiables>
            <modifiables>i</modifiables>
            <modifiables>tmp</modifiables>
            <modifiables>tmp[i]</modifiables>
            <modifiables>tmp[tmp.length-1]</modifiables>
          </postCondition>
          <preCondition name="tmp.length = data.length + 1">
            <modifiables>tmp</modifiables>
          </preCondition>
        </secondStatement>
        <intermediateCondition name="tmp.length = data.length + 1">
          <modifiables>tmp</modifiables>
        </intermediateCondition>
      </refinement>
      <postCondition name="(\exists int z;(0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = newTop))&#xD;&#xA;&amp; (\forall int k; (0 &lt;= k &amp; k &lt; \old(data).length&#xD;&#xA;-> (\exists int z; (0 &lt;= z &amp; z &lt; data.length&#xD;&#xA;&amp; data[z] = \old(data)[k])))) &amp; data[data.length - 1] = newTop">
        <modifiables>data[*]</modifiables>
        <modifiables>i</modifiables>
        <modifiables>tmp</modifiables>
        <modifiables>tmp[i]</modifiables>
        <modifiables>tmp[tmp.length-1]</modifiables>
      </postCondition>
      <preCondition name="true"/>
    </statement>
    <preCondition name="pre"/>
    <postCondition name="post"/>
    <methodObj href="IntList.cbcclass#//@methods.0"/>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int i"/>
    <variables name="int[] tmp"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="data != null"/>
    <conditions name="data.length >= 0"/>
    <conditions name="i >= 0"/>
    <conditions name="\old(data) = data"/>
    <conditions name="tmp != null"/>
  </cbcmodel:GlobalConditions>
</xmi:XMI>
