\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "optimisedSelectRules" : "optimisedSelectRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 2147483647,
        "Timeout" : -1,
        "options" : { 
            "ABSTRACT_PROOF_FIRST_ORDER_GOALS_FORBIDDEN" : "true",
            "ABSTRACT_PROOF_FORBIDDEN_RULES" : "",
            "ABSTRACT_PROOF_FORBIDDEN_RULE_SETS" : "",
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_EXPAND",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_NONCLOSE",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "C:/Important/Work/CorC/IntegerList";
\include "helper.key";
\programVariables {
int tmp;
int j;
int i;
int variant;
int[] data1_oldVal;
IntList self;
Heap heapAtPre;
}
\problem {
     \forall int k;
       (   leq(Z(0(#)), k) & lt(k, i)
        -> \forall int m;
             (     lt(k, m)
                 & lt(m,
                      length(int[]::select(heap,
                                           self,
                                           IntList::$data)))
              -> geq(int::select(heap,
                                 int[]::select(heap,
                                               self,
                                               IntList::$data),
                                 arr(k)),
                     int::select(heap,
                                 int[]::select(heap,
                                               self,
                                               IntList::$data),
                                 arr(m)))))
   & \forall int h;
       (     lt(j, h)
           & lt(h,
                length(int[]::select(heap,
                                     self,
                                     IntList::$data)))
        -> geq(int::select(heap,
                           int[]::select(heap,
                                         self,
                                         IntList::$data),
                           arr(add(j, Z(1(#))))),
               int::select(heap,
                           int[]::select(heap,
                                         self,
                                         IntList::$data),
                           arr(h))))
   & geq(j, i)
   & !int[]::select(heap, self, IntList::$data) = null
   & geq(i, Z(0(#)))
   & leq(i,
         length(int[]::select(heap,
                              self,
                              IntList::$data)))
   & leq(j,
         sub(length(int[]::select(heap,
                                  self,
                                  IntList::$data)),
             Z(2(#))))
   & geq(j, sub(i, Z(1(#))))
   &   int[]::exactInstance(int[]::select(heap,
                                          self,
                                          IntList::$data))
     = TRUE
   &   boolean::select(heap,
                       int[]::select(heap,
                                     self,
                                     IntList::$data),
                       java.lang.Object::<created>)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & IntList::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || data1_oldVal:=int[]::select(heap,
                                   self,
                                   IntList::$data)
    || variant:=add(j, Z(1(#)))}
     \<{
       if (self.data[j] < self.data[j + 1]) {
         tmp = self.data[j];
         self.data[j] = self.data[j + 1];
         self.data[j + 1] = tmp;
       } else if (self.data[j] >= self.data[j + 1]) {
         ;
       }
       j--;
     }\> (  lt(add(j, Z(1(#))), variant)
          & geq(add(j, Z(1(#))), Z(0(#))))
}

\proof {
(keyLog "0" (keyUser "Fynn" ) (keyVersion "1fb0c10630b493ce138850ae0f9803d3f2fffc51"))

(autoModeTime "1394")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "polySimp_elimSub" (formula "7") (term "1"))
(rule "mul_literals" (formula "7") (term "1,1"))
(rule "polySimp_elimSub" (formula "6") (term "1"))
(rule "mul_literals" (formula "6") (term "1,1"))
(rule "polySimp_addComm0" (formula "16") (term "0,0,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "0,1,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "0,0"))
(rule "polySimp_addComm0" (formula "2") (term "0,2,0,1,0"))
(rule "polySimp_addComm0" (formula "7") (term "1"))
(rule "polySimp_addComm0" (formula "6") (term "1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "16") (term "0,0,0,1"))
(rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,1"))
(rule "add_literals" (formula "16") (term "0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
(rule "inEqSimp_commuteGeq" (formula "1") (term "1,0,1,0"))
(rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
(rule "inEqSimp_homoInEq0" (formula "6"))
(rule "polySimp_addComm1" (formula "6") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,1"))
(rule "mul_literals" (formula "16") (term "1,1,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1"))
(rule "polySimp_rightDist" (formula "6") (term "1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
(rule "mul_literals" (formula "6") (term "0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1"))
(rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "3"))
(rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0"))
(rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
(rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
(rule "add_literals" (formula "7") (term "1,1,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0"))
(rule "qeq_literals" (formula "7") (term "0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "true_left" (formula "7"))
(rule "nnf_imp2or" (formula "2") (term "0"))
(rule "nnf_imp2or" (formula "1") (term "0"))
(rule "nnf_notAnd" (formula "2") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,0"))
(rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
(rule "add_zero_left" (formula "2") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
(rule "nnf_imp2or" (formula "1") (term "0,1,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0,0,1,0"))
(rule "add_zero_left" (formula "1") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,0,0,0,1,0"))
(rule "commute_or" (formula "1") (term "0,0,1,0"))
(rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=b"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "b"))
(rule "compound_less_than_comparison_2" (formula "15") (term "1") (inst "#v1=i_2") (inst "#v0=i_1"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "i_1"))
(rule "eval_order_array_access4" (formula "15") (term "1") (inst "#v0=i_arr"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "i_arr"))
(rule "assignment_read_attribute" (formula "15"))
(branch "Normal Execution (self != null)"
    (builtin "One Step Simplification" (formula "15"))
   (rule "assignment_array2" (formula "15"))
   (branch "Normal Execution (i_arr != null)"
       (builtin "One Step Simplification" (formula "15"))
      (rule "variableDeclarationAssign" (formula "15") (term "1"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "i_2"))
      (rule "eval_order_array_access4" (formula "15") (term "1") (inst "#v0=i_arr_1"))
      (rule "variableDeclarationAssign" (formula "15") (term "1"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "i_arr_1"))
      (rule "assignment_read_attribute" (formula "15"))
      (branch "Normal Execution (self != null)"
          (builtin "One Step Simplification" (formula "15"))
         (rule "eval_order_array_access5" (formula "15") (term "1") (inst "#v1=i_3") (inst "#ar1=i_arr_2"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "i_arr_2"))
         (rule "assignment" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "i_3"))
         (rule "assignmentAdditionInt" (formula "15") (term "1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaAddInt" (formula "15") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "15") (term "0,1,0"))
         (rule "assignment_array2" (formula "15"))
         (branch "Normal Execution (i_arr_2 != null)"
             (builtin "One Step Simplification" (formula "15"))
            (rule "less_than_comparison_simple" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
            (rule "all_pull_out3" (formula "1") (term "0"))
            (rule "shift_paren_or" (formula "1") (term "0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0"))
            (rule "arrayLengthNotNegative" (formula "5") (term "0"))
            (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "ifElseSplit" (formula "16"))
            (branch "if b true"
                (builtin "One Step Simplification" (formula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "eval_order_array_access4" (formula "17") (term "1") (inst "#v0=i_arr_3"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_3"))
               (rule "assignment_read_attribute" (formula "17"))
               (branch "Normal Execution (self != null)"
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "assignment_array2" (formula "17"))
                  (branch "Normal Execution (i_arr_3 != null)"
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "eval_order_array_access1" (formula "17") (term "1") (inst "#v0=i_arr_4"))
                     (rule "variableDeclarationAssign" (formula "17") (term "1"))
                     (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_4"))
                     (rule "assignment_read_attribute" (formula "17"))
                     (branch "Normal Execution (self != null)"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "eval_order_array_access3" (formula "17") (term "1") (inst "#v1=i_5") (inst "#v2=i_4") (inst "#v0=i_arr_5"))
                        (rule "variableDeclarationAssign" (formula "17") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_5"))
                        (rule "assignment" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "variableDeclarationAssign" (formula "17") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_4"))
                        (rule "assignment" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "variableDeclarationAssign" (formula "17") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_5"))
                        (rule "eval_order_array_access4" (formula "17") (term "1") (inst "#v0=i_arr_6"))
                        (rule "variableDeclarationAssign" (formula "17") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_6"))
                        (rule "assignment_read_attribute" (formula "17"))
                        (branch "Normal Execution (self != null)"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "eval_order_array_access5" (formula "17") (term "1") (inst "#v1=i_6") (inst "#ar1=i_arr_7"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_7"))
                           (rule "assignment" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_6"))
                           (rule "assignmentAdditionInt" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "translateJavaAddInt" (formula "17") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                           (rule "assignment_array2" (formula "17"))
                           (branch "Normal Execution (i_arr_7 != null)"
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "assignment_to_primitive_array_component" (formula "17"))
                              (branch "Normal Execution (i_arr_5 != null)"
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "eval_order_array_access1" (formula "17") (term "1") (inst "#v0=i_arr_8"))
                                 (rule "variableDeclarationAssign" (formula "17") (term "1"))
                                 (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_8"))
                                 (rule "assignment_read_attribute" (formula "17"))
                                 (branch "Normal Execution (self != null)"
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "dismissNonSelectedField" (formula "17") (term "0,1,0"))
                                    (rule "eval_order_array_access2" (formula "17") (term "1") (inst "#v0=i_7") (inst "#ar1=i_arr_9"))
                                    (rule "variableDeclarationAssign" (formula "17") (term "1"))
                                    (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_9"))
                                    (rule "assignment" (formula "17") (term "1"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "variableDeclarationAssign" (formula "17") (term "1"))
                                    (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_7"))
                                    (rule "assignmentAdditionInt" (formula "17") (term "1"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "translateJavaAddInt" (formula "17") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                                    (rule "assignment_to_primitive_array_component" (formula "17"))
                                    (branch "Normal Execution (i_arr_9 != null)"
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "blockEmpty" (formula "17") (term "1"))
                                       (rule "postdecrement" (formula "17") (term "1"))
                                       (rule "compound_subtraction_1" (formula "17") (term "1") (inst "#v=i_8"))
                                       (rule "variableDeclarationAssign" (formula "17") (term "1"))
                                       (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_8"))
                                       (rule "widening_identity_cast_5" (formula "17") (term "1"))
                                       (rule "assignment" (formula "17") (term "1"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "assignmentSubtractionInt" (formula "17") (term "1"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "translateJavaSubInt" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                                       (rule "emptyModality" (formula "17") (term "1"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "1,0"))
                                       (rule "add_literals" (formula "17") (term "0,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "17") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,1"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,1"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,1"))
                                       (rule "add_literals" (formula "17") (term "0,0,1"))
                                       (rule "add_zero_left" (formula "17") (term "0,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "17") (term "0"))
                                       (rule "polySimp_pullOutFactor1" (formula "17") (term "0,0"))
                                       (rule "add_literals" (formula "17") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "17") (term "0,0"))
                                       (rule "leq_literals" (formula "17") (term "0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_leqRight" (formula "17"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                    (branch "Null Reference (i_arr_9 = null)"
                                       (rule "false_right" (formula "18"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Index Out of Bounds (i_arr_9 != null, but i_7 Out of Bounds!)"
                                        (builtin "One Step Simplification" (formula "18"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                                       (rule "false_right" (formula "18"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                       (rule "add_literals" (formula "1") (term "0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                       (rule "leq_literals" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                                 (branch "Null Reference (self = null)"
                                     (builtin "One Step Simplification" (formula "18"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Null Reference (i_arr_5 = null)"
                                 (rule "false_right" (formula "18"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "Index Out of Bounds (i_arr_5 != null, but i_4 Out of Bounds!)"
                                  (builtin "One Step Simplification" (formula "18"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                                 (rule "false_right" (formula "18"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0"))
                                 (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "7") (term "0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "closeFalse" (formula "7"))
                              )
                           )
                           (branch "Null Reference (i_arr_7 = null)"
                              (rule "false_right" (formula "18"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (i_arr_7 != null, but i_6 Out of Bounds!)"
                               (builtin "One Step Simplification" (formula "18"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                              (rule "false_right" (formula "18"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                              (rule "add_literals" (formula "1") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "leq_literals" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "5") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "7") (term "0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                        )
                        (branch "Null Reference (self = null)"
                            (builtin "One Step Simplification" (formula "18"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Null Reference (self = null)"
                         (builtin "One Step Simplification" (formula "18"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Null Reference (i_arr_3 = null)"
                     (rule "false_right" (formula "18"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (i_arr_3 != null, but j Out of Bounds!)"
                      (builtin "One Step Simplification" (formula "18"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "false_right" (formula "18"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "5") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "closeFalse" (formula "5"))
                  )
               )
               (branch "Null Reference (self = null)"
                   (builtin "One Step Simplification" (formula "18"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "if b false"
                (builtin "One Step Simplification" (formula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_geqRight" (formula "14"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=b_1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "b_1"))
               (rule "compound_greater_equal_than_comparison_2" (formula "17") (term "1") (inst "#v1=i_5") (inst "#v0=i_4"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_4"))
               (rule "eval_order_array_access4" (formula "17") (term "1") (inst "#v0=i_arr_3"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_3"))
               (rule "assignment_read_attribute" (formula "17"))
               (branch "Normal Execution (self != null)"
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "assignment_array2" (formula "17"))
                  (branch "Normal Execution (i_arr_3 != null)"
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "variableDeclarationAssign" (formula "17") (term "1"))
                     (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_5"))
                     (rule "eval_order_array_access4" (formula "17") (term "1") (inst "#v0=i_arr_4"))
                     (rule "variableDeclarationAssign" (formula "17") (term "1"))
                     (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_4"))
                     (rule "assignment_read_attribute" (formula "17"))
                     (branch "Normal Execution (self != null)"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "eval_order_array_access5" (formula "17") (term "1") (inst "#v1=i_6") (inst "#ar1=i_arr_5"))
                        (rule "variableDeclarationAssign" (formula "17") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_arr_5"))
                        (rule "assignment" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "variableDeclarationAssign" (formula "17") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_6"))
                        (rule "assignmentAdditionInt" (formula "17") (term "1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "translateJavaAddInt" (formula "17") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                        (rule "assignment_array2" (formula "17"))
                        (branch "Normal Execution (i_arr_5 != null)"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "greater_equal_than_comparison_simple" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_commuteGeq" (formula "17") (term "0,0,1,0"))
                           (rule "replace_known_left" (formula "17") (term "0,0,1,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,0") (ifseqformula "14"))
                           (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")))
                           (rule "true_left" (formula "9"))
                           (rule "ifSplit" (formula "17"))
                           (branch "if b_1 true"
                               (builtin "One Step Simplification" (formula "18"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "emptyStatement" (formula "17") (term "1"))
                              (rule "blockEmpty" (formula "17") (term "1"))
                              (rule "postdecrement" (formula "17") (term "1"))
                              (rule "compound_subtraction_1" (formula "17") (term "1") (inst "#v=i_7"))
                              (rule "variableDeclarationAssign" (formula "17") (term "1"))
                              (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_7"))
                              (rule "widening_identity_cast_5" (formula "17") (term "1"))
                              (rule "assignment" (formula "17") (term "1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "assignmentSubtractionInt" (formula "17") (term "1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "translateJavaSubInt" (formula "17") (term "0,1,0"))
                              (rule "polySimp_elimSub" (formula "17") (term "0,1,0"))
                              (rule "mul_literals" (formula "17") (term "1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                              (rule "emptyModality" (formula "17") (term "1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "polySimp_addAssoc" (formula "17") (term "1,0"))
                              (rule "add_literals" (formula "17") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq1" (formula "17") (term "1"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,1"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,1"))
                              (rule "add_literals" (formula "17") (term "0,0,1"))
                              (rule "add_zero_left" (formula "17") (term "0,1"))
                              (rule "inEqSimp_homoInEq1" (formula "17") (term "0"))
                              (rule "polySimp_pullOutFactor1" (formula "17") (term "0,0"))
                              (rule "add_literals" (formula "17") (term "1,0,0"))
                              (rule "times_zero_1" (formula "17") (term "0,0"))
                              (rule "leq_literals" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "inEqSimp_leqRight" (formula "17"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "5") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "7") (term "0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                           (branch "if b_1 false"
                               (builtin "One Step Simplification" (formula "18"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Null Reference (i_arr_5 = null)"
                           (rule "false_right" (formula "18"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Index Out of Bounds (i_arr_5 != null, but i_6 Out of Bounds!)"
                            (builtin "One Step Simplification" (formula "18"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                           (rule "false_right" (formula "18"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                           (rule "add_literals" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "leq_literals" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "5") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "5") (term "0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                     (branch "Null Reference (self = null)"
                        (rule "false_right" (formula "18"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Null Reference (i_arr_3 = null)"
                     (rule "false_right" (formula "18"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (i_arr_3 != null, but j Out of Bounds!)"
                      (builtin "One Step Simplification" (formula "18"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "false_right" (formula "18"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "5") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "closeFalse" (formula "5"))
                  )
               )
               (branch "Null Reference (self = null)"
                   (builtin "One Step Simplification" (formula "18"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Null Reference (i_arr_2 = null)"
            (rule "false_right" (formula "16"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Index Out of Bounds (i_arr_2 != null, but i_3 Out of Bounds!)"
             (builtin "One Step Simplification" (formula "16"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "false_right" (formula "16"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
            (rule "add_literals" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
            (rule "polySimp_addComm0" (formula "4") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "6"))
            (rule "qeq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
      (branch "Null Reference (self = null)"
          (builtin "One Step Simplification" (formula "16"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (i_arr = null)"
      (rule "false_right" (formula "16"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (i_arr != null, but j Out of Bounds!)"
      (rule "false_right" (formula "16"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
      (rule "polySimp_addComm0" (formula "4") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "6"))
      (rule "qeq_literals" (formula "4") (term "0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
(branch "Null Reference (self = null)"
   (rule "false_right" (formula "16"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
   (rule "closeFalse" (formula "1"))
)
)
}
