\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Sep 26 14:49:57 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_corc2.0/runtime-EclipseApplication/IntegerListOO";\include "helper.key";\programVariables {int newTop; int newTop_old; int[] data1_oldVal; IntList self; Heap heapAtPre;}\problem {
     true
   & !int[]::select(heap, self, IntList::$data) = null
   & geq(length(int[]::select(heap,
                              self,
                              IntList::$data)),
         Z(0(#)))
   &   data1_oldVal
     = int[]::select(heap, self, IntList::$data)
   &   int[]::exactInstance(int[]::select(heap,
                                          self,
                                          IntList::$data))
     = TRUE
   &   boolean::select(heap,
                       int[]::select(heap,
                                     self,
                                     IntList::$data),
                       java.lang.Object::<created>)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   &   boolean::select(heap,
                       data1_oldVal,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & IntList::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || newTop_old:=newTop
    || data1_oldVal:=int[]::select(heap,
                                   self,
                                   IntList::$data)}
     \<{
         self.pushBase(newTop);
       }\> (  \exists int z;
                (  leq(Z(0(#)), z)
                 & lt(z,
                      length(int[]::select(heap,
                                           self,
                                           IntList::$data)))
                 &   int::select(heap,
                                 int[]::select(heap,
                                               self,
                                               IntList::$data),
                                 arr(z))
                   = newTop)
            & \forall int k;
                (     leq(Z(0(#)), k)
                    & lt(k, length(data1_oldVal))
                 -> \exists int z;
                      (  leq(Z(0(#)), z)
                       & lt(z,
                            length(int[]::select(heap,
                                                 self,
                                                 IntList::$data)))
                       &   int::select(heap,
                                       int[]::select(heap,
                                                     self,
                                                     IntList::$data),
                                       arr(z))
                         = int::select(heap,
                                       data1_oldVal,
                                       arr(k))))
            &   int::select(heap,
                            int[]::select(heap,
                                          self,
                                          IntList::$data),
                            arr(sub(length(int[]::select(heap,
                                                         self,
                                                         IntList::$data)),
                                    Z(1(#)))))
              = newTop
            & newTop = newTop_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "558")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "eqSymm" (formula "12") (term "1,0,1"))
(rule "eqSymm" (formula "2"))
(rule "polySimp_elimSub" (formula "12") (term "0,2,0,1,0,0,1"))
(rule "mul_literals" (formula "12") (term "1,0,2,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "12") (term "0,2,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,0,0,1"))
(rule "applyEq" (formula "4") (term "1,0") (ifseqformula "2"))
(rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
(rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
(rule "applyEq" (formula "9") (term "0") (ifseqformula "2"))
(rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "2"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "11") (term "0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,0,0,1"))
(builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_pushBase,exc,heapAfter_pushBase,anon_heap_pushBase") (contract "IntList[IntList::pushBase(int)].JML normal_behavior operation contract.0"))
(branch "Post (pushBase)"
   (builtin "One Step Simplification" (formula "10"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "translateJavaSubInt" (formula "10") (term "0,2,0,1,0,1,1"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "exLeft" (formula "12") (inst "sk=z_0"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "polySimp_elimSub" (formula "16") (term "0,2,0"))
   (rule "mul_literals" (formula "16") (term "1,0,2,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,2,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "13"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "13") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "applyEq" (formula "15") (term "0,0,1,0,0,1,0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "15") (term "1,1,1,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "2"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0"))
   (rule "polySimp_elimOne" (formula "13") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "16") (term "1,0") (inst "selectSK=IntList_data_0"))
   (rule "applyEq" (formula "17") (term "0,1,0,2,0") (ifseqformula "16"))
   (rule "applyEq" (formula "15") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
   (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "16"))
   (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "16"))
   (rule "applyEq" (formula "15") (term "1,0,1,0,1,0") (ifseqformula "16"))
   (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "10"))
   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")) (ifInst ""  (formula "5")))
   (rule "sortsDisjointModuloNull" (formula "16") (term "0,0"))
   (rule "replace_known_right" (formula "16") (term "1,0,0") (ifseqformula "18"))
   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")))
   (rule "applyEqReverse" (formula "15") (term "0,1,1,1,0,0,1,0") (ifseqformula "16"))
   (rule "applyEqReverse" (formula "14") (term "1,0") (ifseqformula "16"))
   (rule "applyEqReverse" (formula "15") (term "1,0,1,0,1,0") (ifseqformula "16"))
   (rule "applyEqReverse" (formula "17") (term "1,0") (ifseqformula "16"))
   (rule "applyEqReverse" (formula "17") (term "0,1,0,2,0") (ifseqformula "16"))
   (rule "applyEqReverse" (formula "13") (term "0,0") (ifseqformula "16"))
   (rule "hideAuxiliaryEq" (formula "16"))
   (rule "applyEq" (formula "16") (term "0,1,0,2,0") (ifseqformula "2"))
   (rule "applyEq" (formula "15") (term "1,0,1,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "15") (term "0,1,1,1,0,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "2"))
   (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "10"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "14"))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=arr_1"))
   (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "10"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "16"))
   (rule "hideAuxiliaryEq" (formula "16"))
   (rule "nnf_imp2or" (formula "15") (term "0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
   (rule "emptyModality" (formula "19") (term "1"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "replaceKnownSelect_taclet0_0" (formula "19") (term "1,0,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "19") (term "1,0,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "19") (term "0,1,0,2,0,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "19") (term "1,0,1,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "19") (term "0,1,0,2,0,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "19") (term "1,0,1,0,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "19") (term "1,0,1,0,1,0,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "19") (term "0,1,1,1,0,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "19") (term "1,0,1,0,1,0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "19") (term "0,1,1,1,0,0,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "19") (term "0,1,1,1,0,0,1,0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "19") (term "0,1,1,1,0,0,1,0,1,0"))
   (rule "applyEq" (formula "19") (term "0,1,0,2,0,1") (ifseqformula "2"))
   (rule "applyEq" (formula "19") (term "1,0,1,0,0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "19") (term "1,0,1,0,1,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "2"))
   (rule "replaceKnownSelect_taclet0_4" (formula "19") (term "0,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "19") (term "0,1"))
   (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "16"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "applyEq" (formula "19") (term "0,1,1,1,0,0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "19") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "2"))
   (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "15"))
   (builtin "One Step Simplification" (formula "19"))
   (rule "nnf_ex2all" (formula "19"))
   (rule "nnf_notAnd" (formula "1") (term "0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "ex_pull_out3" (formula "16") (term "0"))
   (rule "cnf_rightDist" (formula "16") (term "0,0"))
   (rule "commute_or" (formula "16") (term "1,0,0"))
   (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
   (rule "commute_or" (formula "16") (term "1,0,0,0"))
   (rule "arrayLengthIsAnInt" (formula "2") (term "0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "arrayLengthNotNegative" (formula "2") (term "0"))
   (rule "commute_and_2" (formula "16") (term "0,0"))
   (rule "commute_and" (formula "16") (term "0,0,0"))
   (rule "allLeft" (formula "1") (inst "t=z_0"))
   (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "0,0,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "0,0,1"))
   (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "16"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "15"))
   (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
   (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "leq_literals" (formula "1") (term "0,1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Exceptional Post (pushBase)"
   (builtin "One Step Simplification" (formula "10"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "translateJavaSubInt" (formula "10") (term "0,2,0,1,0,1,1"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "11"))
   (rule "close" (formula "14") (ifseqformula "13"))
)
(branch "Pre (pushBase)"
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "8")))
   (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_geqRight" (formula "11"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Null reference (self = null)"
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")))
   (rule "closeTrue" (formula "11"))
)
)

}
