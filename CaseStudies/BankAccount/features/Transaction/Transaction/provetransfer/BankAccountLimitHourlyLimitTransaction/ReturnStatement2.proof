\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "optimisedSelectRules" : "optimisedSelectRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 2147483647,
        "Timeout" : -1,
        "options" : { 
            "ABSTRACT_PROOF_FIRST_ORDER_GOALS_FORBIDDEN" : "true",
            "ABSTRACT_PROOF_FORBIDDEN_RULES" : "",
            "ABSTRACT_PROOF_FORBIDDEN_RULE_SETS" : "",
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_EXPAND",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_NONCLOSE",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "C:/Important/Work/CorC/BankAccount";
\include "helper.key";
\programVariables {
int amount;
boolean ret;
int amount_old;
int balance2_oldVal;
int balance6_oldVal;
Account source5_oldVal;
Account destination4_oldVal;
Transaction self;
Heap heapAtPre;
}
\problem {
     (   ret = TRUE
      ->     int::select(heap,
                         Account::select(heap,
                                         self,
                                         Transaction::$source),
                         Account::$balance)
           = sub(balance2_oldVal, amount)
         & ret = FALSE
      ->   int::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$source),
                       Account::$balance)
         = balance2_oldVal)
   & ret = FALSE
   & java.lang.Object::<inv>(heap,
                             Account::select(heap,
                                             self,
                                             Transaction::$source))
   & java.lang.Object::<inv>(heap,
                             Account::select(heap,
                                             self,
                                             Transaction::$destination))
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$source))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$source),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$source)
      = null
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$destination))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$destination),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$destination)
      = null
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$source))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$source),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$source)
      = null
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$destination))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$destination),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$destination)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Transaction::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || amount_old:=amount
    || balance6_oldVal:=int::select(heap,
                                    Account::select(heap,
                                                    self,
                                                    Transaction::$destination),
                                    Account::$balance)
    || source5_oldVal:=Account::select(heap,
                                       self,
                                       Transaction::$source)
    || destination4_oldVal:=Account::select(heap,
                                            self,
                                            Transaction::$destination)}
     \<{
       ret = false;
     }\> (  transferPerformed(ret,
                              int::select(heap,
                                          Account::select(heap,
                                                          self,
                                                          Transaction::$destination),
                                          Account::$balance),
                              balance6_oldVal,
                              int::select(heap,
                                          Account::select(heap,
                                                          self,
                                                          Transaction::$source),
                                          Account::$balance),
                              balance2_oldVal,
                              amount)
          & amount = amount_old)
}

\proof {
(keyLog "0" (keyUser "Fynn" ) (keyVersion "1fb0c10630b493ce138850ae0f9803d3f2fffc51"))

(autoModeTime "119")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "16") (term "1,0,1"))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
(rule "true_left" (formula "1"))
(rule "transferPerformed" (formula "15") (term "0,0,1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "eqSymm" (formula "15") (term "0,0,1,1,0,0,1"))
(rule "eqSymm" (formula "15") (term "0,0,1,1,1,0,0,1"))
(rule "eqSymm" (formula "15") (term "0,0,1,0,0,1"))
(rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,1,1,0,0,1"))
(rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,0,0,1"))
(rule "assignment" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "emptyModality" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "closeTrue" (formula "15"))
)
}
