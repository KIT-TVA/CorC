\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "optimisedSelectRules" : "optimisedSelectRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 2147483647,
        "Timeout" : -1,
        "options" : { 
            "ABSTRACT_PROOF_FIRST_ORDER_GOALS_FORBIDDEN" : "true",
            "ABSTRACT_PROOF_FORBIDDEN_RULES" : "",
            "ABSTRACT_PROOF_FORBIDDEN_RULE_SETS" : "",
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_EXPAND",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_NONCLOSE",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "C:/Important/Work/CorC/BankAccount";
\include "helper.key";
\programVariables {
int amount;
boolean ret;
int amount_old;
int balance5_oldVal;
Account source4_oldVal;
Account destination3_oldVal;
Transaction self;
Heap heapAtPre;
}
\problem {
     ret = TRUE
   & java.lang.Object::<inv>(heap,
                             Account::select(heap,
                                             self,
                                             Transaction::$source))
   & java.lang.Object::<inv>(heap,
                             Account::select(heap,
                                             self,
                                             Transaction::$destination))
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$source))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$source),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$source)
      = null
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$destination))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$destination),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$destination)
      = null
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$source))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$source),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$source)
      = null
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$destination))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$destination),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$destination)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Transaction::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || amount_old:=amount
    || balance5_oldVal:=int::select(heap,
                                    Account::select(heap,
                                                    self,
                                                    Transaction::$destination),
                                    Account::$balance)
    || source4_oldVal:=Account::select(heap,
                                       self,
                                       Transaction::$source)
    || destination3_oldVal:=Account::select(heap,
                                            self,
                                            Transaction::$destination)}
     \<{
       ret = self.destination.update(amount);
     }\> (  (   ret = TRUE
             ->     int::select(heap,
                                Account::select(heap,
                                                self,
                                                Transaction::$destination),
                                Account::$balance)
                  = add(balance5_oldVal, amount)
                & ret = FALSE
             ->   int::select(heap,
                              Account::select(heap,
                                              self,
                                              Transaction::$destination),
                              Account::$balance)
                = balance5_oldVal)
          & amount = amount_old)
}

\proof {
(keyLog "0" (keyUser "Fynn" ) (keyVersion "1fb0c10630b493ce138850ae0f9803d3f2fffc51"))

(autoModeTime "360")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "15") (term "1,0,1"))
(rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,0,0,1"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "15") (term "1") (inst "#v0=a"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "a"))
(rule "assignment_read_attribute" (formula "15"))
(branch "Normal Execution (self != null)"
    (builtin "One Step Simplification" (formula "15"))
    (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_update,result_update,exc,heapAfter_update,anon_heap_update") (contract "Account[Account::update(int)].JML normal_behavior operation contract.0") (modality "diamond"))
   (branch "Post (update)"
       (builtin "One Step Simplification" (formula "13"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "polySimp_addComm0" (formula "16") (term "1,1"))
      (rule "assignment" (formula "24") (term "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "pullOutSelect" (formula "19") (term "1") (inst "selectSK=Account_OVERDRAFT_LIMIT_0"))
      (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
      (rule "elementOfUnion" (formula "19") (term "0,0"))
      (rule "elementOfSingleton" (formula "19") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "elementOfSingleton" (formula "19") (term "0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "applyEqReverse" (formula "20") (term "1") (ifseqformula "19"))
      (rule "hideAuxiliaryEq" (formula "19"))
      (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=Account_balance_0"))
      (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "19"))
      (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "19"))
      (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "15") (term "1"))
      (rule "polySimp_homoEq" (formula "16") (term "1"))
      (rule "polySimp_addComm1" (formula "16") (term "0,1"))
      (rule "polySimp_addComm0" (formula "16") (term "0,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "20"))
      (rule "polySimp_sepPosMonomial" (formula "16") (term "1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1"))
      (rule "polySimp_mulAssoc" (formula "16") (term "0,1,1"))
      (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,1,1"))
      (rule "polySimp_elimOne" (formula "16") (term "0,1,1"))
      (rule "elementOfUnion" (formula "19") (term "0,0"))
      (rule "elementOfSingleton" (formula "19") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "elementOfSingleton" (formula "19") (term "0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "applyEqReverse" (formula "15") (term "1,1") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "18"))
      (rule "applyEqReverse" (formula "15") (term "0,1,1") (ifseqformula "18"))
      (rule "hideAuxiliaryEq" (formula "18"))
      (rule "polySimp_homoEq" (formula "15") (term "1"))
      (rule "polySimp_addComm0" (formula "15") (term "0,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,1"))
      (rule "add_literals" (formula "15") (term "1,1,0,1"))
      (rule "times_zero_1" (formula "15") (term "1,0,1"))
      (rule "add_zero_right" (formula "15") (term "0,1"))
      (rule "inEqSimp_commuteLeq" (formula "18"))
      (rule "polySimp_invertEq" (formula "15") (term "1"))
      (rule "times_zero_2" (formula "15") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1"))
      (rule "pullOutSelect" (formula "17") (term "0,1") (inst "selectSK=Account_withdrawDaily_0"))
      (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "17"))
      (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "22")) (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "16") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "1"))
      (rule "elementOfUnion" (formula "17") (term "0,0"))
      (rule "elementOfSingleton" (formula "17") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "applyEqReverse" (formula "16") (term "1,1") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "18") (term "1,1") (ifseqformula "17"))
      (rule "hideAuxiliaryEq" (formula "17"))
      (rule "eqSymm" (formula "16") (term "1"))
      (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
      (rule "emptyModality" (formula "23") (term "1"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "impRight" (formula "23"))
      (rule "impRight" (formula "24"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "2"))
      (rule "close" (formula "22") (ifseqformula "2"))
   )
   (branch "Exceptional Post (update)"
       (builtin "One Step Simplification" (formula "13"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "14"))
      (rule "close" (formula "17") (ifseqformula "16"))
   )
   (branch "Pre (update)"
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "3")) (ifInst ""  (formula "11")) (ifInst ""  (formula "7")))
      (rule "closeTrue" (formula "15"))
   )
   (branch "Null reference (a = null)"
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
      (rule "closeTrue" (formula "15"))
   )
)
(branch "Null Reference (self = null)"
   (rule "false_right" (formula "16"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
   (rule "closeFalse" (formula "1"))
)
)
}
