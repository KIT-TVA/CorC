\predicates {
	limitExceeded(int, int, int, int);
	balanceChangedResult(boolean, int, int, int);
	withdrawChangedResult(boolean, int, int, int, int);
	withdrawChangedUndoResult(boolean, int, int, int, int);
}

\rules {
	limitExceeded{
		\schemaVar \term int withdrawDaily;
		\schemaVar \term int withdrawHourly;
		\schemaVar \term int limitD;
		\schemaVar \term int limitH;
		\find (limitExceeded(withdrawDaily, withdrawHourly, limitD, limitH))
		\replacewith (withdrawHourly >= limitH)
		\heuristics(simplify)
	};

	balanceChangedResult{
		\schemaVar \term boolean res;
		\schemaVar \term int newBalance;
		\schemaVar \term int oldBalance;
		\schemaVar \term int amount;
		\find (balanceChangedResult(res, newBalance, oldBalance, amount))
		\replacewith ((res = FALSE -> newBalance = oldBalance) & (res = TRUE -> newBalance = oldBalance + amount))
		\heuristics(simplify)
	};

	withdrawChangedResult{
		\schemaVar \term boolean res;
		\schemaVar \term int newWithdrawD;
		\schemaVar \term int oldWithdrawD;
		\schemaVar \term int newWithdrawH;
		\schemaVar \term int oldWithdrawH;
		\find (withdrawChangedResult(res, newWithdrawD, oldWithdrawD, newWithdrawH, oldWithdrawH))
		\replacewith ((res = FALSE -> (newWithdrawH = oldWithdrawH)) & (res = TRUE -> (newWithdrawH <= oldWithdrawH)))
		\heuristics(simplify)
	};

	withdrawChangedUndoResult{
		\schemaVar \term boolean res;
		\schemaVar \term int newWithdrawD;
		\schemaVar \term int oldWithdrawD;
		\schemaVar \term int newWithdrawH;
		\schemaVar \term int oldWithdrawH;
		\find (withdrawChangedUndoResult(res, newWithdrawD, oldWithdrawD, newWithdrawH, oldWithdrawH))
		\replacewith ((res = FALSE -> newWithdrawH = oldWithdrawH) &  (res = TRUE -> newWithdrawH >= oldWithdrawH))
		\heuristics(simplify)
	};

}