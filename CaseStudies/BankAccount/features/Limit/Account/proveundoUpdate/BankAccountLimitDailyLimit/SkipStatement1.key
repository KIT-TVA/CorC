\javaSource "C:/Important/Work/CorC/BankAccount";
\include "helper.key";
\programVariables {
int newWithdrawDaily;
int newWithdrawHourly;
int x;
boolean ret;
int newWithdrawDaily_old;
int newWithdrawHourly_old;
int x_old;
boolean ret_old;
int withdrawHourly4_oldVal;
int balance7_oldVal;
int withdrawDaily8_oldVal;
int HOURLY_LIMIT3_oldVal;
int DAILY_LIMIT2_oldVal;
int OVERDRAFT_LIMIT6_oldVal;
Account self;
Heap heapAtPre;
}\problem {(((newWithdrawDaily= self.withdrawDaily-x& newWithdrawHourly= self.withdrawHourly-x&x<0) & (limitExceeded(newWithdrawDaily, newWithdrawHourly, self.DAILY_LIMIT, self.HOURLY_LIMIT))) & self.<created>=TRUE & Account::exactInstance(self)=TRUE & !self = null & self.<inv> & wellFormed(heap)) -> {heapAtPre := heap || newWithdrawDaily_old := newWithdrawDaily || newWithdrawHourly_old := newWithdrawHourly || x_old := x || ret_old := ret || HOURLY_LIMIT3_oldVal := self.HOURLY_LIMIT || withdrawDaily8_oldVal := self.withdrawDaily || balance7_oldVal := self.balance || withdrawHourly4_oldVal := self.withdrawHourly || OVERDRAFT_LIMIT6_oldVal := self.OVERDRAFT_LIMIT || DAILY_LIMIT2_oldVal := self.DAILY_LIMIT} \<{;}\> ((newWithdrawDaily>=self.withdrawDaily&newWithdrawHourly>=self.withdrawHourly) & newWithdrawDaily = newWithdrawDaily_old & newWithdrawHourly = newWithdrawHourly_old & x = x_old & ret = ret_old)}