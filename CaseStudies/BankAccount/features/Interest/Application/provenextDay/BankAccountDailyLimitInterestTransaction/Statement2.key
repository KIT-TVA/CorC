\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Aug 23 17:21:18 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/runtime-EclipseApplication/BankAccount";\include "helper.key";\programVariables {int interest1_oldVal; Application self; Heap heapAtPre;}\problem {
     true
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Application::$a))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Application::$a),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap, self, Application::$a)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Application::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || interest1_oldVal:=int::select(heap,
                                     Account::select(heap,
                                                     self,
                                                     Application::$a),
                                     Account::$interest)}
     \<{
         self.a.interest+=self.a.interestCalculate();
       }\> (  (   geq(int::select(heap,
                                  Account::select(heap,
                                                  self,
                                                  Application::$a),
                                  Account::$balance),
                      Z(0(#)))
               -> geq(int::select(heap,
                                  Account::select(heap,
                                                  self,
                                                  Application::$a),
                                  Account::$interest),
                      interest1_oldVal))
            & (   leq(int::select(heap,
                                  Account::select(heap,
                                                  self,
                                                  Application::$a),
                                  Account::$balance),
                      Z(0(#)))
               -> leq(int::select(heap,
                                  Account::select(heap,
                                                  self,
                                                  Application::$a),
                                  Account::$interest),
                      interest1_oldVal)))

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "380")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "compound_assignment_op_plus_attr" (formula "9") (term "1") (inst "#v=a"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "a"))
(rule "assignment_read_attribute" (formula "9"))
(branch "Normal Execution (self != null)"
   (builtin "One Step Simplification" (formula "9"))
   (rule "eval_order_access4" (formula "9") (term "1") (inst "#v1=x") (inst "#v0=a_1"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "a_1"))
   (rule "assignment" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x"))
   (rule "compound_int_cast_expression" (formula "9") (term "1") (inst "#v=x_1"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
   (rule "remove_parentheses_right" (formula "9") (term "1"))
   (rule "compound_addition_2" (formula "9") (term "1") (inst "#v1=x_3") (inst "#v0=x_2"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_2"))
   (rule "assignment_read_attribute" (formula "9"))
   (branch "Normal Execution (a != null)"
      (builtin "One Step Simplification" (formula "9"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_3"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "9") (term "1") (inst "#v0=a_2"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "a_2"))
      (rule "assignment_read_attribute" (formula "9"))
      (branch "Normal Execution (self != null)"
         (builtin "One Step Simplification" (formula "9"))
         (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_interestCalculate,result,exc,heapAfter_interestCalculate,anon_heap_interestCalculate") (contract "Account[Account::interestCalculate()].JML normal_behavior operation contract.0"))
         (branch "Post (interestCalculate)"
            (builtin "One Step Simplification" (formula "8"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "pullOutSelect" (formula "11") (term "0,0") (inst "selectSK=Account_balance_0"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
            (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "2")))
            (rule "applyEqReverse" (formula "12") (term "0,0") (ifseqformula "11"))
            (rule "applyEqReverse" (formula "10") (term "0,0") (ifseqformula "11"))
            (rule "hideAuxiliaryEq" (formula "11"))
            (rule "assignmentAdditionInt" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "assignment_write_attribute" (formula "14"))
            (branch "Normal Execution (a_1 != null)"
               (builtin "One Step Simplification" (formula "14"))
               (rule "emptyModality" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "dismissNonSelectedField" (formula "14") (term "1,0,0,1"))
               (rule "dismissNonSelectedField" (formula "14") (term "1,0,1,1"))
               (rule "dismissNonSelectedField" (formula "14") (term "0,0,0"))
               (rule "dismissNonSelectedField" (formula "14") (term "1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "14") (term "0,0,1"))
               (rule "dismissNonSelectedField" (formula "14") (term "1,0,0,0"))
               (rule "pullOutSelect" (formula "14") (term "1,0,1,1") (inst "selectSK=Application_a_0"))
               (rule "applyEq" (formula "15") (term "1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "15") (term "1,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "15") (term "1,0,0,1") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "15") (term "1,0,1,1") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "1,0,0,0") (ifseqformula "1"))
               (rule "replaceKnownSelect_taclet0000_0" (formula "15") (term "0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0000_1" (formula "15") (term "0,0,0"))
               (rule "applyEqReverse" (formula "15") (term "1,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "1,0,0,1") (ifseqformula "1"))
               (rule "replaceKnownSelect_taclet0000_0" (formula "15") (term "0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet0000_1" (formula "15") (term "0,0,1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "14") (term "0,1,1") (inst "selectSK=Account_interest_0"))
               (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "15") (term "0,1,1") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,1"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,1,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1,1"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,1"))
               (rule "add_literals" (formula "14") (term "1,1,0,1,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,1,1"))
               (rule "add_zero_right" (formula "14") (term "0,1,1"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "14") (term "0,1,0"))
               (rule "inEqSimp_invertInEq1" (formula "14") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,1,1"))
               (rule "times_zero_2" (formula "14") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "14") (term "0,1,1"))
               (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "impRight" (formula "14"))
               (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_leqRight" (formula "15"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "13") (term "1") (ifseqformula "1"))
               (rule "leq_literals" (formula "13") (term "0,1"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
               (rule "qeq_literals" (formula "12") (term "0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "closeFalse" (formula "12"))
            )
            (branch "Null Reference (a_1 = null)"
               (rule "false_right" (formula "15"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Exceptional Post (interestCalculate)"
            (builtin "One Step Simplification" (formula "11"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "12") (ifseqformula "11"))
         )
         (branch "Pre (interestCalculate)"
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "6")))
            (rule "closeTrue" (formula "9"))
         )
         (branch "Null reference (a_2 = null)"
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")))
            (rule "closeTrue" (formula "9"))
         )
      )
      (branch "Null Reference (self = null)"
         (builtin "One Step Simplification" (formula "10"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (a = null)"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (self = null)"
   (builtin "One Step Simplification" (formula "10"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
   (rule "closeFalse" (formula "1"))
)
)

}
