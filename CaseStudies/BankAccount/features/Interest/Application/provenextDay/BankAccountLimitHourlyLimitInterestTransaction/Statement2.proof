\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "optimisedSelectRules" : "optimisedSelectRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 2147483647,
        "Timeout" : -1,
        "options" : { 
            "ABSTRACT_PROOF_FIRST_ORDER_GOALS_FORBIDDEN" : "true",
            "ABSTRACT_PROOF_FORBIDDEN_RULES" : "",
            "ABSTRACT_PROOF_FORBIDDEN_RULE_SETS" : "",
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_EXPAND",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_NONCLOSE",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "C:/Important/Work/CorC/BankAccount";
\include "helper.key";
\programVariables {
Account a1_oldVal;
int interest2_oldVal;
Application self;
Heap heapAtPre;
}
\problem {
     true
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Application::$a))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Application::$a),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap, self, Application::$a)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Application::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || interest2_oldVal:=int::select(heap,
                                     Account::select(heap,
                                                     self,
                                                     Application::$a),
                                     Account::$interest)
    || a1_oldVal:=Account::select(heap,
                                  self,
                                  Application::$a)}
     \<{
       self.a.interest +=
         self.a.interestCalculateDaily();
     }\> (  (   geq(int::select(heap,
                                Account::select(heap,
                                                self,
                                                Application::$a),
                                Account::$balance),
                    Z(0(#)))
             -> geq(int::select(heap,
                                Account::select(heap,
                                                self,
                                                Application::$a),
                                Account::$interest),
                    interest2_oldVal))
          & (   leq(int::select(heap,
                                Account::select(heap,
                                                self,
                                                Application::$a),
                                Account::$balance),
                    Z(0(#)))
             -> leq(int::select(heap,
                                Account::select(heap,
                                                self,
                                                Application::$a),
                                Account::$interest),
                    interest2_oldVal)))
}

\proof {
(keyLog "0" (keyUser "Fynn" ) (keyVersion "1fb0c10630b493ce138850ae0f9803d3f2fffc51"))

(autoModeTime "373")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "compound_assignment_op_plus_attr" (formula "9") (term "1") (inst "#v=a"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "a"))
(rule "assignment_read_attribute" (formula "9"))
(branch "Normal Execution (self != null)"
    (builtin "One Step Simplification" (formula "9"))
   (rule "eval_order_access4" (formula "9") (term "1") (inst "#v1=i") (inst "#v0=a_1"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "a_1"))
   (rule "assignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "i"))
   (rule "compound_reference_cast_expression_primitive" (formula "9") (term "1") (inst "#v=i_1"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_1"))
   (rule "remove_parentheses_right" (formula "9") (term "1"))
   (rule "compound_addition_2" (formula "9") (term "1") (inst "#v1=i_3") (inst "#v0=i_2"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_2"))
   (rule "assignment_read_attribute" (formula "9"))
   (branch "Normal Execution (a != null)"
       (builtin "One Step Simplification" (formula "9"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_3"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "9") (term "1") (inst "#v0=a_2"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "a_2"))
      (rule "assignment_read_attribute" (formula "9"))
      (branch "Normal Execution (self != null)"
          (builtin "One Step Simplification" (formula "9"))
          (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_interestCalculateDaily,result_interestCalculateDaily,exc,heapAfter_interestCalculateDaily,anon_heap_interestCalculateDaily") (contract "Account[Account::interestCalculateDaily()].JML normal_behavior operation contract.0") (modality "diamond"))
         (branch "Post (interestCalculateDaily)"
             (builtin "One Step Simplification" (formula "8"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "pullOutSelect" (formula "11") (term "0,0") (inst "selectSK=Account_balance_0"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
            (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "2")))
            (rule "applyEqReverse" (formula "12") (term "0,0") (ifseqformula "11"))
            (rule "applyEqReverse" (formula "10") (term "0,0") (ifseqformula "11"))
            (rule "hideAuxiliaryEq" (formula "11"))
            (rule "assignmentAdditionInt" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "assignment_write_attribute" (formula "14"))
            (branch "Normal Execution (a_1 != null)"
                (builtin "One Step Simplification" (formula "14"))
               (rule "emptyModality" (formula "14") (term "1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "dismissNonSelectedField" (formula "14") (term "0,0,1"))
               (rule "dismissNonSelectedField" (formula "14") (term "0,0,0"))
               (rule "dismissNonSelectedField" (formula "14") (term "1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "14") (term "1,0,1,1"))
               (rule "dismissNonSelectedField" (formula "14") (term "1,0,0,1"))
               (rule "dismissNonSelectedField" (formula "14") (term "1,0,0,0"))
               (rule "pullOutSelect" (formula "14") (term "0,1,0") (inst "selectSK=Account_interest_0"))
               (rule "applyEq" (formula "15") (term "0,1,1") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0"))
               (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1"))
               (rule "pullOutSelect" (formula "15") (term "0,0,1") (inst "selectSK=Account_balance_1"))
               (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=Account_interest_1"))
               (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "pullOutSelect" (formula "3") (term "0,0,0") (inst "selectSK=Application_a_0"))
               (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "3"))
               (rule "applyEq" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "3"))
               (rule "applyEq" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "3"))
               (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "17")) (ifInst ""  (formula "7")))
               (rule "applyEqReverse" (formula "4") (term "0,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "18") (term "1,1,1") (ifseqformula "4"))
               (rule "applyEqReverse" (formula "18") (term "1,1,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "4")))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "applyEqReverse" (formula "15") (term "0,0,1") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,1"))
               (rule "add_literals" (formula "14") (term "1,1,0,1,1"))
               (rule "times_zero_1" (formula "14") (term "1,0,1,1"))
               (rule "add_zero_right" (formula "14") (term "0,1,1"))
               (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "impRight" (formula "14"))
               (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_leqRight" (formula "15"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Null Reference (a_1 = null)"
               (rule "false_right" (formula "15"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Exceptional Post (interestCalculateDaily)"
             (builtin "One Step Simplification" (formula "8"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "11"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "13") (ifseqformula "12"))
         )
         (branch "Pre (interestCalculateDaily)"
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "6")) (ifInst ""  (formula "2")))
            (rule "closeTrue" (formula "9"))
         )
         (branch "Null reference (a_2 = null)"
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")))
            (rule "closeTrue" (formula "9"))
         )
      )
      (branch "Null Reference (self = null)"
         (rule "false_right" (formula "10"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (a = null)"
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (self = null)"
   (rule "false_right" (formula "10"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
   (rule "closeFalse" (formula "1"))
)
)
}
