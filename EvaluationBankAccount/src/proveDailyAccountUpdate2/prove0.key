\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jul 09 13:30:58 CEST 2019
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=20000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/tbord/Documents/EvaluationBankAccount";\include "helper.key";\programVariables {int OVERDRAFT_LIMIT; int old_balance; int newBalance; boolean result; int x; int old_withdraw; int DAILY_LIMIT; int newWithdraw; Account a; boolean tmp; int OVERDRAFT_LIMIT_old; int old_balance_old; int newBalance_old; boolean result_old; int x_old; int old_withdraw_old; int DAILY_LIMIT_old; Account a_old;  Heap heapAtPre;}\problem {
       int::select(heap, null, Account::$withdraw)
     = old_withdraw
   & geq(newWithdraw,
         int::select(heap, null, Account::$withdraw))
   & OVERDRAFT_LIMIT = Z(0(#))
   & DAILY_LIMIT = Z(neglit(0(0(0(1(#))))))
   & !a = null
   &   old_balance
     = int::select(heap, null, Account::$balance)
   &   old_withdraw
     = int::select(heap, null, Account::$withdraw)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || OVERDRAFT_LIMIT_old:=OVERDRAFT_LIMIT
    || old_balance_old:=old_balance
    || newBalance_old:=newBalance
    || result_old:=result
    || x_old:=x
    || old_withdraw_old:=old_withdraw
    || DAILY_LIMIT_old:=DAILY_LIMIT
    || a_old:=a}
     \<{
         tmp=a.update(x);
       }\> (    int::select(heap,
                            null,
                            Account::$withdraw)
              = old_withdraw
            & geq(newWithdraw,
                  int::select(heap,
                              null,
                              Account::$withdraw))
            & (   tmp = TRUE
               ->   add(old_balance, x)
                  = int::select(heap,
                                null,
                                Account::$balance))
            & (   tmp = FALSE
               ->   old_balance
                  = int::select(heap,
                                null,
                                Account::$balance))
            & OVERDRAFT_LIMIT = OVERDRAFT_LIMIT_old
            & old_balance = old_balance_old
            & newBalance = newBalance_old
            & result = result_old
            & x = x_old
            & old_withdraw = old_withdraw_old
            & DAILY_LIMIT = DAILY_LIMIT_old
            & a = a_old)

}

\proof {
(keyLog "0" (keyUser "tbord" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "697")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,1,0,0,0,0,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,1,0,0,0,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,1"))
(rule "eqSymm" (formula "6"))
(rule "eqSymm" (formula "5"))
(rule "inEqSimp_commuteGeq" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "2"))
(rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
(rule "applyEq" (formula "8") (term "0,1,0,0") (ifseqformula "4"))
(rule "applyEq" (formula "8") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "3"))
(rule "applyEq_and_int6" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,1"))
(builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_update,result_0,exc,heapAfter_update,anon_heap_update") (contract "Account[Account::update(int)].JML normal_behavior operation contract.0"))
(branch "Post (update)"
   (builtin "One Step Simplification" (formula "10"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,1,1"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "polySimp_addComm0" (formula "11") (term "1,1"))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "applyEq" (formula "11") (term "1,1,1") (ifseqformula "5"))
   (rule "polySimp_addComm0" (formula "11") (term "1,1"))
   (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "5"))
   (rule "pullOutSelect" (formula "11") (term "0,1") (inst "selectSK=Account_balance_0"))
   (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "11"))
   (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "eqSymm" (formula "10") (term "1"))
   (rule "polySimp_homoEq" (formula "12") (term "1"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1"))
   (rule "polySimp_addComm0" (formula "12") (term "0,0,1"))
   (rule "elementOfSingleton" (formula "11") (term "0,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "applyEqReverse" (formula "12") (term "0,0,0,0,1") (ifseqformula "11"))
   (rule "applyEqReverse" (formula "10") (term "1,1") (ifseqformula "11"))
   (rule "hideAuxiliaryEq" (formula "11"))
   (rule "eqSymm" (formula "10") (term "1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "11") (term "0,1"))
   (rule "polySimp_sepNegMonomial" (formula "11") (term "1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1"))
   (rule "emptyModality" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "2")))
   (rule "replaceKnownSelect_taclet0_0" (formula "13") (term "0,1,1,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "13") (term "0,1,1,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "13") (term "0,1,1,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "13") (term "0,1,1,0,0,0"))
   (rule "eqSymm" (formula "13") (term "1,0"))
   (rule "eqSymm" (formula "13") (term "1"))
   (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "10"))
   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
   (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=Account_withdraw_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "14"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "14") (term "1") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "eqSymm" (formula "13"))
   (rule "close" (formula "13") (ifseqformula "1"))
)
(branch "Exceptional Post (update)"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaAddInt" (formula "8") (term "1,1,1,0,1,1"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "13") (ifseqformula "12"))
)
(branch "Pre (update)"
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")))
   (rule "closeTrue" (formula "8"))
)
)

}
