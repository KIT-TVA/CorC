<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="push" proven="true" className="IntList" methodName="push">
    <statement name="statement" id="d330782b-8f98-4026-8965-53e73f14b727">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="859a4fb5-5d9d-4866-aeba-06596dabe5a9">
        <firstStatement name="statement1" id="27c91912-b9ea-4a85-88cf-ce7ab77ca835">
          <refinement name="tmp = new int[data.length+1];" proven="true" id="4e933b9d-1701-464d-9c7f-0f8415373f32">
            <postCondition name="tmp.length = data.length + 1"/>
            <preCondition name="true"/>
          </refinement>
          <postCondition name="tmp.length = data.length + 1"/>
          <preCondition name="true"/>
        </firstStatement>
        <secondStatement name="statement2" id="986ea4ab-7d99-4868-8778-d91ff3075324">
          <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="12c9ea9d-5ef0-433c-9152-3dbf1d4dc79d">
            <firstStatement name="statement1" id="17d56354-66d9-4ff4-b7e0-e2a33ff75ad9">
              <refinement name="tmp[tmp.length-1] = newTop;" proven="true" id="ed05fd28-80e1-430f-863c-0296373c90b8">
                <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
                <preCondition name="tmp.length = data.length + 1"/>
              </refinement>
              <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
              <preCondition name="tmp.length = data.length + 1"/>
            </firstStatement>
            <secondStatement name="statement2" id="00839c1a-58cc-477d-b139-3b846ae89470">
              <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="5223e472-0ecf-4c2e-b5b0-624ca49ee924">
                <firstStatement name="statement1" id="5761b209-0500-44c9-8be1-bbf42423d915">
                  <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="bc2b782b-6fe0-4e69-8fb6-0a39b73bdebd">
                    <firstStatement name="statement1" id="548b50c1-c8f8-48f5-a158-cbdc9e930eff">
                      <refinement name="i = 0;" proven="true" id="51aae841-f366-4c8a-88ad-5ef39a826ac2">
                        <postCondition name="tmp.length = data.length+ 1&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                        <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
                      </refinement>
                      <postCondition name="tmp.length = data.length+ 1&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                      <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
                    </firstStatement>
                    <secondStatement name="statement2" id="f8fb59ff-6777-4276-b0f8-70205f7083a9">
                      <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" id="e9026782-2d2e-4db3-9989-a5be6d0eb46b" variantProven="true" preProven="true" postProven="true">
                        <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                        <preCondition name="tmp.length = data.length+ 1&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                        <loopStatement name="loop" id="4b77ae14-f5ee-4edc-818b-7a1d00fcf1ca">
                          <refinement name="tmp[i] = data[i];&#xD;&#xA;i++;" proven="true" id="ac8d15e8-2354-4be5-9207-3f0e56e3e08c">
                            <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                            <preCondition name="(tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))) &amp; (i &lt; data.length)"/>
                          </refinement>
                          <postCondition name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                          <preCondition name="(tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))) &amp; (i &lt; data.length)"/>
                        </loopStatement>
                        <variant name="data.length - i"/>
                        <invariant name="tmp.length = data.length + 1 &amp; tmp[tmp.length-1] = newTop &amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j]))"/>
                        <guard name="i &lt; data.length"/>
                      </refinement>
                      <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                      <preCondition name="tmp.length = data.length+ 1&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                    </secondStatement>
                    <intermediateCondition name="tmp.length = data.length+ 1&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int j; (0 &lt;= j &amp; j &lt; i -> data[j] = tmp[j])) &amp; i = 0"/>
                  </refinement>
                  <postCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                  <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
                </firstStatement>
                <secondStatement name="statement2" id="ab6bd845-2b97-4683-bd72-93f4d12f59e6">
                  <refinement name="data = tmp;" proven="true" id="deb4d5bc-fd07-4581-b80b-bcce590a30d5">
                    <postCondition name="containsNewTop(data, newTop)&#xD;&#xA;&amp; containsOldElements(data, \old(data))"/>
                    <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                  </refinement>
                  <postCondition name="containsNewTop(data, newTop)&#xD;&#xA;&amp; containsOldElements(data, \old(data))"/>
                  <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
                </secondStatement>
                <intermediateCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop&#xD;&#xA;&amp; (\forall int i; (0 &lt;= i &amp; i &lt; data.length -> data[i] = tmp[i]))"/>
              </refinement>
              <postCondition name="containsNewTop(data, newTop)&#xD;&#xA;&amp; containsOldElements(data, \old(data))"/>
              <preCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
            </secondStatement>
            <intermediateCondition name="tmp.length = data.length + 1&#xD;&#xA;&amp; tmp[tmp.length-1] = newTop"/>
          </refinement>
          <postCondition name="containsNewTop(data, newTop)&#xD;&#xA;&amp; containsOldElements(data, \old(data))"/>
          <preCondition name="tmp.length = data.length + 1"/>
        </secondStatement>
        <intermediateCondition name="tmp.length = data.length + 1"/>
      </refinement>
      <postCondition name="containsNewTop(data, newTop)&#xD;&#xA;&amp; containsOldElements(data, \old(data))"/>
      <preCondition name="true"/>
    </statement>
    <preCondition name="pre"/>
    <postCondition name="post"/>
    <methodObj href="IntList.cbcclass#//@methods.0"/>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int i"/>
    <variables name="int[] tmp"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="data != null"/>
    <conditions name="data.length >= 0"/>
    <conditions name="i >= 0"/>
    <conditions name="\old(data) = data"/>
    <conditions name="tmp != null"/>
  </cbcmodel:GlobalConditions>
</xmi:XMI>
