<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="sort" proven="true" className="IntList" methodName="sort">
    <statement name="statement" id="30b6b474-4036-49b3-baae-7f4651e1e2d6">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="96b00fcf-c2ed-4ef6-8f7a-176e3441c302">
        <firstStatement name="statement1" id="e7f4645c-2945-45b3-a675-75acb9903c81">
          <refinement name="i = 0;" proven="true" id="5b8a8715-06cc-4130-92e8-ac7074f32a42">
            <postCondition name="i = 0"/>
            <preCondition name="data &#xD;&#xA;= \old(data)"/>
          </refinement>
          <postCondition name="i = 0"/>
          <preCondition name="data &#xD;&#xA;= \old(data)"/>
        </firstStatement>
        <secondStatement name="statement2" id="04181ac0-9e4f-423d-8423-301f587ff50f">
          <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" id="10c45e24-d295-4797-bba4-0f1a846103c4" variantProven="true" preProven="true" postProven="true">
            <postCondition name="containsOldElements(data, \old(data))&#xD;&#xA;&amp; sorted(data)"/>
            <preCondition name="i = 0"/>
            <loopStatement name="loop" id="af6bb44c-17b9-4ba9-94f5-6aa29609d408">
              <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="83af4be4-ead4-427b-8887-05fbaafc2002">
                <firstStatement name="statement1" id="3e7a3c04-e937-438f-88b8-aebd06333308">
                  <refinement name="j = data.length-2;" proven="true" id="4e4cd326-59ce-4127-97e5-512a22a0cca0">
                    <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m])))) &amp; j = data.length-2"/>
                    <preCondition name="((\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))) &amp; (i &lt; data.length)"/>
                  </refinement>
                  <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m])))) &amp; j = data.length-2"/>
                  <preCondition name="((\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))) &amp; (i &lt; data.length)"/>
                </firstStatement>
                <secondStatement name="statement2" id="14027a97-db9b-487a-9242-1eb3b16feac9">
                  <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="ba6e24b9-52a2-47ca-b3da-0800790713ea">
                    <firstStatement name="statement1" id="7f88b7e5-1f19-4317-8e72-4cbd39c0b5b1">
                      <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" id="d1d11ea2-d5db-44eb-986a-f55f60803db0" variantProven="true" preProven="true" postProven="true">
                        <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i+1 -> (\forall int m; (k &lt; m &amp; m &lt; data.length -> data[k] >= data[m]))))"/>
                        <preCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m])))) &amp; j = data.length-2"/>
                        <loopStatement name="loop" id="fdb07842-22d4-494b-aec1-aa82ebd2b7b2">
                          <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="14177e11-2571-40c5-8ea5-c00b16400803">
                            <firstStatement name="statement1" id="032fdd96-251c-4d66-9563-c2f563b1f66f">
                              <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" proven="true" id="f92780d5-a199-450b-92df-c53a69bfb06d" preProve="true">
                                <guards name="data[j] &lt; data[j+1]"/>
                                <guards name="data[j] >= data[j+1]"/>
                                <commands name="statement" id="3059f18a-776a-4105-9950-6c34e4a4cee2">
                                  <refinement name="tmp = data[j];&#xD;&#xA;data[j] = data[j+1];&#xD;&#xA;data[j+1] = tmp;" proven="true" id="80099506-1d08-4420-8ff6-9e054fbd95d3">
                                    <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j] >= data[h]))"/>
                                    <preCondition name="modifiable(\nothing);(((\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))) &amp; (j>=i)) &amp; (data[j] &lt; data[j+1])"/>
                                  </refinement>
                                  <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j] >= data[h]))"/>
                                  <preCondition name="modifiable(\nothing);(((\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))) &amp; (j>=i)) &amp; (data[j] &lt; data[j+1])"/>
                                </commands>
                                <commands name="statement" id="6e789aee-8827-40c4-9e16-e291f29e63e5">
                                  <refinement xsi:type="cbcmodel:SkipStatement" name=";" proven="true" id="df3c91f9-823c-4fba-8d25-6eb3aae17267">
                                    <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j] >= data[h]))"/>
                                    <preCondition name="modifiable(\nothing);(((\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))) &amp; (j>=i)) &amp; (data[j] >= data[j+1])"/>
                                  </refinement>
                                  <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j] >= data[h]))"/>
                                  <preCondition name="modifiable(\nothing);(((\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))) &amp; (j>=i)) &amp; (data[j] >= data[j+1])"/>
                                </commands>
                              </refinement>
                              <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j] >= data[h]))"/>
                              <preCondition name="((\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))) &amp; (j>=i)"/>
                            </firstStatement>
                            <secondStatement name="statement2" id="3ec7928c-6d28-4969-a904-bd04f227345f">
                              <refinement name="j--;" proven="true" id="75b0a7c5-25b5-4fd7-880f-532fe5269cac">
                                <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))"/>
                                <preCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j] >= data[h]))"/>
                              </refinement>
                              <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))"/>
                              <preCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j] >= data[h]))"/>
                            </secondStatement>
                            <intermediateCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j] >= data[h]))"/>
                          </refinement>
                          <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))"/>
                          <preCondition name="((\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))) &amp; (j>=i)"/>
                        </loopStatement>
                        <variant name="j+1"/>
                        <invariant name="(\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))&#xD;&#xA;&amp; (\forall int h; (j &lt; h &amp; h &lt; data.length -> data[j+1] >= data[h]))"/>
                        <guard name="j>=i"/>
                      </refinement>
                      <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i+1 -> (\forall int m; (k &lt; m &amp; m &lt; data.length -> data[k] >= data[m]))))"/>
                      <preCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m])))) &amp; j = data.length-2"/>
                    </firstStatement>
                    <secondStatement name="statement2" id="158a7b60-5f72-4933-be3b-52107470da28">
                      <refinement name="i++;" proven="true" id="4ce71f6c-4a6a-4b39-8ced-30eb4de62a02">
                        <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))"/>
                        <preCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i+1 -> (\forall int m; (k &lt; m &amp; m &lt; data.length -> data[k] >= data[m]))))"/>
                      </refinement>
                      <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))"/>
                      <preCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i+1 -> (\forall int m; (k &lt; m &amp; m &lt; data.length -> data[k] >= data[m]))))"/>
                    </secondStatement>
                    <intermediateCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i+1 -> (\forall int m; (k &lt; m &amp; m &lt; data.length -> data[k] >= data[m]))))"/>
                  </refinement>
                  <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))"/>
                  <preCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m])))) &amp; j = data.length-2"/>
                </secondStatement>
                <intermediateCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i -> (\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m])))) &amp; j = data.length-2"/>
              </refinement>
              <postCondition name="(\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))"/>
              <preCondition name="((\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))) &amp; (i &lt; data.length)"/>
            </loopStatement>
            <variant name="data.length-i"/>
            <invariant name="(\forall int k; (0 &lt;= k &amp; k &lt; i ->&#xD;&#xA;(\forall int m; (k &lt; m &amp; m &lt; data.length ->&#xD;&#xA;data[k] >= data[m]))))"/>
            <guard name="i &lt; data.length"/>
          </refinement>
          <postCondition name="containsOldElements(data, \old(data))&#xD;&#xA;&amp; sorted(data)"/>
          <preCondition name="i = 0"/>
        </secondStatement>
        <intermediateCondition name="i = 0"/>
      </refinement>
      <postCondition name="containsOldElements(data, \old(data))&#xD;&#xA;&amp; sorted(data)"/>
      <preCondition name="data &#xD;&#xA;= \old(data)"/>
    </statement>
    <preCondition name="pre"/>
    <postCondition name="post"/>
    <methodObj href="IntList.cbcclass#//@methods.0"/>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int i"/>
    <variables name="int j"/>
    <variables name="int tmp"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="data != null"/>
    <conditions name="i >= 0 &amp; i &lt;= data.length"/>
    <conditions name="j &lt;= data.length-2 &amp; j >=i-1"/>
  </cbcmodel:GlobalConditions>
</xmi:XMI>
