\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Sep 14 15:31:27 CEST 2021
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/tobia/workspaceCorCGitRuntime/BankAccountCorC";\include "helper.key";\programVariables {int result; Application self; Heap heapAtPre;}\problem {
     gt(Account.INTEREST_RATE, Z(0(#)))
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Application::$account))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Application::$account),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Application::$account)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Application::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap}
     \<{
         result=self.account.balance*Account.INTEREST_RATE/36500;
       }\> (  (   geq(int::select(heap,
                                  Account::select(heap,
                                                  self,
                                                  Application::$account),
                                  Account::$balance),
                      Z(0(#)))
               -> geq(result, Z(0(#))))
            & (   leq(int::select(heap,
                                  Account::select(heap,
                                                  self,
                                                  Application::$account),
                                  Account::$balance),
                      Z(0(#)))
               -> leq(result, Z(0(#)))))

}

\proof {
(keyLog "0" (keyUser "tobia" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "872")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "greater_literals" (formula "1") (term "0,0,0,0,0,0,0,0,0"))
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "compound_division_1" (formula "9") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "9"))
(rule "variableDeclaration" (formula "9") (newnames "x"))
(rule "compound_multiplication_1" (formula "9") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "9"))
(rule "variableDeclaration" (formula "9") (newnames "x_1"))
(rule "eval_order_access2" (formula "9") (inst "#v0=a"))
(rule "variableDeclarationAssign" (formula "9"))
(rule "variableDeclaration" (formula "9") (newnames "a"))
(rule "assignment_read_attribute" (formula "9"))
(branch "Normal Execution (self != null)"
   (rule "assignment_read_attribute" (formula "9"))
   (branch "Normal Execution (a != null)"
      (builtin "One Step Simplification" (formula "9"))
      (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "translateJavaMulInt" (formula "9") (term "0,0"))
      (rule "assignmentDivisionInt" (formula "9"))
      (branch
         (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaDivInt" (formula "9") (term "0,0"))
         (rule "emptyModality" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "andRight" (formula "9"))
         (branch
            (rule "impRight" (formula "9"))
            (rule "inEqSimp_geqRight" (formula "10"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "jdiv_axiom" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
            (rule "eqSymm" (formula "1"))
            (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "3"))
            (rule "greater_literals" (formula "1") (term "0,0,0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_2"))
            (rule "equal_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,1,1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(9(4(2(8(1(#)))))),
    mul(quotient_2, Z(0(5(2(8(1(#))))))))") (inst "elimGcdLeftDiv=int::select(heap,
            Account::select(heap,
                            self,
                            Application::$account),
            Account::$balance)") (inst "elimGcd=Z(2(#))"))
            (rule "leq_literals" (formula "3") (term "0,0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=mul(quotient_2, Z(0(5(2(8(1(#)))))))") (inst "elimGcdLeftDiv=int::select(heap,
            Account::select(heap,
                            self,
                            Application::$account),
            Account::$balance)") (inst "elimGcd=Z(2(#))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "polySimp_mulAssoc" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "leq_literals" (formula "2") (term "0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "3"))
            (rule "times_zero_1" (formula "6") (term "0,0"))
            (rule "add_zero_left" (formula "6") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "mul_literals" (formula "6") (term "1"))
            (rule "inEqSimp_contradInEq3" (formula "6") (ifseqformula "5"))
            (rule "mul_literals" (formula "6") (term "0,1,0"))
            (rule "greater_literals" (formula "6") (term "0,0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "qeq_literals" (formula "6") (term "0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "closeFalse" (formula "6"))
         )
         (branch
            (rule "impRight" (formula "9"))
            (rule "inEqSimp_leqRight" (formula "10"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "jdiv_axiom" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
            (rule "eqSymm" (formula "1"))
            (rule "elimGcdGeq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=int::select(heap,
            Account::select(heap,
                            self,
                            Application::$account),
            Account::$balance)") (inst "elimGcd=Z(2(#))"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "sub_literals" (formula "1") (term "0,0,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,0,0,0"))
            (rule "add_literals" (formula "1") (term "1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "0,1,0,0,0"))
            (rule "leq_literals" (formula "1") (term "1,0,0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "1") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "div_axiom" (formula "1") (term "1,0") (inst "quotient=quotient_0"))
            (rule "equal_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,1,1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(9(4(2(8(1(#)))))),
    mul(quotient_0, Z(0(5(2(8(1(#))))))))") (inst "elimGcdLeftDiv=int::select(heap,
            Account::select(heap,
                            self,
                            Application::$account),
            Account::$balance)") (inst "elimGcd=Z(2(#))"))
            (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "3") (term "0,0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=mul(quotient_0, Z(0(5(2(8(1(#)))))))") (inst "elimGcdLeftDiv=int::select(heap,
            Account::select(heap,
                            self,
                            Application::$account),
            Account::$balance)") (inst "elimGcd=Z(2(#))"))
            (rule "leq_literals" (formula "2") (term "0,0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "polySimp_mulAssoc" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "leq_literals" (formula "2") (term "0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "polySimp_mulAssoc" (formula "2") (term "0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "inEqSimp_invertInEq1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "times_zero_2" (formula "2") (term "1"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(0(5(2(8(1(#))))))"))
            (rule "leq_literals" (formula "2") (term "0,0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "div_axiom" (formula "5") (term "0,2,0") (inst "quotient=quotient_1"))
            (rule "mul_literals" (formula "5") (term "1,1,1,1,1"))
            (rule "equal_literals" (formula "5") (term "0"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "qeq_literals" (formula "5") (term "0,1"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "polySimp_addComm1" (formula "7") (term "1"))
            (rule "add_literals" (formula "7") (term "0,1"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
            (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "5"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1"))
            (rule "elimGcdLeq_antec" (formula "6") (inst "elimGcdRightDiv=mul(quotient_1, Z(neglit(0(5(2(8(1(#))))))))") (inst "elimGcdLeftDiv=int::select(heap,
            Account::select(heap,
                            self,
                            Application::$account),
            Account::$balance)") (inst "elimGcd=Z(2(#))"))
            (rule "leq_literals" (formula "6") (term "0,0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
            (rule "neg_literal" (formula "6") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0"))
            (rule "qeq_literals" (formula "6") (term "0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=add(Z(neglit(9(4(2(8(1(#))))))),
    mul(quotient_1, Z(neglit(0(5(2(8(1(#)))))))))") (inst "elimGcdLeftDiv=int::select(heap,
            Account::select(heap,
                            self,
                            Application::$account),
            Account::$balance)") (inst "elimGcd=Z(2(#))"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
            (rule "leq_literals" (formula "7") (term "0,0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0"))
            (rule "leq_literals" (formula "7") (term "0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "6"))
            (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
            (rule "polySimp_addComm0" (formula "3") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=mul(quotient_1, Z(neglit(1(#))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(0(5(2(8(1(#))))))"))
            (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "3") (term "0,0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "polySimp_mulAssoc" (formula "3") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
            (rule "polySimp_rightDist" (formula "8") (term "0,0"))
            (rule "mul_literals" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
            (rule "mul_literals" (formula "8") (term "0,1"))
            (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(quotient_1, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(0(5(2(8(1(#))))))"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
            (rule "leq_literals" (formula "8") (term "0,0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "leq_literals" (formula "8") (term "0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "12"))
            (rule "add_zero_right" (formula "9") (term "0"))
            (rule "polySimp_rightDist" (formula "9") (term "0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
            (rule "mul_literals" (formula "9") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1"))
            (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(0(5(2(8(1(#))))))"))
            (rule "leq_literals" (formula "9") (term "0,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "leq_literals" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "2"))
            (rule "add_zero_right" (formula "8") (term "0"))
            (rule "polySimp_rightDist" (formula "8") (term "0"))
            (rule "mul_literals" (formula "8") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "mul_literals" (formula "8") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
            (rule "leq_literals" (formula "8") (term "0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "ifthenelse_split" (formula "11") (term "0"))
            (branch "self.account.balance >= 0 TRUE"
               (rule "eqSymm" (formula "12"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "2"))
               (rule "qeq_literals" (formula "13") (term "0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "closeFalse" (formula "13"))
            )
            (branch "self.account.balance >= 0 FALSE"
               (rule "eqSymm" (formula "11"))
               (rule "inEqSimp_geqRight" (formula "20"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq1" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "10"))
               (rule "qeq_literals" (formula "13") (term "0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "closeFalse" (formula "13"))
            )
         )
      )
      (branch
         (builtin "One Step Simplification" (formula "9"))
         (rule "equal_literals" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "closeTrue" (formula "9"))
      )
   )
   (branch "Null Reference (a = null)"
      (rule "false_right" (formula "10"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (self = null)"
   (rule "close" (formula "9") (ifseqformula "1"))
)
)

}
