\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Sep 14 12:09:48 CEST 2021
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/tobia/workspaceCorCGitRuntime/ElevatorCorC";\include "helper.key";\programVariables {Elevator e; int index; Person tmpPerson; Floor self; Heap heapAtPre;}\problem {
     geq(index, Z(0(#)))
   & !  Person[]::select(heap,
                         ArrayList::select(heap,
                                           self,
                                           Floor::$waiting),
                         ArrayList::$elements)
      = Person[]::select(heap,
                         ArrayList::select(heap,
                                           e,
                                           Elevator::$persons),
                         ArrayList::$elements)
   & \forall int i;
       (     geq(i, Z(0(#)))
           & lt(i, index)
           & lt(i,
                int::select(heap,
                            ArrayList::select(heap,
                                              self,
                                              Floor::$waiting),
                            ArrayList::$collectionSize))
           & !  ArrayList::get(heap,
                               ArrayList::select(heap,
                                                 self,
                                                 Floor::$waiting),
                               i)
              = null
           &   ArrayList::contains(heap,
                                   ArrayList::select(heap,
                                                     e,
                                                     Elevator::$persons),
                                   ArrayList::get(heap,
                                                  ArrayList::select(heap,
                                                                    self,
                                                                    Floor::$waiting),
                                                  i))
             = FALSE
        ->     ArrayList::contains(heap,
                                   ArrayList::select(heap,
                                                     e,
                                                     Elevator::$persons),
                                   ArrayList::get(heap,
                                                  ArrayList::select(heap,
                                                                    self,
                                                                    Floor::$waiting),
                                                  i))
             = TRUE
           &   boolean::select(heap,
                               boolean[]::select(heap,
                                                 e,
                                                 Elevator::$floorButtons),
                               arr(int::select(heap,
                                               ArrayList::get(heap,
                                                              ArrayList::select(heap,
                                                                                self,
                                                                                Floor::$waiting),
                                                              i),
                                               Person::$destination)))
             = TRUE)
   & lt(index,
        ArrayList::size(heap,
                        ArrayList::select(heap,
                                          self,
                                          Floor::$waiting)))
   & !  Person[]::select(heap,
                         ArrayList::select(heap,
                                           self,
                                           Floor::$waiting),
                         ArrayList::$elements)
      = null
   & !  Person[]::select(heap,
                         ArrayList::select(heap,
                                           e,
                                           Elevator::$persons),
                         ArrayList::$elements)
      = null
   & !  boolean[]::select(heap,
                          e,
                          Elevator::$floorButtons)
      = null
   & !  ArrayList::select(heap, e, Elevator::$persons)
      = null
   & !  Person[]::select(heap,
                         ArrayList::select(heap,
                                           self,
                                           Floor::$waiting),
                         ArrayList::$elements)
      = Person[]::select(heap,
                         ArrayList::select(heap,
                                           e,
                                           Elevator::$persons),
                         ArrayList::$elements)
   & geq(int::select(heap,
                     ArrayList::select(heap,
                                       self,
                                       Floor::$waiting),
                     ArrayList::$collectionSize),
         Z(0(#)))
   & geq(int::select(heap,
                     ArrayList::select(heap,
                                       e,
                                       Elevator::$persons),
                     ArrayList::$collectionSize),
         Z(0(#)))
   & geq(index, Z(0(#)))
   & java.lang.Object::<inv>(heap,
                             ArrayList::select(heap,
                                               self,
                                               Floor::$waiting))
   &   boolean::select(heap,
                       ArrayList::select(heap,
                                         e,
                                         Elevator::$persons),
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       boolean[]::select(heap,
                                         e,
                                         Elevator::$floorButtons),
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       Person[]::select(heap,
                                        ArrayList::select(heap,
                                                          self,
                                                          Floor::$waiting),
                                        ArrayList::$elements),
                       java.lang.Object::<created>)
     = TRUE
   &   ArrayList::exactInstance(ArrayList::select(heap,
                                                  self,
                                                  Floor::$waiting))
     = TRUE
   &   boolean::select(heap,
                       ArrayList::select(heap,
                                         self,
                                         Floor::$waiting),
                       java.lang.Object::<created>)
     = TRUE
   & !  ArrayList::select(heap, self, Floor::$waiting)
      = null
   &   Environment::exactInstance(Environment::select(heap,
                                                      self,
                                                      Floor::$env))
     = TRUE
   &   boolean::select(heap,
                       Environment::select(heap,
                                           self,
                                           Floor::$env),
                       java.lang.Object::<created>)
     = TRUE
   & !  Environment::select(heap, self, Floor::$env)
      = null
   & Elevator::exactInstance(e) = TRUE
   &   boolean::select(heap,
                       e,
                       java.lang.Object::<created>)
     = TRUE
   & !e = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Floor::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap}
     \<{
         e.enterElevator(self.waiting.get(index));
         index++;
       }\> (  geq(index, Z(0(#)))
            & !  Person[]::select(heap,
                                  ArrayList::select(heap,
                                                    self,
                                                    Floor::$waiting),
                                  ArrayList::$elements)
               = Person[]::select(heap,
                                  ArrayList::select(heap,
                                                    e,
                                                    Elevator::$persons),
                                  ArrayList::$elements)
            & \forall int i;
                (     geq(i, Z(0(#)))
                    & lt(i, index)
                    & lt(i,
                         int::select(heap,
                                     ArrayList::select(heap,
                                                       self,
                                                       Floor::$waiting),
                                     ArrayList::$collectionSize))
                    & !  ArrayList::get(heap,
                                        ArrayList::select(heap,
                                                          self,
                                                          Floor::$waiting),
                                        i)
                       = null
                    &   ArrayList::contains(heap,
                                            ArrayList::select(heap,
                                                              e,
                                                              Elevator::$persons),
                                            ArrayList::get(heap,
                                                           ArrayList::select(heap,
                                                                             self,
                                                                             Floor::$waiting),
                                                           i))
                      = FALSE
                 ->     ArrayList::contains(heap,
                                            ArrayList::select(heap,
                                                              e,
                                                              Elevator::$persons),
                                            ArrayList::get(heap,
                                                           ArrayList::select(heap,
                                                                             self,
                                                                             Floor::$waiting),
                                                           i))
                      = TRUE
                    &   boolean::select(heap,
                                        boolean[]::select(heap,
                                                          e,
                                                          Elevator::$floorButtons),
                                        arr(int::select(heap,
                                                        ArrayList::get(heap,
                                                                       ArrayList::select(heap,
                                                                                         self,
                                                                                         Floor::$waiting),
                                                                       i),
                                                        Person::$destination)))
                      = TRUE))

}

\proof {
(keyLog "0" (keyUser "tobia" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "5747")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0,0,1,0"))
(rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0,1,0"))
(rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "polySimp_elimOne" (formula "2") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,0,0"))
(rule "nnf_imp2or" (formula "1") (term "0"))
(rule "nnf_imp2or" (formula "29") (term "0,1,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0"))
(builtin "One Step Simplification" (formula "1"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0"))
(builtin "One Step Simplification" (formula "1"))
(rule "nnf_notAnd" (formula "29") (term "0,0,1,0"))
(builtin "One Step Simplification" (formula "29"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
(rule "nnf_notAnd" (formula "29") (term "0,0,0,1,0"))
(builtin "One Step Simplification" (formula "29"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
(rule "nnf_notAnd" (formula "29") (term "0,0,0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,1,0"))
(rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,1,0"))
(rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,1,0"))
(rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,1,0"))
(rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0,1,0"))
(rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0,1,0"))
(rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0,1,0"))
(rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0,1,0"))
(rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0,1,0"))
(rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0,1,0"))
(rule "commute_or_2" (formula "1") (term "0,0,0"))
(rule "commute_or_2" (formula "1") (term "0,0"))
(rule "cnf_rightDist" (formula "1") (term "0"))
(rule "distr_forallAnd" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "commute_or_2" (formula "1") (term "0"))
(builtin "One Step Simplification" (formula "1"))
(rule "shift_paren_or" (formula "2") (term "0"))
(rule "commute_or_2" (formula "1") (term "0,0,0"))
(rule "commute_or_2" (formula "1") (term "0,0"))
(rule "shift_paren_or" (formula "2") (term "0,0"))
(rule "commute_or" (formula "1") (term "0,0,0,0"))
(rule "commute_or_2" (formula "1") (term "0,0,0"))
(rule "commute_or_2" (formula "2") (term "1,0,0,0"))
(rule "shift_paren_or" (formula "2") (term "0,0,0"))
(rule "commute_or" (formula "2") (term "1,0,0,0,0"))
(rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
(rule "commute_or_2" (formula "2") (term "0,0"))
(rule "commute_or_2" (formula "2") (term "0,0,0"))
(rule "commute_or" (formula "2") (term "0,0,0,0,0"))
(rule "commute_or_2" (formula "2") (term "0,0,0,0"))
(rule "methodCallUnfoldArguments" (formula "30"))
(rule "variableDeclarationAssign" (formula "30"))
(rule "variableDeclaration" (formula "30") (newnames "var"))
(rule "assignment" (formula "30"))
(rule "variableDeclarationAssign" (formula "30") (term "1"))
(rule "variableDeclaration" (formula "30") (term "1") (newnames "var_1"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "30") (term "1") (inst "#v0=a"))
(rule "variableDeclaration" (formula "30") (term "1") (newnames "a"))
(rule "assignment_read_attribute" (formula "30"))
(branch "Normal Execution (self != null)"
   (builtin "One Step Simplification" (formula "30"))
   (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_get,result,exc,heapAfter_get,anon_heap_get") (contract "ArrayList[ArrayList::get(int)].JML normal_behavior operation contract.0#ArrayList[ArrayList::get(int)].JML normal_behavior operation contract.1"))
   (branch "Post (get)"
      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "23")) (ifInst ""  (formula "6")) (ifInst ""  (formula "23")))
      (builtin "One Step Simplification" (formula "32"))
      (rule "andLeft" (formula "22"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,1,0") (ifseqformula "22"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "27"))
      (rule "notLeft" (formula "26"))
      (rule "eqSymm" (formula "25") (term "1"))
      (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "27"))
      (builtin "One Step Simplification" (formula "24"))
      (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "27"))
      (builtin "One Step Simplification" (formula "26"))
      (rule "notLeft" (formula "26"))
      (rule "orRight" (formula "26"))
      (rule "orRight" (formula "26"))
      (rule "orRight" (formula "26"))
      (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "26"))
      (builtin "One Step Simplification" (formula "25"))
      (rule "inEqSimp_gtRight" (formula "28"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_ltRight" (formula "28"))
      (rule "mul_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_addComm1" (formula "26") (term "0,0"))
      (rule "assignment" (formula "39") (term "1"))
      (builtin "One Step Simplification" (formula "39"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "0,0"))
      (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=arr_0"))
      (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
      (rule "eqSymm" (formula "27") (term "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=ArrayList_elements_0"))
      (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "15")))
      (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "27") (term "1,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "eqSymm" (formula "26") (term "1"))
      (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=ArrayList_collectionSize_0"))
      (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "14")))
      (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (builtin "Use Operation Contract" (formula "38") (newnames "heapBefore_enterElevator,exc_0,heapAfter_enterElevator,anon_heap_enterElevator") (contract "Elevator[Elevator::enterElevator(Person)].JML normal_behavior operation contract.0"))
      (branch "Post (enterElevator)"
         (opengoal "     geq(index, Z(0(#)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & \\forall int i;        (     geq(i, Z(0(#)))            & lt(i, index)            & lt(i,                 int::select(heap,                             ArrayList::select(heap,                                               self,                                               Floor::$waiting),                             ArrayList::$collectionSize))            & !  ArrayList::get(heap,                                ArrayList::select(heap,                                                  self,                                                  Floor::$waiting),                                i)               = null            &   ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = FALSE         ->     ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = TRUE            &   boolean::select(heap,                                boolean[]::select(heap,                                                  e,                                                  Elevator::$floorButtons),                                arr(int::select(heap,                                                ArrayList::get(heap,                                                               ArrayList::select(heap,                                                                                 self,                                                                                 Floor::$waiting),                                                               i),                                                Person::$destination)))              = TRUE)    & lt(index,         ArrayList::size(heap,                         ArrayList::select(heap,                                           self,                                           Floor::$waiting)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)       = null    & !  boolean[]::select(heap,                           e,                           Elevator::$floorButtons)       = null    & !  ArrayList::select(heap, e, Elevator::$persons)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & geq(int::select(heap,                      ArrayList::select(heap,                                        self,                                        Floor::$waiting),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(int::select(heap,                      ArrayList::select(heap,                                        e,                                        Elevator::$persons),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(index, Z(0(#)))    & java.lang.Object::<inv>(heap,                              ArrayList::select(heap,                                                self,                                                Floor::$waiting))    &   boolean::select(heap,                        ArrayList::select(heap,                                          e,                                          Elevator::$persons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        boolean[]::select(heap,                                          e,                                          Elevator::$floorButtons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        Person[]::select(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         ArrayList::$elements),                        java.lang.Object::<created>)      = TRUE    &   ArrayList::exactInstance(ArrayList::select(heap,                                                   self,                                                   Floor::$waiting))      = TRUE    &   boolean::select(heap,                        ArrayList::select(heap,                                          self,                                          Floor::$waiting),                        java.lang.Object::<created>)      = TRUE    & !  ArrayList::select(heap, self, Floor::$waiting)       = null    &   Environment::exactInstance(Environment::select(heap,                                                       self,                                                       Floor::$env))      = TRUE    &   boolean::select(heap,                        Environment::select(heap,                                            self,                                            Floor::$env),                        java.lang.Object::<created>)      = TRUE    & !  Environment::select(heap, self, Floor::$env)       = null    & Elevator::exactInstance(e) = TRUE    &   boolean::select(heap,                        e,                        java.lang.Object::<created>)      = TRUE    & !e = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & Floor::exactInstance(self) = TRUE    & !self = null    & java.lang.Object::<inv>(heap, self)    & wellFormed(heap) -> {heapAtPre:=heap}      \\<{          e.enterElevator(self.waiting.get(index));          index++;        }\\> (  geq(index, Z(0(#)))             & !  Person[]::select(heap,                                   ArrayList::select(heap,                                                     self,                                                     Floor::$waiting),                                   ArrayList::$elements)                = Person[]::select(heap,                                   ArrayList::select(heap,                                                     e,                                                     Elevator::$persons),                                   ArrayList::$elements)             & \\forall int i;                 (     geq(i, Z(0(#)))                     & lt(i, index)                     & lt(i,                          int::select(heap,                                      ArrayList::select(heap,                                                        self,                                                        Floor::$waiting),                                      ArrayList::$collectionSize))                     & !  ArrayList::get(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         i)                        = null                     &   ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = FALSE                  ->     ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = TRUE                     &   boolean::select(heap,                                         boolean[]::select(heap,                                                           e,                                                           Elevator::$floorButtons),                                         arr(int::select(heap,                                                         ArrayList::get(heap,                                                                        ArrayList::select(heap,                                                                                          self,                                                                                          Floor::$waiting),                                                                        i),                                                         Person::$destination)))                       = TRUE)) ")
      )
      (branch "Exceptional Post (enterElevator)"
         (opengoal "     geq(index, Z(0(#)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & \\forall int i;        (     geq(i, Z(0(#)))            & lt(i, index)            & lt(i,                 int::select(heap,                             ArrayList::select(heap,                                               self,                                               Floor::$waiting),                             ArrayList::$collectionSize))            & !  ArrayList::get(heap,                                ArrayList::select(heap,                                                  self,                                                  Floor::$waiting),                                i)               = null            &   ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = FALSE         ->     ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = TRUE            &   boolean::select(heap,                                boolean[]::select(heap,                                                  e,                                                  Elevator::$floorButtons),                                arr(int::select(heap,                                                ArrayList::get(heap,                                                               ArrayList::select(heap,                                                                                 self,                                                                                 Floor::$waiting),                                                               i),                                                Person::$destination)))              = TRUE)    & lt(index,         ArrayList::size(heap,                         ArrayList::select(heap,                                           self,                                           Floor::$waiting)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)       = null    & !  boolean[]::select(heap,                           e,                           Elevator::$floorButtons)       = null    & !  ArrayList::select(heap, e, Elevator::$persons)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & geq(int::select(heap,                      ArrayList::select(heap,                                        self,                                        Floor::$waiting),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(int::select(heap,                      ArrayList::select(heap,                                        e,                                        Elevator::$persons),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(index, Z(0(#)))    & java.lang.Object::<inv>(heap,                              ArrayList::select(heap,                                                self,                                                Floor::$waiting))    &   boolean::select(heap,                        ArrayList::select(heap,                                          e,                                          Elevator::$persons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        boolean[]::select(heap,                                          e,                                          Elevator::$floorButtons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        Person[]::select(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         ArrayList::$elements),                        java.lang.Object::<created>)      = TRUE    &   ArrayList::exactInstance(ArrayList::select(heap,                                                   self,                                                   Floor::$waiting))      = TRUE    &   boolean::select(heap,                        ArrayList::select(heap,                                          self,                                          Floor::$waiting),                        java.lang.Object::<created>)      = TRUE    & !  ArrayList::select(heap, self, Floor::$waiting)       = null    &   Environment::exactInstance(Environment::select(heap,                                                       self,                                                       Floor::$env))      = TRUE    &   boolean::select(heap,                        Environment::select(heap,                                            self,                                            Floor::$env),                        java.lang.Object::<created>)      = TRUE    & !  Environment::select(heap, self, Floor::$env)       = null    & Elevator::exactInstance(e) = TRUE    &   boolean::select(heap,                        e,                        java.lang.Object::<created>)      = TRUE    & !e = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & Floor::exactInstance(self) = TRUE    & !self = null    & java.lang.Object::<inv>(heap, self)    & wellFormed(heap) -> {heapAtPre:=heap}      \\<{          e.enterElevator(self.waiting.get(index));          index++;        }\\> (  geq(index, Z(0(#)))             & !  Person[]::select(heap,                                   ArrayList::select(heap,                                                     self,                                                     Floor::$waiting),                                   ArrayList::$elements)                = Person[]::select(heap,                                   ArrayList::select(heap,                                                     e,                                                     Elevator::$persons),                                   ArrayList::$elements)             & \\forall int i;                 (     geq(i, Z(0(#)))                     & lt(i, index)                     & lt(i,                          int::select(heap,                                      ArrayList::select(heap,                                                        self,                                                        Floor::$waiting),                                      ArrayList::$collectionSize))                     & !  ArrayList::get(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         i)                        = null                     &   ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = FALSE                  ->     ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = TRUE                     &   boolean::select(heap,                                         boolean[]::select(heap,                                                           e,                                                           Elevator::$floorButtons),                                         arr(int::select(heap,                                                         ArrayList::get(heap,                                                                        ArrayList::select(heap,                                                                                          self,                                                                                          Floor::$waiting),                                                                        i),                                                         Person::$destination)))                       = TRUE)) ")
      )
      (branch "Pre (enterElevator)"
         (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "28")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "1,1") (ifseqformula "23"))
         (rule "wellFormedAnonEQ" (formula "38") (term "0,1") (ifseqformula "23"))
         (rule "replace_known_left" (formula "38") (term "1,1") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "21")) (ifInst ""  (formula "22")))
         (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "38") (term "0,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "38") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "38") (term "0,1,0,0,0"))
         (rule "pullOutSelect" (formula "38") (term "0,0,1,0,0,0,0,0,0") (inst "selectSK=ArrayList_elements_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "pullOutSelect" (formula "39") (term "0,1,0,0,0,0") (inst "selectSK=Person_destination_0"))
         (rule "applyEq" (formula "40") (term "1,1,1,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "40") (term "0,1") (inst "selectSK=Elevator_weight_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "20")))
         (rule "applyEqReverse" (formula "41") (term "0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "40") (term "0,0,1,0,0,0,0,0") (inst "selectSK=Elevator_floorButtons_0"))
         (rule "applyEq" (formula "41") (term "0,0,1,0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")) (ifInst ""  (formula "20")))
         (rule "applyEqReverse" (formula "41") (term "0,0,1,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "41") (term "0,0,1,0,0,0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "40") (term "0,1,0,0,0,0,0") (ifseqformula "33"))
         (builtin "One Step Simplification" (formula "40"))
         (rule "pullOutSelect" (formula "2") (term "0,0,0,0,0") (inst "selectSK=Elevator_persons_0"))
         (rule "applyEq" (formula "41") (term "0,0,0,0,0,0,0,0") (ifseqformula "2"))
         (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "2"))
         (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
         (rule "applyEq" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
         (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "26"))
         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "39")) (ifInst ""  (formula "20")))
         (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "41") (term "0,0,0,0,0,0,0,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "replace_known_left" (formula "2") (term "0,1,0,0") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "34")))
         (rule "applyEqReverse" (formula "40") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "replace_known_right" (formula "39") (term "0,0,0,0,0,0,0") (ifseqformula "33"))
         (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "31")))
         (rule "pullOutSelect" (formula "39") (term "0,1,0,0") (inst "selectSK=Person_weight_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "commute_and_2" (formula "40"))
         (rule "commute_and_2" (formula "40") (term "0,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "35") (term "1") (ifseqformula "23"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "33"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,0") (ifseqformula "24"))
         (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "38"))
         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "17")))
         (rule "true_left" (formula "8"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0") (ifseqformula "24"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "36"))
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")))
         (rule "true_left" (formula "12"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "24"))
         (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "35"))
         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
         (rule "true_left" (formula "13"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,0") (ifseqformula "24"))
         (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "39"))
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "19")))
         (rule "true_left" (formula "17"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "24"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "33"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
         (rule "true_left" (formula "1"))
         (rule "ifthenelse_split" (formula "3") (term "0"))
         (branch "result.<created> = TRUE TRUE"
            (rule "applyEqReverse" (formula "42") (term "1,1,1,0,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "42") (term "0,0,0,0,0") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "applyEqReverse" (formula "41") (term "0,1,0,0,0") (ifseqformula "2"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "39") (term "0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
            (rule "commute_and_2" (formula "39") (term "0"))
            (rule "commute_and_2" (formula "39") (term "0,0"))
            (rule "commute_and_2" (formula "39") (term "0"))
            (rule "commute_and" (formula "39") (term "0,0,0"))
            (rule "cut_direct" (formula "27") (term "0"))
            (branch "CUT: self.waiting.collectionSize >= 1 + index TRUE"
               (builtin "One Step Simplification" (formula "28"))
               (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "27"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "cut_direct" (formula "38") (term "1"))
               (branch "CUT: result.getWeight()@heapAfter_get >= 0 TRUE"
                  (opengoal "     geq(index, Z(0(#)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & \\forall int i;        (     geq(i, Z(0(#)))            & lt(i, index)            & lt(i,                 int::select(heap,                             ArrayList::select(heap,                                               self,                                               Floor::$waiting),                             ArrayList::$collectionSize))            & !  ArrayList::get(heap,                                ArrayList::select(heap,                                                  self,                                                  Floor::$waiting),                                i)               = null            &   ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = FALSE         ->     ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = TRUE            &   boolean::select(heap,                                boolean[]::select(heap,                                                  e,                                                  Elevator::$floorButtons),                                arr(int::select(heap,                                                ArrayList::get(heap,                                                               ArrayList::select(heap,                                                                                 self,                                                                                 Floor::$waiting),                                                               i),                                                Person::$destination)))              = TRUE)    & lt(index,         ArrayList::size(heap,                         ArrayList::select(heap,                                           self,                                           Floor::$waiting)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)       = null    & !  boolean[]::select(heap,                           e,                           Elevator::$floorButtons)       = null    & !  ArrayList::select(heap, e, Elevator::$persons)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & geq(int::select(heap,                      ArrayList::select(heap,                                        self,                                        Floor::$waiting),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(int::select(heap,                      ArrayList::select(heap,                                        e,                                        Elevator::$persons),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(index, Z(0(#)))    & java.lang.Object::<inv>(heap,                              ArrayList::select(heap,                                                self,                                                Floor::$waiting))    &   boolean::select(heap,                        ArrayList::select(heap,                                          e,                                          Elevator::$persons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        boolean[]::select(heap,                                          e,                                          Elevator::$floorButtons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        Person[]::select(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         ArrayList::$elements),                        java.lang.Object::<created>)      = TRUE    &   ArrayList::exactInstance(ArrayList::select(heap,                                                   self,                                                   Floor::$waiting))      = TRUE    &   boolean::select(heap,                        ArrayList::select(heap,                                          self,                                          Floor::$waiting),                        java.lang.Object::<created>)      = TRUE    & !  ArrayList::select(heap, self, Floor::$waiting)       = null    &   Environment::exactInstance(Environment::select(heap,                                                       self,                                                       Floor::$env))      = TRUE    &   boolean::select(heap,                        Environment::select(heap,                                            self,                                            Floor::$env),                        java.lang.Object::<created>)      = TRUE    & !  Environment::select(heap, self, Floor::$env)       = null    & Elevator::exactInstance(e) = TRUE    &   boolean::select(heap,                        e,                        java.lang.Object::<created>)      = TRUE    & !e = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & Floor::exactInstance(self) = TRUE    & !self = null    & java.lang.Object::<inv>(heap, self)    & wellFormed(heap) -> {heapAtPre:=heap}      \\<{          e.enterElevator(self.waiting.get(index));          index++;        }\\> (  geq(index, Z(0(#)))             & !  Person[]::select(heap,                                   ArrayList::select(heap,                                                     self,                                                     Floor::$waiting),                                   ArrayList::$elements)                = Person[]::select(heap,                                   ArrayList::select(heap,                                                     e,                                                     Elevator::$persons),                                   ArrayList::$elements)             & \\forall int i;                 (     geq(i, Z(0(#)))                     & lt(i, index)                     & lt(i,                          int::select(heap,                                      ArrayList::select(heap,                                                        self,                                                        Floor::$waiting),                                      ArrayList::$collectionSize))                     & !  ArrayList::get(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         i)                        = null                     &   ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = FALSE                  ->     ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = TRUE                     &   boolean::select(heap,                                         boolean[]::select(heap,                                                           e,                                                           Elevator::$floorButtons),                                         arr(int::select(heap,                                                         ArrayList::get(heap,                                                                        ArrayList::select(heap,                                                                                          self,                                                                                          Floor::$waiting),                                                                        i),                                                         Person::$destination)))                       = TRUE)) ")
               )
               (branch "CUT: result.getWeight()@heapAfter_get >= 0 FALSE"
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "false_right" (formula "39"))
                  (rule "inEqSimp_geqRight" (formula "38"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "23"))
                  (rule "applyEq" (formula "28") (term "1,0,1") (ifseqformula "29"))
                  (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (builtin "Evaluate Query" (formula "6") (term "0") (newnames "callee,queryResult_7,res_size_7"))
                  (rule "replaceKnownQuery_ArrayList_size(heap,ArrayList_select(heap,self,Floor_waiting))_100200_18" (formula "7") (term "0"))
                  (rule "notLeft" (formula "1"))
                  (rule "eqSymm" (formula "29") (term "0,0,1"))
                  (rule "variableDeclaration" (formula "29") (term "1") (newnames "queryResult_7"))
                  (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_size_7,result_8,exc_9,heapAfter_size_7,anon_heap_size_7") (contract "ArrayList[ArrayList::size()].JML normal_behavior operation contract.0#ArrayList[ArrayList::size()].JML normal_behavior operation contract.1"))
                  (branch "Post (size)"
                     (builtin "One Step Simplification" (formula "31"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "31"))
                     (rule "andLeft" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "andLeft" (formula "33"))
                     (rule "eqSymm" (formula "32") (term "1"))
                     (rule "inEqSimp_gtToGeq" (formula "33") (term "0"))
                     (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                     (rule "add_literals" (formula "33") (term "0,0,0"))
                     (rule "assignment" (formula "34") (term "1"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0"))
                     (rule "mul_literals" (formula "33") (term "1,0"))
                     (rule "pullOutSelect" (formula "32") (term "0,0,0") (inst "selectSK=ArrayList_collectionSize_9"))
                     (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "32"))
                     (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "32"))
                     (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "32"))
                     (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "30"))
                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "42")) (ifInst ""  (formula "15")))
                     (rule "applyEqReverse" (formula "33") (term "0,0,0") (ifseqformula "32"))
                     (rule "applyEqReverse" (formula "33") (term "0,1") (ifseqformula "32"))
                     (rule "applyEqReverse" (formula "34") (term "0,0") (ifseqformula "32"))
                     (rule "applyEqReverse" (formula "33") (term "0,1,0") (ifseqformula "32"))
                     (rule "hideAuxiliaryEq" (formula "32"))
                     (rule "replace_known_left" (formula "32") (term "1,0") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "methodCallEmpty" (formula "34") (term "1"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "emptyModality" (formula "34") (term "1"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "notRight" (formula "34"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "33") (term "1,1") (ifseqformula "1"))
                     (rule "cut_direct" (formula "34") (term "0"))
                     (branch "CUT: self.waiting.collectionSize >= 2147483648 TRUE"
                        (opengoal "     geq(index, Z(0(#)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & \\forall int i;        (     geq(i, Z(0(#)))            & lt(i, index)            & lt(i,                 int::select(heap,                             ArrayList::select(heap,                                               self,                                               Floor::$waiting),                             ArrayList::$collectionSize))            & !  ArrayList::get(heap,                                ArrayList::select(heap,                                                  self,                                                  Floor::$waiting),                                i)               = null            &   ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = FALSE         ->     ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = TRUE            &   boolean::select(heap,                                boolean[]::select(heap,                                                  e,                                                  Elevator::$floorButtons),                                arr(int::select(heap,                                                ArrayList::get(heap,                                                               ArrayList::select(heap,                                                                                 self,                                                                                 Floor::$waiting),                                                               i),                                                Person::$destination)))              = TRUE)    & lt(index,         ArrayList::size(heap,                         ArrayList::select(heap,                                           self,                                           Floor::$waiting)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)       = null    & !  boolean[]::select(heap,                           e,                           Elevator::$floorButtons)       = null    & !  ArrayList::select(heap, e, Elevator::$persons)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & geq(int::select(heap,                      ArrayList::select(heap,                                        self,                                        Floor::$waiting),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(int::select(heap,                      ArrayList::select(heap,                                        e,                                        Elevator::$persons),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(index, Z(0(#)))    & java.lang.Object::<inv>(heap,                              ArrayList::select(heap,                                                self,                                                Floor::$waiting))    &   boolean::select(heap,                        ArrayList::select(heap,                                          e,                                          Elevator::$persons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        boolean[]::select(heap,                                          e,                                          Elevator::$floorButtons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        Person[]::select(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         ArrayList::$elements),                        java.lang.Object::<created>)      = TRUE    &   ArrayList::exactInstance(ArrayList::select(heap,                                                   self,                                                   Floor::$waiting))      = TRUE    &   boolean::select(heap,                        ArrayList::select(heap,                                          self,                                          Floor::$waiting),                        java.lang.Object::<created>)      = TRUE    & !  ArrayList::select(heap, self, Floor::$waiting)       = null    &   Environment::exactInstance(Environment::select(heap,                                                       self,                                                       Floor::$env))      = TRUE    &   boolean::select(heap,                        Environment::select(heap,                                            self,                                            Floor::$env),                        java.lang.Object::<created>)      = TRUE    & !  Environment::select(heap, self, Floor::$env)       = null    & Elevator::exactInstance(e) = TRUE    &   boolean::select(heap,                        e,                        java.lang.Object::<created>)      = TRUE    & !e = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & Floor::exactInstance(self) = TRUE    & !self = null    & java.lang.Object::<inv>(heap, self)    & wellFormed(heap) -> {heapAtPre:=heap}      \\<{          e.enterElevator(self.waiting.get(index));          index++;        }\\> (  geq(index, Z(0(#)))             & !  Person[]::select(heap,                                   ArrayList::select(heap,                                                     self,                                                     Floor::$waiting),                                   ArrayList::$elements)                = Person[]::select(heap,                                   ArrayList::select(heap,                                                     e,                                                     Elevator::$persons),                                   ArrayList::$elements)             & \\forall int i;                 (     geq(i, Z(0(#)))                     & lt(i, index)                     & lt(i,                          int::select(heap,                                      ArrayList::select(heap,                                                        self,                                                        Floor::$waiting),                                      ArrayList::$collectionSize))                     & !  ArrayList::get(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         i)                        = null                     &   ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = FALSE                  ->     ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = TRUE                     &   boolean::select(heap,                                         boolean[]::select(heap,                                                           e,                                                           Elevator::$floorButtons),                                         arr(int::select(heap,                                                         ArrayList::get(heap,                                                                        ArrayList::select(heap,                                                                                          self,                                                                                          Floor::$waiting),                                                                        i),                                                         Person::$destination)))                       = TRUE)) ")
                     )
                     (branch "CUT: self.waiting.collectionSize >= 2147483648 FALSE"
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "inEqSimp_geqRight" (formula "34"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "34"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "34"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "34"))
                        (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "33"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "polySimp_elimOne" (formula "8") (term "0"))
                        (builtin "Evaluate Query" (formula "3") (term "0") (newnames "callee,queryResult_8,res_getWeight"))
                        (rule "replaceKnownQuery_Person_getWeight(heapAfter_get,result)_10100200_21" (formula "4") (term "0"))
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "35") (term "0,0,1"))
                        (rule "variableDeclaration" (formula "35") (term "1") (newnames "queryResult_8"))
                        (builtin "Use Operation Contract" (formula "35") (newnames "heapBefore_getWeight,result_9,exc_10,heapAfter_getWeight,anon_heap_getWeight") (contract "Person[Person::getWeight()].JML normal_behavior operation contract.0"))
                        (branch "Post (getWeight)"
                           (opengoal "     geq(index, Z(0(#)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & \\forall int i;        (     geq(i, Z(0(#)))            & lt(i, index)            & lt(i,                 int::select(heap,                             ArrayList::select(heap,                                               self,                                               Floor::$waiting),                             ArrayList::$collectionSize))            & !  ArrayList::get(heap,                                ArrayList::select(heap,                                                  self,                                                  Floor::$waiting),                                i)               = null            &   ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = FALSE         ->     ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = TRUE            &   boolean::select(heap,                                boolean[]::select(heap,                                                  e,                                                  Elevator::$floorButtons),                                arr(int::select(heap,                                                ArrayList::get(heap,                                                               ArrayList::select(heap,                                                                                 self,                                                                                 Floor::$waiting),                                                               i),                                                Person::$destination)))              = TRUE)    & lt(index,         ArrayList::size(heap,                         ArrayList::select(heap,                                           self,                                           Floor::$waiting)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)       = null    & !  boolean[]::select(heap,                           e,                           Elevator::$floorButtons)       = null    & !  ArrayList::select(heap, e, Elevator::$persons)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & geq(int::select(heap,                      ArrayList::select(heap,                                        self,                                        Floor::$waiting),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(int::select(heap,                      ArrayList::select(heap,                                        e,                                        Elevator::$persons),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(index, Z(0(#)))    & java.lang.Object::<inv>(heap,                              ArrayList::select(heap,                                                self,                                                Floor::$waiting))    &   boolean::select(heap,                        ArrayList::select(heap,                                          e,                                          Elevator::$persons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        boolean[]::select(heap,                                          e,                                          Elevator::$floorButtons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        Person[]::select(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         ArrayList::$elements),                        java.lang.Object::<created>)      = TRUE    &   ArrayList::exactInstance(ArrayList::select(heap,                                                   self,                                                   Floor::$waiting))      = TRUE    &   boolean::select(heap,                        ArrayList::select(heap,                                          self,                                          Floor::$waiting),                        java.lang.Object::<created>)      = TRUE    & !  ArrayList::select(heap, self, Floor::$waiting)       = null    &   Environment::exactInstance(Environment::select(heap,                                                       self,                                                       Floor::$env))      = TRUE    &   boolean::select(heap,                        Environment::select(heap,                                            self,                                            Floor::$env),                        java.lang.Object::<created>)      = TRUE    & !  Environment::select(heap, self, Floor::$env)       = null    & Elevator::exactInstance(e) = TRUE    &   boolean::select(heap,                        e,                        java.lang.Object::<created>)      = TRUE    & !e = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & Floor::exactInstance(self) = TRUE    & !self = null    & java.lang.Object::<inv>(heap, self)    & wellFormed(heap) -> {heapAtPre:=heap}      \\<{          e.enterElevator(self.waiting.get(index));          index++;        }\\> (  geq(index, Z(0(#)))             & !  Person[]::select(heap,                                   ArrayList::select(heap,                                                     self,                                                     Floor::$waiting),                                   ArrayList::$elements)                = Person[]::select(heap,                                   ArrayList::select(heap,                                                     e,                                                     Elevator::$persons),                                   ArrayList::$elements)             & \\forall int i;                 (     geq(i, Z(0(#)))                     & lt(i, index)                     & lt(i,                          int::select(heap,                                      ArrayList::select(heap,                                                        self,                                                        Floor::$waiting),                                      ArrayList::$collectionSize))                     & !  ArrayList::get(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         i)                        = null                     &   ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = FALSE                  ->     ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = TRUE                     &   boolean::select(heap,                                         boolean[]::select(heap,                                                           e,                                                           Elevator::$floorButtons),                                         arr(int::select(heap,                                                         ArrayList::get(heap,                                                                        ArrayList::select(heap,                                                                                          self,                                                                                          Floor::$waiting),                                                                        i),                                                         Person::$destination)))                       = TRUE)) ")
                        )
                        (branch "Exceptional Post (getWeight)"
                           (opengoal "     geq(index, Z(0(#)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & \\forall int i;        (     geq(i, Z(0(#)))            & lt(i, index)            & lt(i,                 int::select(heap,                             ArrayList::select(heap,                                               self,                                               Floor::$waiting),                             ArrayList::$collectionSize))            & !  ArrayList::get(heap,                                ArrayList::select(heap,                                                  self,                                                  Floor::$waiting),                                i)               = null            &   ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = FALSE         ->     ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = TRUE            &   boolean::select(heap,                                boolean[]::select(heap,                                                  e,                                                  Elevator::$floorButtons),                                arr(int::select(heap,                                                ArrayList::get(heap,                                                               ArrayList::select(heap,                                                                                 self,                                                                                 Floor::$waiting),                                                               i),                                                Person::$destination)))              = TRUE)    & lt(index,         ArrayList::size(heap,                         ArrayList::select(heap,                                           self,                                           Floor::$waiting)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)       = null    & !  boolean[]::select(heap,                           e,                           Elevator::$floorButtons)       = null    & !  ArrayList::select(heap, e, Elevator::$persons)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & geq(int::select(heap,                      ArrayList::select(heap,                                        self,                                        Floor::$waiting),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(int::select(heap,                      ArrayList::select(heap,                                        e,                                        Elevator::$persons),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(index, Z(0(#)))    & java.lang.Object::<inv>(heap,                              ArrayList::select(heap,                                                self,                                                Floor::$waiting))    &   boolean::select(heap,                        ArrayList::select(heap,                                          e,                                          Elevator::$persons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        boolean[]::select(heap,                                          e,                                          Elevator::$floorButtons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        Person[]::select(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         ArrayList::$elements),                        java.lang.Object::<created>)      = TRUE    &   ArrayList::exactInstance(ArrayList::select(heap,                                                   self,                                                   Floor::$waiting))      = TRUE    &   boolean::select(heap,                        ArrayList::select(heap,                                          self,                                          Floor::$waiting),                        java.lang.Object::<created>)      = TRUE    & !  ArrayList::select(heap, self, Floor::$waiting)       = null    &   Environment::exactInstance(Environment::select(heap,                                                       self,                                                       Floor::$env))      = TRUE    &   boolean::select(heap,                        Environment::select(heap,                                            self,                                            Floor::$env),                        java.lang.Object::<created>)      = TRUE    & !  Environment::select(heap, self, Floor::$env)       = null    & Elevator::exactInstance(e) = TRUE    &   boolean::select(heap,                        e,                        java.lang.Object::<created>)      = TRUE    & !e = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & Floor::exactInstance(self) = TRUE    & !self = null    & java.lang.Object::<inv>(heap, self)    & wellFormed(heap) -> {heapAtPre:=heap}      \\<{          e.enterElevator(self.waiting.get(index));          index++;        }\\> (  geq(index, Z(0(#)))             & !  Person[]::select(heap,                                   ArrayList::select(heap,                                                     self,                                                     Floor::$waiting),                                   ArrayList::$elements)                = Person[]::select(heap,                                   ArrayList::select(heap,                                                     e,                                                     Elevator::$persons),                                   ArrayList::$elements)             & \\forall int i;                 (     geq(i, Z(0(#)))                     & lt(i, index)                     & lt(i,                          int::select(heap,                                      ArrayList::select(heap,                                                        self,                                                        Floor::$waiting),                                      ArrayList::$collectionSize))                     & !  ArrayList::get(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         i)                        = null                     &   ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = FALSE                  ->     ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = TRUE                     &   boolean::select(heap,                                         boolean[]::select(heap,                                                           e,                                                           Elevator::$floorButtons),                                         arr(int::select(heap,                                                         ArrayList::get(heap,                                                                        ArrayList::select(heap,                                                                                          self,                                                                                          Floor::$waiting),                                                                        i),                                                         Person::$destination)))                       = TRUE)) ")
                        )
                        (branch "Pre (getWeight)"
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "wellFormedAnonEQ" (formula "35") (term "1") (ifseqformula "28"))
                           (rule "replaceKnownSelect_taclet200_15" (formula "35") (term "0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0200_17" (formula "35") (term "0,0"))
                           (rule "replace_known_left" (formula "35") (term "1,1") (ifseqformula "27"))
                           (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "26")))
                           (rule "inEqSimp_geqRight" (formula "35"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (opengoal "     geq(index, Z(0(#)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & \\forall int i;        (     geq(i, Z(0(#)))            & lt(i, index)            & lt(i,                 int::select(heap,                             ArrayList::select(heap,                                               self,                                               Floor::$waiting),                             ArrayList::$collectionSize))            & !  ArrayList::get(heap,                                ArrayList::select(heap,                                                  self,                                                  Floor::$waiting),                                i)               = null            &   ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = FALSE         ->     ArrayList::contains(heap,                                    ArrayList::select(heap,                                                      e,                                                      Elevator::$persons),                                    ArrayList::get(heap,                                                   ArrayList::select(heap,                                                                     self,                                                                     Floor::$waiting),                                                   i))              = TRUE            &   boolean::select(heap,                                boolean[]::select(heap,                                                  e,                                                  Elevator::$floorButtons),                                arr(int::select(heap,                                                ArrayList::get(heap,                                                               ArrayList::select(heap,                                                                                 self,                                                                                 Floor::$waiting),                                                               i),                                                Person::$destination)))              = TRUE)    & lt(index,         ArrayList::size(heap,                         ArrayList::select(heap,                                           self,                                           Floor::$waiting)))    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)       = null    & !  boolean[]::select(heap,                           e,                           Elevator::$floorButtons)       = null    & !  ArrayList::select(heap, e, Elevator::$persons)       = null    & !  Person[]::select(heap,                          ArrayList::select(heap,                                            self,                                            Floor::$waiting),                          ArrayList::$elements)       = Person[]::select(heap,                          ArrayList::select(heap,                                            e,                                            Elevator::$persons),                          ArrayList::$elements)    & geq(int::select(heap,                      ArrayList::select(heap,                                        self,                                        Floor::$waiting),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(int::select(heap,                      ArrayList::select(heap,                                        e,                                        Elevator::$persons),                      ArrayList::$collectionSize),          Z(0(#)))    & geq(index, Z(0(#)))    & java.lang.Object::<inv>(heap,                              ArrayList::select(heap,                                                self,                                                Floor::$waiting))    &   boolean::select(heap,                        ArrayList::select(heap,                                          e,                                          Elevator::$persons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        boolean[]::select(heap,                                          e,                                          Elevator::$floorButtons),                        java.lang.Object::<created>)      = TRUE    &   boolean::select(heap,                        Person[]::select(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         ArrayList::$elements),                        java.lang.Object::<created>)      = TRUE    &   ArrayList::exactInstance(ArrayList::select(heap,                                                   self,                                                   Floor::$waiting))      = TRUE    &   boolean::select(heap,                        ArrayList::select(heap,                                          self,                                          Floor::$waiting),                        java.lang.Object::<created>)      = TRUE    & !  ArrayList::select(heap, self, Floor::$waiting)       = null    &   Environment::exactInstance(Environment::select(heap,                                                       self,                                                       Floor::$env))      = TRUE    &   boolean::select(heap,                        Environment::select(heap,                                            self,                                            Floor::$env),                        java.lang.Object::<created>)      = TRUE    & !  Environment::select(heap, self, Floor::$env)       = null    & Elevator::exactInstance(e) = TRUE    &   boolean::select(heap,                        e,                        java.lang.Object::<created>)      = TRUE    & !e = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & Floor::exactInstance(self) = TRUE    & !self = null    & java.lang.Object::<inv>(heap, self)    & wellFormed(heap) -> {heapAtPre:=heap}      \\<{          e.enterElevator(self.waiting.get(index));          index++;        }\\> (  geq(index, Z(0(#)))             & !  Person[]::select(heap,                                   ArrayList::select(heap,                                                     self,                                                     Floor::$waiting),                                   ArrayList::$elements)                = Person[]::select(heap,                                   ArrayList::select(heap,                                                     e,                                                     Elevator::$persons),                                   ArrayList::$elements)             & \\forall int i;                 (     geq(i, Z(0(#)))                     & lt(i, index)                     & lt(i,                          int::select(heap,                                      ArrayList::select(heap,                                                        self,                                                        Floor::$waiting),                                      ArrayList::$collectionSize))                     & !  ArrayList::get(heap,                                         ArrayList::select(heap,                                                           self,                                                           Floor::$waiting),                                         i)                        = null                     &   ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = FALSE                  ->     ArrayList::contains(heap,                                             ArrayList::select(heap,                                                               e,                                                               Elevator::$persons),                                             ArrayList::get(heap,                                                            ArrayList::select(heap,                                                                              self,                                                                              Floor::$waiting),                                                            i))                       = TRUE                     &   boolean::select(heap,                                         boolean[]::select(heap,                                                           e,                                                           Elevator::$floorButtons),                                         arr(int::select(heap,                                                         ArrayList::get(heap,                                                                        ArrayList::select(heap,                                                                                          self,                                                                                          Floor::$waiting),                                                                        i),                                                         Person::$destination)))                       = TRUE)) ")
                        )
                        (branch "Null reference (callee = null)"
                           (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "36")))
                           (rule "closeTrue" (formula "35"))
                        )
                     )
                  )
                  (branch "Exceptional Post (size)"
                     (builtin "One Step Simplification" (formula "31"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "1,0") (ifseqformula "30"))
                     (rule "andLeft" (formula "31"))
                     (rule "andLeft" (formula "31"))
                     (rule "andLeft" (formula "33"))
                     (rule "notLeft" (formula "31"))
                     (rule "andLeft" (formula "33"))
                     (rule "close" (formula "35") (ifseqformula "34"))
                  )
                  (branch "Pre (size)"
                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "23")))
                     (rule "closeTrue" (formula "29"))
                  )
                  (branch "Null reference (callee = null)"
                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "36")))
                     (rule "closeTrue" (formula "29"))
                  )
               )
            )
            (branch "CUT: self.waiting.collectionSize >= 1 + index FALSE"
               (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "inEqSimp_geqRight" (formula "27"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
               (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "4"))
               (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "1,0"))
               (rule "times_zero_1" (formula "5") (term "0"))
               (rule "leq_literals" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "cut_direct" (formula "37") (term "1"))
               (branch "CUT: result.getWeight()@heapAfter_get >= 0 TRUE"
                  (builtin "One Step Simplification" (formula "38"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "23"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "cut_direct" (formula "39") (term "1,0,0"))
                  (branch "CUT: result.destination >= 0 TRUE"
                     (builtin "One Step Simplification" (formula "40"))
                     (rule "cut_direct" (formula "40") (term "0,0"))
                     (branch "CUT: e.weight >= 0 TRUE"
                        (builtin "One Step Simplification" (formula "41"))
                        (rule "arrayLengthIsAnInt" (formula "41") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "arrayLengthNotNegative" (formula "41") (term "1,1,0"))
                        (rule "cut_direct" (formula "42") (term "1"))
                        (branch "CUT: result.weight >= 0 TRUE"
                           (builtin "One Step Simplification" (formula "43"))
                           (rule "inEqSimp_leqRight" (formula "43"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (builtin "Evaluate Query" (formula "13") (term "0") (newnames "callee,queryResult_6,res_size_6"))
                           (rule "replaceKnownQuery_ArrayList_size(heap,ArrayList_select(heap,self,Floor_waiting))_000010200_18" (formula "14") (term "0"))
                           (rule "notLeft" (formula "1"))
                           (rule "eqSymm" (formula "33") (term "0,0,1"))
                           (rule "variableDeclaration" (formula "33") (term "1") (newnames "queryResult_6"))
                           (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_size_6,result_7,exc_8,heapAfter_size_6,anon_heap_size_6") (contract "ArrayList[ArrayList::size()].JML normal_behavior operation contract.0#ArrayList[ArrayList::size()].JML normal_behavior operation contract.1"))
                           (branch "Post (size)"
                              (builtin "One Step Simplification" (formula "34"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "andLeft" (formula "34"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "37"))
                              (rule "andLeft" (formula "36"))
                              (rule "eqSymm" (formula "36") (term "1"))
                              (rule "inEqSimp_gtToGeq" (formula "37") (term "0"))
                              (rule "mul_literals" (formula "37") (term "1,0,0,0"))
                              (rule "add_literals" (formula "37") (term "0,0,0"))
                              (rule "assignment" (formula "38") (term "1"))
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0"))
                              (rule "mul_literals" (formula "37") (term "1,0"))
                              (rule "pullOutSelect" (formula "36") (term "0,1,0") (inst "selectSK=ArrayList_collectionSize_8"))
                              (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "36"))
                              (rule "applyEq" (formula "37") (term "0,0,0") (ifseqformula "36"))
                              (rule "applyEq" (formula "37") (term "0,1") (ifseqformula "36"))
                              (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "34"))
                              (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "47")) (ifInst ""  (formula "21")))
                              (rule "applyEqReverse" (formula "37") (term "0,1,0") (ifseqformula "36"))
                              (rule "applyEqReverse" (formula "38") (term "0,0") (ifseqformula "36"))
                              (rule "applyEqReverse" (formula "37") (term "0,0,0") (ifseqformula "36"))
                              (rule "applyEqReverse" (formula "37") (term "0,1") (ifseqformula "36"))
                              (rule "hideAuxiliaryEq" (formula "36"))
                              (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "36") (term "1,0") (ifseqformula "15"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0,1") (ifseqformula "10"))
                              (rule "eqSymm" (formula "36") (term "1"))
                              (rule "methodCallEmpty" (formula "38") (term "1"))
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "emptyModality" (formula "38") (term "1"))
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "notRight" (formula "38"))
                              (rule "eqSymm" (formula "1"))
                              (rule "applyEq" (formula "38") (term "0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "37") (term "0,1") (ifseqformula "1"))
                              (rule "inEqSimp_contradEq7" (formula "37") (term "1") (ifseqformula "14"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                              (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "37") (term "0,0,1"))
                              (rule "leq_literals" (formula "37") (term "0,1"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "notLeft" (formula "37"))
                              (rule "inEqSimp_leqRight" (formula "38"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "38"))
                              (rule "inEqSimp_homoInEq1" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0"))
                              (rule "add_literals" (formula "15") (term "0,0"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "38"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "1"))
                              (rule "leq_literals" (formula "17") (term "0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Exceptional Post (size)"
                              (builtin "One Step Simplification" (formula "34"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "andLeft" (formula "34"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "1,0") (ifseqformula "34"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "37"))
                              (rule "notLeft" (formula "35"))
                              (rule "andLeft" (formula "37"))
                              (rule "close" (formula "39") (ifseqformula "38"))
                           )
                           (branch "Pre (size)"
                              (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "29")))
                              (rule "closeTrue" (formula "33"))
                           )
                           (branch "Null reference (callee = null)"
                              (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "41")))
                              (rule "closeTrue" (formula "33"))
                           )
                        )
                        (branch "CUT: result.weight >= 0 FALSE"
                           (builtin "One Step Simplification" (formula "43"))
                           (rule "false_right" (formula "43"))
                           (rule "inEqSimp_geqRight" (formula "42"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (builtin "Evaluate Query" (formula "12") (term "0") (newnames "callee,queryResult_5,res_size_5"))
                           (rule "replaceKnownQuery_ArrayList_size(heap,ArrayList_select(heap,self,Floor_waiting))_100010200_18" (formula "13") (term "0"))
                           (rule "notLeft" (formula "1"))
                           (rule "eqSymm" (formula "32") (term "0,0,1"))
                           (rule "variableDeclaration" (formula "32") (term "1") (newnames "queryResult_5"))
                           (builtin "Use Operation Contract" (formula "32") (newnames "heapBefore_size_5,result_6,exc_7,heapAfter_size_5,anon_heap_size_5") (contract "ArrayList[ArrayList::size()].JML normal_behavior operation contract.0#ArrayList[ArrayList::size()].JML normal_behavior operation contract.1"))
                           (branch "Post (size)"
                              (builtin "One Step Simplification" (formula "34"))
                              (builtin "One Step Simplification" (formula "33"))
                              (rule "andLeft" (formula "33"))
                              (rule "andLeft" (formula "34"))
                              (rule "andLeft" (formula "35"))
                              (rule "andLeft" (formula "36"))
                              (rule "andLeft" (formula "35"))
                              (rule "eqSymm" (formula "35") (term "1"))
                              (rule "inEqSimp_gtToGeq" (formula "36") (term "0"))
                              (rule "mul_literals" (formula "36") (term "1,0,0,0"))
                              (rule "add_literals" (formula "36") (term "0,0,0"))
                              (rule "assignment" (formula "37") (term "1"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0"))
                              (rule "mul_literals" (formula "36") (term "1,0"))
                              (rule "pullOutSelect" (formula "35") (term "0,1,0") (inst "selectSK=ArrayList_collectionSize_7"))
                              (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "35"))
                              (rule "applyEq" (formula "36") (term "0,1") (ifseqformula "35"))
                              (rule "applyEq" (formula "36") (term "0,0,0") (ifseqformula "35"))
                              (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "46")) (ifInst ""  (formula "20")))
                              (rule "applyEqReverse" (formula "36") (term "0,1,0") (ifseqformula "35"))
                              (rule "applyEqReverse" (formula "37") (term "0,0") (ifseqformula "35"))
                              (rule "applyEqReverse" (formula "36") (term "0,1") (ifseqformula "35"))
                              (rule "applyEqReverse" (formula "36") (term "0,0,0") (ifseqformula "35"))
                              (rule "hideAuxiliaryEq" (formula "35"))
                              (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0,0,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "9"))
                              (rule "eqSymm" (formula "35") (term "1"))
                              (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "9"))
                              (rule "replace_known_left" (formula "35") (term "1,0") (ifseqformula "14"))
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "methodCallEmpty" (formula "37") (term "1"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "emptyModality" (formula "37") (term "1"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "notRight" (formula "37"))
                              (rule "eqSymm" (formula "1"))
                              (rule "applyEq" (formula "37") (term "0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "36") (term "0,1") (ifseqformula "1"))
                              (rule "inEqSimp_contradEq7" (formula "36") (term "1") (ifseqformula "13"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                              (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "36") (term "0,0,1"))
                              (rule "leq_literals" (formula "36") (term "0,1"))
                              (builtin "One Step Simplification" (formula "36"))
                              (rule "notLeft" (formula "36"))
                              (rule "inEqSimp_leqRight" (formula "37"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "applyEq" (formula "14") (term "0") (ifseqformula "37"))
                              (rule "inEqSimp_homoInEq1" (formula "14"))
                              (rule "mul_literals" (formula "14") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0"))
                              (rule "add_literals" (formula "14") (term "0,0"))
                              (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "37"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                              (rule "mul_literals" (formula "14") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
                              (rule "leq_literals" (formula "16") (term "0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "14"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Exceptional Post (size)"
                              (builtin "One Step Simplification" (formula "33"))
                              (builtin "One Step Simplification" (formula "34"))
                              (rule "andLeft" (formula "33"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "1,0") (ifseqformula "33"))
                              (rule "andLeft" (formula "34"))
                              (rule "andLeft" (formula "34"))
                              (rule "andLeft" (formula "36"))
                              (rule "notLeft" (formula "34"))
                              (rule "andLeft" (formula "36"))
                              (rule "close" (formula "38") (ifseqformula "37"))
                           )
                           (branch "Pre (size)"
                              (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "28")))
                              (rule "closeTrue" (formula "32"))
                           )
                           (branch "Null reference (callee = null)"
                              (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "40")))
                              (rule "closeTrue" (formula "32"))
                           )
                        )
                     )
                     (branch "CUT: e.weight >= 0 FALSE"
                        (builtin "One Step Simplification" (formula "41"))
                        (rule "false_right" (formula "41"))
                        (rule "inEqSimp_geqRight" (formula "40"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (builtin "Evaluate Query" (formula "10") (term "0") (newnames "callee,queryResult_4,res_size_4"))
                        (rule "replaceKnownQuery_ArrayList_size(heap,ArrayList_select(heap,self,Floor_waiting))_10010200_18" (formula "11") (term "0"))
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "30") (term "0,0,1"))
                        (rule "variableDeclaration" (formula "30") (term "1") (newnames "queryResult_4"))
                        (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_size_4,result_5,exc_6,heapAfter_size_4,anon_heap_size_4") (contract "ArrayList[ArrayList::size()].JML normal_behavior operation contract.0#ArrayList[ArrayList::size()].JML normal_behavior operation contract.1"))
                        (branch "Post (size)"
                           (builtin "One Step Simplification" (formula "32"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "33"))
                           (rule "andLeft" (formula "34"))
                           (rule "andLeft" (formula "33"))
                           (rule "eqSymm" (formula "33") (term "1"))
                           (rule "inEqSimp_gtToGeq" (formula "34") (term "0"))
                           (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0"))
                           (rule "assignment" (formula "35") (term "1"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0"))
                           (rule "mul_literals" (formula "34") (term "1,0"))
                           (rule "pullOutSelect" (formula "33") (term "0,0,0") (inst "selectSK=ArrayList_collectionSize_6"))
                           (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "33"))
                           (rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "33"))
                           (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "31"))
                           (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "44")) (ifInst ""  (formula "18")))
                           (rule "applyEqReverse" (formula "34") (term "0,0,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "34") (term "0,1") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "34") (term "0,1,0") (ifseqformula "33"))
                           (rule "applyEqReverse" (formula "35") (term "0,0") (ifseqformula "33"))
                           (rule "hideAuxiliaryEq" (formula "33"))
                           (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "7"))
                           (rule "eqSymm" (formula "33") (term "1"))
                           (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "7"))
                           (rule "replace_known_left" (formula "33") (term "1,0") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "33"))
                           (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "7"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "7"))
                           (rule "methodCallEmpty" (formula "35") (term "1"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "emptyModality" (formula "35") (term "1"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "notRight" (formula "35"))
                           (rule "eqSymm" (formula "1"))
                           (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "1"))
                           (rule "inEqSimp_contradEq7" (formula "34") (term "1") (ifseqformula "11"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                           (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "34") (term "0,0,1"))
                           (rule "leq_literals" (formula "34") (term "0,1"))
                           (builtin "One Step Simplification" (formula "34"))
                           (rule "notLeft" (formula "34"))
                           (rule "inEqSimp_leqRight" (formula "35"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "mul_literals" (formula "12") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0"))
                           (rule "add_literals" (formula "12") (term "0,0"))
                           (rule "applyEq" (formula "2") (term "1") (ifseqformula "35"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                           (rule "mul_literals" (formula "12") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "12"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Exceptional Post (size)"
                           (builtin "One Step Simplification" (formula "32"))
                           (builtin "One Step Simplification" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,0") (ifseqformula "31"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "34"))
                           (rule "notLeft" (formula "32"))
                           (rule "andLeft" (formula "34"))
                           (rule "close" (formula "36") (ifseqformula "35"))
                        )
                        (branch "Pre (size)"
                           (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "26")))
                           (rule "closeTrue" (formula "30"))
                        )
                        (branch "Null reference (callee = null)"
                           (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "38")))
                           (rule "closeTrue" (formula "30"))
                        )
                     )
                  )
                  (branch "CUT: result.destination >= 0 FALSE"
                     (builtin "One Step Simplification" (formula "40"))
                     (rule "false_right" (formula "40"))
                     (rule "inEqSimp_geqRight" (formula "39"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (builtin "Evaluate Query" (formula "9") (term "0") (newnames "callee,queryResult_3,res_size_3"))
                     (rule "replaceKnownQuery_ArrayList_size(heap,ArrayList_select(heap,self,Floor_waiting))_1010200_18" (formula "10") (term "0"))
                     (rule "notLeft" (formula "1"))
                     (rule "eqSymm" (formula "29") (term "0,0,1"))
                     (rule "variableDeclaration" (formula "29") (term "1") (newnames "queryResult_3"))
                     (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_size_3,result_4,exc_5,heapAfter_size_3,anon_heap_size_3") (contract "ArrayList[ArrayList::size()].JML normal_behavior operation contract.0#ArrayList[ArrayList::size()].JML normal_behavior operation contract.1"))
                     (branch "Post (size)"
                        (builtin "One Step Simplification" (formula "31"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "33"))
                        (rule "andLeft" (formula "32"))
                        (rule "eqSymm" (formula "32") (term "1"))
                        (rule "inEqSimp_gtToGeq" (formula "33") (term "0"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0"))
                        (rule "assignment" (formula "34") (term "1"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0"))
                        (rule "mul_literals" (formula "33") (term "1,0"))
                        (rule "pullOutSelect" (formula "32") (term "0,0,0") (inst "selectSK=ArrayList_collectionSize_5"))
                        (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "32"))
                        (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "32"))
                        (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "32"))
                        (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "30"))
                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "43")) (ifInst ""  (formula "17")))
                        (rule "applyEqReverse" (formula "33") (term "0,0,0") (ifseqformula "32"))
                        (rule "applyEqReverse" (formula "34") (term "0,0") (ifseqformula "32"))
                        (rule "applyEqReverse" (formula "33") (term "0,1") (ifseqformula "32"))
                        (rule "applyEqReverse" (formula "33") (term "0,1,0") (ifseqformula "32"))
                        (rule "hideAuxiliaryEq" (formula "32"))
                        (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "6"))
                        (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "6"))
                        (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "6"))
                        (rule "eqSymm" (formula "32") (term "1"))
                        (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "6"))
                        (rule "replace_known_left" (formula "32") (term "1,0") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "methodCallEmpty" (formula "34") (term "1"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "emptyModality" (formula "34") (term "1"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "notRight" (formula "34"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "1"))
                        (rule "inEqSimp_contradEq7" (formula "33") (term "1") (ifseqformula "10"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "33") (term "0,0,1"))
                        (rule "leq_literals" (formula "33") (term "0,1"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "notLeft" (formula "33"))
                        (rule "inEqSimp_leqRight" (formula "34"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq1" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "34"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Exceptional Post (size)"
                        (builtin "One Step Simplification" (formula "30"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "30"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "1,0") (ifseqformula "30"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "33"))
                        (rule "notLeft" (formula "31"))
                        (rule "andLeft" (formula "33"))
                        (rule "close" (formula "35") (ifseqformula "34"))
                     )
                     (branch "Pre (size)"
                        (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "25")))
                        (rule "closeTrue" (formula "29"))
                     )
                     (branch "Null reference (callee = null)"
                        (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "37")))
                        (rule "closeTrue" (formula "29"))
                     )
                  )
               )
               (branch "CUT: result.getWeight()@heapAfter_get >= 0 FALSE"
                  (builtin "One Step Simplification" (formula "38"))
                  (rule "false_right" (formula "38"))
                  (rule "inEqSimp_geqRight" (formula "37"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "23"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "Evaluate Query" (formula "8") (term "0") (newnames "callee,queryResult_2,res_size_2"))
                  (rule "replaceKnownQuery_ArrayList_size(heap,ArrayList_select(heap,self,Floor_waiting))_110200_18" (formula "9") (term "0"))
                  (rule "notLeft" (formula "1"))
                  (rule "eqSymm" (formula "28") (term "0,0,1"))
                  (rule "variableDeclaration" (formula "28") (term "1") (newnames "queryResult_2"))
                  (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_size_2,result_3,exc_4,heapAfter_size_2,anon_heap_size_2") (contract "ArrayList[ArrayList::size()].JML normal_behavior operation contract.0#ArrayList[ArrayList::size()].JML normal_behavior operation contract.1"))
                  (branch "Post (size)"
                     (builtin "One Step Simplification" (formula "30"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "31"))
                     (rule "andLeft" (formula "32"))
                     (rule "andLeft" (formula "31"))
                     (rule "eqSymm" (formula "31") (term "1"))
                     (rule "inEqSimp_gtToGeq" (formula "32") (term "0"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0"))
                     (rule "assignment" (formula "33") (term "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0"))
                     (rule "mul_literals" (formula "32") (term "1,0"))
                     (rule "pullOutSelect" (formula "31") (term "0,1,0") (inst "selectSK=ArrayList_collectionSize_4"))
                     (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "31"))
                     (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "31"))
                     (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "31"))
                     (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "42")) (ifInst ""  (formula "16")))
                     (rule "applyEqReverse" (formula "32") (term "0,1,0") (ifseqformula "31"))
                     (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "31"))
                     (rule "applyEqReverse" (formula "32") (term "0,1") (ifseqformula "31"))
                     (rule "applyEqReverse" (formula "32") (term "0,0,0") (ifseqformula "31"))
                     (rule "hideAuxiliaryEq" (formula "31"))
                     (rule "applyEq" (formula "31") (term "0,1,0") (ifseqformula "5"))
                     (rule "replace_known_left" (formula "31") (term "1,0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "5"))
                     (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "5"))
                     (rule "eqSymm" (formula "31") (term "1"))
                     (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "5"))
                     (rule "methodCallEmpty" (formula "33") (term "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "emptyModality" (formula "33") (term "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "notRight" (formula "33"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "1"))
                     (rule "inEqSimp_contradEq7" (formula "32") (term "1") (ifseqformula "9"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                     (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "32") (term "0,0,1"))
                     (rule "leq_literals" (formula "32") (term "0,1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "notLeft" (formula "32"))
                     (rule "inEqSimp_leqRight" (formula "33"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "applyEq" (formula "2") (term "1") (ifseqformula "33"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "1"))
                     (rule "leq_literals" (formula "12") (term "0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "10"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Exceptional Post (size)"
                     (builtin "One Step Simplification" (formula "29"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "andLeft" (formula "29"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,0") (ifseqformula "29"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "32"))
                     (rule "notLeft" (formula "30"))
                     (rule "andLeft" (formula "32"))
                     (rule "close" (formula "34") (ifseqformula "33"))
                  )
                  (branch "Pre (size)"
                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "24")))
                     (rule "closeTrue" (formula "28"))
                  )
                  (branch "Null reference (callee = null)"
                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "36")))
                     (rule "closeTrue" (formula "28"))
                  )
               )
            )
         )
         (branch "result.<created> = TRUE FALSE"
            (rule "applyEqReverse" (formula "42") (term "1,1,1,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "42") (term "0,0,0,0,0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "29"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "applyEqReverse" (formula "41") (term "0,1,0,0,0") (ifseqformula "2"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "28"))
            (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "40") (term "0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "40") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0"))
            (rule "commute_and_2" (formula "40") (term "0"))
            (rule "commute_and_2" (formula "40") (term "0,0"))
            (rule "commute_and_2" (formula "40") (term "0"))
            (rule "commute_and" (formula "40") (term "0,0,0"))
            (rule "cut_direct" (formula "27") (term "0"))
            (branch "CUT: self.waiting.collectionSize >= 1 + index TRUE"
               (builtin "One Step Simplification" (formula "28"))
               (rule "referencedObjectIsCreatedRightEQ" (formula "29") (ifseqformula "28") (ifseqformula "31"))
               (rule "close" (formula "29") (ifseqformula "22"))
            )
            (branch "CUT: self.waiting.collectionSize >= 1 + index FALSE"
               (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "inEqSimp_geqRight" (formula "27"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
               (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "1,0"))
               (rule "times_zero_1" (formula "3") (term "0"))
               (rule "leq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "6") (term "0") (ifseqformula "2"))
               (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "cut_direct" (formula "38") (term "1"))
               (branch "CUT: result.getWeight()@heapAfter_get >= 0 TRUE"
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "arrayLengthIsAnInt" (formula "40") (term "1,1,1,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "40") (term "1,1,1,0"))
                  (rule "cut_direct" (formula "41") (term "0,0,0"))
                  (branch "CUT: e.weight >= 0 TRUE"
                     (builtin "One Step Simplification" (formula "42"))
                     (builtin "Evaluate Query" (formula "9") (term "0") (newnames "callee,queryResult_1,res_size_1"))
                     (rule "replaceKnownQuery_ArrayList_size(heap,ArrayList_select(heap,self,Floor_waiting))_0011200_18" (formula "10") (term "0"))
                     (rule "notLeft" (formula "1"))
                     (rule "eqSymm" (formula "30") (term "0,0,1"))
                     (rule "variableDeclaration" (formula "30") (term "1") (newnames "queryResult_1"))
                     (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_size_1,result_2,exc_3,heapAfter_size_1,anon_heap_size_1") (contract "ArrayList[ArrayList::size()].JML normal_behavior operation contract.0#ArrayList[ArrayList::size()].JML normal_behavior operation contract.1"))
                     (branch "Post (size)"
                        (builtin "One Step Simplification" (formula "32"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "33"))
                        (rule "andLeft" (formula "34"))
                        (rule "andLeft" (formula "33"))
                        (rule "eqSymm" (formula "33") (term "1"))
                        (rule "inEqSimp_gtToGeq" (formula "34") (term "0"))
                        (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0"))
                        (rule "assignment" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0"))
                        (rule "mul_literals" (formula "34") (term "1,0"))
                        (rule "pullOutSelect" (formula "33") (term "0,0,0") (inst "selectSK=ArrayList_collectionSize_3"))
                        (rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "33"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "33"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "33"))
                        (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "45")) (ifInst ""  (formula "17")))
                        (rule "applyEqReverse" (formula "34") (term "0,0,0") (ifseqformula "33"))
                        (rule "applyEqReverse" (formula "34") (term "0,1,0") (ifseqformula "33"))
                        (rule "applyEqReverse" (formula "35") (term "0,0") (ifseqformula "33"))
                        (rule "applyEqReverse" (formula "34") (term "0,1") (ifseqformula "33"))
                        (rule "hideAuxiliaryEq" (formula "33"))
                        (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "6"))
                        (rule "replace_known_left" (formula "33") (term "1,0") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "6"))
                        (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "6"))
                        (rule "eqSymm" (formula "33") (term "1"))
                        (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "6"))
                        (rule "methodCallEmpty" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "emptyModality" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "notRight" (formula "35"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "1"))
                        (rule "inEqSimp_contradEq7" (formula "34") (term "1") (ifseqformula "10"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                        (rule "add_literals" (formula "34") (term "0,0,1"))
                        (rule "leq_literals" (formula "34") (term "0,1"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "notLeft" (formula "34"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "35"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                        (rule "leq_literals" (formula "13") (term "0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Exceptional Post (size)"
                        (builtin "One Step Simplification" (formula "31"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "andLeft" (formula "31"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,0") (ifseqformula "31"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "34"))
                        (rule "notLeft" (formula "32"))
                        (rule "andLeft" (formula "33"))
                        (rule "close" (formula "36") (ifseqformula "34"))
                     )
                     (branch "Pre (size)"
                        (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "25")))
                        (rule "closeTrue" (formula "30"))
                     )
                     (branch "Null reference (callee = null)"
                        (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "39")))
                        (rule "closeTrue" (formula "30"))
                     )
                  )
                  (branch "CUT: e.weight >= 0 FALSE"
                     (builtin "One Step Simplification" (formula "42"))
                     (rule "false_right" (formula "42"))
                     (rule "inEqSimp_geqRight" (formula "41"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (builtin "Evaluate Query" (formula "9") (term "0") (newnames "callee,queryResult_0,res_size_0"))
                     (rule "replaceKnownQuery_ArrayList_size(heap,ArrayList_select(heap,self,Floor_waiting))_1011200_18" (formula "10") (term "0"))
                     (rule "notLeft" (formula "1"))
                     (rule "eqSymm" (formula "30") (term "0,0,1"))
                     (rule "variableDeclaration" (formula "30") (term "1") (newnames "queryResult_0"))
                     (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_size_0,result_1,exc_2,heapAfter_size_0,anon_heap_size_0") (contract "ArrayList[ArrayList::size()].JML normal_behavior operation contract.0#ArrayList[ArrayList::size()].JML normal_behavior operation contract.1"))
                     (branch "Post (size)"
                        (builtin "One Step Simplification" (formula "32"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "33"))
                        (rule "andLeft" (formula "34"))
                        (rule "andLeft" (formula "33"))
                        (rule "eqSymm" (formula "33") (term "1"))
                        (rule "inEqSimp_gtToGeq" (formula "34") (term "0"))
                        (rule "mul_literals" (formula "34") (term "1,0,0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0"))
                        (rule "assignment" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0"))
                        (rule "mul_literals" (formula "34") (term "1,0"))
                        (rule "pullOutSelect" (formula "33") (term "0,1,0") (inst "selectSK=ArrayList_collectionSize_2"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "33"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "33"))
                        (rule "applyEq" (formula "34") (term "0,0,0") (ifseqformula "33"))
                        (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "31"))
                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "45")) (ifInst ""  (formula "17")))
                        (rule "applyEqReverse" (formula "34") (term "0,1,0") (ifseqformula "33"))
                        (rule "applyEqReverse" (formula "35") (term "0,0") (ifseqformula "33"))
                        (rule "applyEqReverse" (formula "34") (term "0,1") (ifseqformula "33"))
                        (rule "applyEqReverse" (formula "34") (term "0,0,0") (ifseqformula "33"))
                        (rule "hideAuxiliaryEq" (formula "33"))
                        (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "6"))
                        (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "6"))
                        (rule "eqSymm" (formula "33") (term "1"))
                        (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "6"))
                        (rule "replace_known_left" (formula "33") (term "1,0") (ifseqformula "11"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "6"))
                        (rule "methodCallEmpty" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "emptyModality" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "notRight" (formula "35"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "1"))
                        (rule "inEqSimp_contradEq7" (formula "34") (term "1") (ifseqformula "10"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "34") (term "0,0,1"))
                        (rule "leq_literals" (formula "34") (term "0,1"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "notLeft" (formula "34"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "35"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                        (rule "leq_literals" (formula "13") (term "0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "11"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Exceptional Post (size)"
                        (builtin "One Step Simplification" (formula "32"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,0") (ifseqformula "31"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "33"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "34"))
                        (rule "andLeft" (formula "36"))
                        (rule "notLeft" (formula "32"))
                        (rule "close" (formula "36") (ifseqformula "34"))
                     )
                     (branch "Pre (size)"
                        (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "25")))
                        (rule "closeTrue" (formula "30"))
                     )
                     (branch "Null reference (callee = null)"
                        (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "39")))
                        (rule "closeTrue" (formula "30"))
                     )
                  )
               )
               (branch "CUT: result.getWeight()@heapAfter_get >= 0 FALSE"
                  (builtin "One Step Simplification" (formula "39"))
                  (rule "false_right" (formula "39"))
                  (rule "inEqSimp_geqRight" (formula "38"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "Evaluate Query" (formula "7") (term "0") (newnames "callee,queryResult,res_size"))
                  (rule "replaceKnownQuery_ArrayList_size(heap,ArrayList_select(heap,self,Floor_waiting))_111200_18" (formula "8") (term "0"))
                  (rule "notLeft" (formula "1"))
                  (rule "eqSymm" (formula "28") (term "0,0,1"))
                  (rule "variableDeclaration" (formula "28") (term "1") (newnames "queryResult"))
                  (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_size,result_0,exc_1,heapAfter_size,anon_heap_size") (contract "ArrayList[ArrayList::size()].JML normal_behavior operation contract.0#ArrayList[ArrayList::size()].JML normal_behavior operation contract.1"))
                  (branch "Post (size)"
                     (builtin "One Step Simplification" (formula "30"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "31"))
                     (rule "andLeft" (formula "32"))
                     (rule "andLeft" (formula "31"))
                     (rule "eqSymm" (formula "31") (term "1"))
                     (rule "inEqSimp_gtToGeq" (formula "32") (term "0"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0"))
                     (rule "assignment" (formula "33") (term "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0"))
                     (rule "mul_literals" (formula "32") (term "1,0"))
                     (rule "pullOutSelect" (formula "31") (term "0,0,0") (inst "selectSK=ArrayList_collectionSize_1"))
                     (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "31"))
                     (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "31"))
                     (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "31"))
                     (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "43")) (ifInst ""  (formula "15")))
                     (rule "applyEqReverse" (formula "32") (term "0,0,0") (ifseqformula "31"))
                     (rule "applyEqReverse" (formula "32") (term "0,1") (ifseqformula "31"))
                     (rule "applyEqReverse" (formula "32") (term "0,1,0") (ifseqformula "31"))
                     (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "31"))
                     (rule "hideAuxiliaryEq" (formula "31"))
                     (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "31") (term "0,1,0") (ifseqformula "4"))
                     (rule "replace_known_left" (formula "31") (term "1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "31"))
                     (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "4"))
                     (rule "eqSymm" (formula "31") (term "1"))
                     (rule "methodCallEmpty" (formula "33") (term "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "emptyModality" (formula "33") (term "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "notRight" (formula "33"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "1"))
                     (rule "inEqSimp_contradEq7" (formula "32") (term "1") (ifseqformula "8"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
                     (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "32") (term "0,0,1"))
                     (rule "leq_literals" (formula "32") (term "0,1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "notLeft" (formula "32"))
                     (rule "inEqSimp_leqRight" (formula "33"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq1" (formula "9"))
                     (rule "mul_literals" (formula "9") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "add_literals" (formula "9") (term "0,0"))
                     (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "33"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                     (rule "mul_literals" (formula "9") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
                     (rule "leq_literals" (formula "11") (term "0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Exceptional Post (size)"
                     (builtin "One Step Simplification" (formula "29"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "andLeft" (formula "29"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,0") (ifseqformula "29"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "31"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "32"))
                     (rule "andLeft" (formula "34"))
                     (rule "notLeft" (formula "30"))
                     (rule "close" (formula "34") (ifseqformula "32"))
                  )
                  (branch "Pre (size)"
                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "23")))
                     (rule "closeTrue" (formula "28"))
                  )
                  (branch "Null reference (callee = null)"
                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "37")))
                     (rule "closeTrue" (formula "28"))
                  )
               )
            )
         )
      )
      (branch "Null reference (var = null)"
         (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "36")))
         (rule "closeTrue" (formula "38"))
      )
   )
   (branch "Exceptional Post (get)"
      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "23")) (ifInst ""  (formula "6")) (ifInst ""  (formula "23")))
      (builtin "One Step Simplification" (formula "32"))
      (rule "andLeft" (formula "22"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0") (ifseqformula "22"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "25"))
      (rule "notLeft" (formula "23"))
      (rule "andLeft" (formula "24"))
      (rule "close" (formula "27") (ifseqformula "25"))
   )
   (branch "Pre (get)"
      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
      (rule "closeTrue" (formula "30"))
   )
   (branch "Null reference (a = null)"
      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "26")))
      (rule "closeTrue" (formula "30"))
   )
)
(branch "Null Reference (self = null)"
   (builtin "One Step Simplification" (formula "31"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
   (rule "closeFalse" (formula "1"))
)
)

}
