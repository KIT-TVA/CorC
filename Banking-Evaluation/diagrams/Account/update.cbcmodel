<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="update">
    <statement name="statement" typeableResult="true">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" context="none">
        <postCondition name=""/>
        <preCondition name="pre"/>
        <firstStatement name="statement1">
          <refinement name="newWithdraw = a.withdraw;" context="none" typeableResult="true" tyleableText="newWithdraw = a.withdraw: Security levels are equal.">
            <postCondition name="intermediateCond"/>
            <preCondition name="pre"/>
          </refinement>
          <postCondition name="intermediateCond"/>
          <preCondition name="pre"/>
        </firstStatement>
        <secondStatement name="statement2">
          <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" context="none">
            <postCondition name=""/>
            <preCondition name="intermediateCond"/>
            <firstStatement name="statement1">
              <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" context="none">
                <postCondition name="intermediateCond"/>
                <preCondition name="intermediateCond"/>
                <guards name="x &lt; 0"/>
                <commands name="statement">
                  <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" context="low">
                    <postCondition name=""/>
                    <preCondition name="(intermediateCond) &amp; (x &lt; 0)"/>
                    <firstStatement name="statement1">
                      <refinement name="newWithdraw  =newWithdraw + x;" context="low" typeableResult="true" tyleableText="newWithdraw = newWithdraw + x: Security levels are equal.">
                        <postCondition name="intermediateCond"/>
                        <preCondition name="(intermediateCond) &amp; (x &lt; 0)"/>
                      </refinement>
                      <postCondition name="intermediateCond"/>
                      <preCondition name="(intermediateCond) &amp; (x &lt; 0)"/>
                    </firstStatement>
                    <secondStatement name="statement2">
                      <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" context="low">
                        <postCondition name="intermediateCond"/>
                        <preCondition name="intermediateCond"/>
                        <guards name="newWithdraw &lt; a.DAILY_LIMIT"/>
                        <commands name="statement">
                          <refinement name="result = false;" context="high" typeableResult="true" tyleableText="result = false: target SL is higher than value SL. (using local promotion)">
                            <postCondition name="intermediateCond"/>
                            <preCondition name="(intermediateCond) &amp; (newWithdraw &lt; a.DAILY_LIMIT)"/>
                          </refinement>
                          <postCondition name="intermediateCond"/>
                          <preCondition name="(intermediateCond) &amp; (newWithdraw &lt; a.DAILY_LIMIT)"/>
                        </commands>
                      </refinement>
                      <postCondition name="intermediateCond"/>
                      <preCondition name="intermediateCond"/>
                    </secondStatement>
                    <intermediateCondition name="intermediateCond"/>
                  </refinement>
                  <postCondition name="intermediateCond"/>
                  <preCondition name="(intermediateCond) &amp; (x &lt; 0)"/>
                </commands>
              </refinement>
              <postCondition name="intermediateCond"/>
              <preCondition name="intermediateCond"/>
            </firstStatement>
            <secondStatement name="statement2">
              <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" context="none">
                <postCondition name=""/>
                <preCondition name="intermediateCond"/>
                <firstStatement name="statement1">
                  <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" context="none">
                    <postCondition name=""/>
                    <preCondition name="intermediateCond"/>
                    <firstStatement name="statement1">
                      <refinement name="tmp = a.updateBalance(x);" context="none" typeableResult="true" tyleableText="tmp = a.updateBalance(x): Security levels are equal.">
                        <postCondition name="intermediateCond"/>
                        <preCondition name="intermediateCond"/>
                      </refinement>
                      <postCondition name="intermediateCond"/>
                      <preCondition name="intermediateCond"/>
                    </firstStatement>
                    <secondStatement name="statement2">
                      <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" context="none">
                        <postCondition name="intermediateCond"/>
                        <preCondition name="intermediateCond"/>
                        <guards name="tmp == true"/>
                        <commands name="statement">
                          <refinement name="result = false;" context="high" typeableResult="true" tyleableText="result = false: target SL is higher than value SL. (using local promotion)">
                            <postCondition name="intermediateCond"/>
                            <preCondition name="(intermediateCond) &amp; (tmp == true)"/>
                          </refinement>
                          <postCondition name="intermediateCond"/>
                          <preCondition name="(intermediateCond) &amp; (tmp == true)"/>
                        </commands>
                      </refinement>
                      <postCondition name="intermediateCond"/>
                      <preCondition name="intermediateCond"/>
                    </secondStatement>
                    <intermediateCondition name="intermediateCond"/>
                  </refinement>
                  <postCondition name="intermediateCond"/>
                  <preCondition name="intermediateCond"/>
                </firstStatement>
                <secondStatement name="statement2">
                  <refinement name="a.withdraw=newWithdraw;" context="none" typeableResult="true" tyleableText="a.withdraw = newWithdraw: Security levels are equal.">
                    <postCondition name="post"/>
                    <preCondition name="intermediateCond"/>
                  </refinement>
                  <postCondition name="post"/>
                  <preCondition name="intermediateCond"/>
                </secondStatement>
                <intermediateCondition name="intermediateCond"/>
              </refinement>
              <postCondition name="post"/>
              <preCondition name="intermediateCond"/>
            </secondStatement>
            <intermediateCondition name="intermediateCond"/>
          </refinement>
          <postCondition name="post"/>
          <preCondition name="intermediateCond"/>
        </secondStatement>
        <intermediateCondition name="intermediateCond"/>
      </refinement>
      <postCondition name="post"/>
      <preCondition name="pre"/>
    </statement>
    <atType name="newWithdraw"/>
    <atType name="newWithdraw"/>
    <atType name="newWithdraw"/>
    <atType name="newWithdraw"/>
    <atType name="newWithdraw"/>
    <atType name="newWithdraw"/>
    <atType name="newWithdraw"/>
    <atType name="newWithdraw"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
    <security level="high" mutationModifier="IMMUTABLE"/>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="newWithdraw" confidentiality="low" type="int" modifier="imm"/>
    <variables name="result" confidentiality="high" type="boolean" modifier="imm"/>
    <variables name="x" confidentiality="low" type="int" modifier="imm"/>
    <variables name="tmp" confidentiality="high" type="boolean" modifier="imm"/>
    <variables name="a" confidentiality="low" type="Account" modifier="mut"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:MethodLink className="Account" methodSignature="boolean update(int)"/>
</xmi:XMI>
