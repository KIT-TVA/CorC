\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Aug 23 17:30:58 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/runtime-EclipseApplication/BankAccount";\include "helper.key";\programVariables {int amount; boolean ret; int amount_old; int balance1_oldVal; Transaction self; Heap heapAtPre;}\problem {
     ret = TRUE
   & java.lang.Object::<inv>(heap,
                             Account::select(heap,
                                             self,
                                             Transaction::$source))
   & java.lang.Object::<inv>(heap,
                             Account::select(heap,
                                             self,
                                             Transaction::$destination))
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$source))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$source),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$source)
      = null
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$destination))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$destination),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$destination)
      = null
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$source))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$source),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$source)
      = null
   &   Account::exactInstance(Account::select(heap,
                                              self,
                                              Transaction::$destination))
     = TRUE
   &   boolean::select(heap,
                       Account::select(heap,
                                       self,
                                       Transaction::$destination),
                       java.lang.Object::<created>)
     = TRUE
   & !  Account::select(heap,
                        self,
                        Transaction::$destination)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Transaction::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || amount_old:=amount
    || balance1_oldVal:=int::select(heap,
                                    Account::select(heap,
                                                    self,
                                                    Transaction::$destination),
                                    Account::$balance)}
     \<{
         ret=self.destination.update(amount);
       }\> (  (   ret = TRUE
               ->     int::select(heap,
                                  Account::select(heap,
                                                  self,
                                                  Transaction::$destination),
                                  Account::$balance)
                    = add(balance1_oldVal, amount)
                  & ret = FALSE
               ->   int::select(heap,
                                Account::select(heap,
                                                self,
                                                Transaction::$destination),
                                Account::$balance)
                  = balance1_oldVal)
            & amount = amount_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "328")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "15") (term "1,0,1"))
(rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,0,0,1"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "15") (term "1") (inst "#v0=a"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "a"))
(rule "assignment_read_attribute" (formula "15"))
(branch "Normal Execution (self != null)"
   (builtin "One Step Simplification" (formula "15"))
   (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_update,result,exc,heapAfter_update,anon_heap_update") (contract "Account[Account::update(int)].JML normal_behavior operation contract.0"))
   (branch "Post (update)"
      (builtin "One Step Simplification" (formula "17"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "translateJavaAddInt" (formula "13") (term "1,1,1,1,0,0,0,1,1"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "polySimp_addComm0" (formula "16") (term "1,1,1"))
      (rule "assignment" (formula "22") (term "1"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=Account_balance_0"))
      (rule "applyEq" (formula "15") (term "0,1,1") (ifseqformula "17"))
      (rule "applyEq" (formula "16") (term "0,1,1") (ifseqformula "17"))
      (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "21")) (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "15") (term "1,1"))
      (rule "polySimp_homoEq" (formula "16") (term "1,1"))
      (rule "polySimp_addComm1" (formula "16") (term "0,1,1"))
      (rule "polySimp_addComm0" (formula "16") (term "0,0,1,1"))
      (rule "elementOfSingleton" (formula "17") (term "0,0"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "15") (term "1,1,1") (ifseqformula "17"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "applyEqReverse" (formula "16") (term "0,0,0,0,1,1") (ifseqformula "17"))
      (rule "hideAuxiliaryEq" (formula "17"))
      (rule "polySimp_addComm0" (formula "16") (term "0,0,1,1"))
      (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,1,1"))
      (rule "add_literals" (formula "16") (term "1,1,0,1,1"))
      (rule "times_zero_1" (formula "16") (term "1,0,1,1"))
      (rule "add_zero_right" (formula "16") (term "0,1,1"))
      (rule "inEqSimp_commuteGeq" (formula "17"))
      (rule "pullOutSelect" (formula "16") (term "0,0,1") (inst "selectSK=Account_withdraw_0"))
      (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "16"))
      (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "21")) (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "15") (term "1"))
      (rule "elementOfSingleton" (formula "16") (term "0,0"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "applyEqReverse" (formula "15") (term "1,1") (ifseqformula "16"))
      (rule "applyEqReverse" (formula "17") (term "0,0,1") (ifseqformula "16"))
      (rule "hideAuxiliaryEq" (formula "16"))
      (rule "eqSymm" (formula "15") (term "1"))
      (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=Account_OVERDRAFT_LIMIT_0"))
      (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "21")) (ifInst ""  (formula "7")))
      (rule "elementOfSingleton" (formula "17") (term "0,0"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "17"))
      (rule "hideAuxiliaryEq" (formula "17"))
      (rule "inEqSimp_commuteLeq" (formula "17"))
      (rule "commute_and" (formula "16") (term "1"))
      (rule "emptyModality" (formula "22") (term "1"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "impRight" (formula "22"))
      (rule "impRight" (formula "23"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "2"))
      (rule "close" (formula "21") (ifseqformula "2"))
   )
   (branch "Exceptional Post (update)"
      (builtin "One Step Simplification" (formula "17"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "translateJavaAddInt" (formula "13") (term "1,1,1,1,0,0,0,1,1"))
      (rule "andLeft" (formula "13"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,0") (ifseqformula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "14"))
      (rule "close" (formula "18") (ifseqformula "17"))
   )
   (branch "Pre (update)"
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "11")) (ifInst ""  (formula "3")))
      (rule "closeTrue" (formula "15"))
   )
   (branch "Null reference (a = null)"
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
      (rule "closeTrue" (formula "15"))
   )
)
(branch "Null Reference (self = null)"
   (rule "false_right" (formula "16"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
   (rule "closeFalse" (formula "1"))
)
)

}
