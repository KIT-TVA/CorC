\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 16 15:53:06 CEST 2020
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=20000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "C:/bachelor/redmine/Fallbeispiele/BankAccount";\include "helper.key";\programVariables {int OVERDRAFT_LIMIT; int newBalance; boolean result; int x; Account a; Account old_a; int OVERDRAFT_LIMIT_old; boolean result_old; int x_old; Account a_old; Account old_a_old;  Heap heapAtPre;}\problem {
     true
   & OVERDRAFT_LIMIT = Z(0(#))
   & !a = null
   & !old_a = null
   &   boolean::select(heap,
                       a,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       old_a,
                       java.lang.Object::<created>)
     = TRUE
   &   int::select(heap, old_a, Account::$balance)
     = int::select(heap, a, Account::$balance)
   & !old_a = a
   & wellFormed(heap)
-> {heapAtPre:=heap
    || OVERDRAFT_LIMIT_old:=OVERDRAFT_LIMIT
    || result_old:=result
    || x_old:=x
    || a_old:=a
    || old_a_old:=old_a}
     \<{
         old_a.balance=a.balance;
         newBalance=a.balance-x;
       }\> (    int::select(heap,
                            old_a,
                            Account::$balance)
              = int::select(heap, a, Account::$balance)
            &   newBalance
              = sub(int::select(heap,
                                a,
                                Account::$balance),
                    x)
            & OVERDRAFT_LIMIT = OVERDRAFT_LIMIT_old
            & result = result_old
            & x = x_old
            & a = a_old
            & old_a = old_a_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "346")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "9") (term "0,1,0,0,0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "9") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "1,1,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "0,1,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "9") (term "0,1,0,0,0,0,0,0,1"))
(rule "eval_order_access4" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v0=a_1"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "a_1"))
(rule "assignment" (formula "9") (term "1"))
(builtin "One Step Simplification" (formula "9"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
(rule "assignment_read_attribute" (formula "9"))
(branch "Normal Execution (a != null)"
   (builtin "One Step Simplification" (formula "9"))
   (rule "assignment_write_attribute" (formula "9"))
   (branch "Normal Execution (a_1 != null)"
      (builtin "One Step Simplification" (formula "9"))
      (rule "applyEq" (formula "9") (term "0,0,0,0,0,0,0") (ifseqformula "1"))
      (rule "polySimp_sepNegMonomial" (formula "9") (term "1,0,0,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,0,0,0,0,1"))
      (rule "compound_subtraction_1" (formula "9") (term "1") (inst "#v=x_1"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_2"))
      (rule "assignment_read_attribute" (formula "9"))
      (branch "Normal Execution (a != null)"
         (builtin "One Step Simplification" (formula "9"))
         (rule "pullOutSelect" (formula "9") (term "0,1,0") (inst "selectSK=Account_balance_0"))
         (rule "simplifySelectOfStore" (formula "1"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "applyEqReverse" (formula "10") (term "0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "assignmentSubtractionInt" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaSubInt" (formula "9") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "9") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "9") (term "0,1,0"))
         (rule "emptyModality" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "replaceKnownSelect_taclet000_0" (formula "9") (term "0,1,0"))
         (rule "replaceKnownSelect_taclet000_0" (formula "9") (term "1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_1" (formula "9") (term "0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_1" (formula "9") (term "1,0,0"))
         (rule "eqSymm" (formula "9") (term "1"))
         (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_homoEq" (formula "9") (term "1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,1"))
         (rule "add_literals" (formula "9") (term "1,1,0,1"))
         (rule "times_zero_1" (formula "9") (term "1,0,1"))
         (rule "add_zero_right" (formula "9") (term "0,1"))
         (rule "polySimp_pullOutFactor2" (formula "9") (term "0,1"))
         (rule "add_literals" (formula "9") (term "1,0,1"))
         (rule "times_zero_1" (formula "9") (term "0,1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=Account_balance_1"))
         (rule "simplifySelectOfStore" (formula "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "10") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "closeTrue" (formula "10"))
      )
      (branch "Null Reference (a = null)"
         (builtin "One Step Simplification" (formula "10"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (a_1 = null)"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (a = null)"
   (builtin "One Step Simplification" (formula "10"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
   (rule "closeFalse" (formula "1"))
)
)

}
