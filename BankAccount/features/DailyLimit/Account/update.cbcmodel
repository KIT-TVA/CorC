<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="update" proven="true" comment="" className="Account" methodName="update">
    <statement name="statement" id="1dbf2469-9994-490c-8971-94b3554eabd3">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="95273606-0a1a-400d-a2e3-6d8be9703629">
        <firstStatement name="statement1" id="e048be47-6031-4980-9c03-f673a1a0cec2">
          <refinement name="newWithdraw = withdraw;" proven="true" id="cc51094f-1e62-4302-90f1-814b210d6942">
            <postCondition name="newWithdraw = withdraw">
              <modifiables>newWithdraw</modifiables>
            </postCondition>
            <preCondition name="true"/>
          </refinement>
          <postCondition name="newWithdraw = withdraw">
            <modifiables>newWithdraw</modifiables>
          </postCondition>
          <preCondition name="true"/>
        </firstStatement>
        <secondStatement name="statement2" id="488bde06-6401-4564-9163-a803fddaf97d">
          <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="1cba3144-fa0a-49dd-97ff-f594635b6560">
            <firstStatement name="statement1" id="c807a324-2c3a-4a57-8778-fbc28e9d06a9">
              <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" proven="true" id="22dcad2f-c038-4c31-8e40-4a096562c327" preProve="true">
                <guards name="x &lt; 0"/>
                <guards name="x >= 0"/>
                <commands name="statement" id="2270acae-5e61-4bf4-94cd-6f1c2789cefc">
                  <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="fbb262c8-3d76-4197-8251-385b7e9e794f">
                    <firstStatement name="statement1" id="ddae5433-d29d-4054-a258-60ed757a80d4">
                      <refinement name="newWithdraw += x;" proven="true" id="5e3f559a-e1df-41a2-9827-b705a5ea1004">
                        <postCondition name="newWithdraw = withdraw + x &amp; x&lt;0">
                          <modifiables>newWithdraw</modifiables>
                        </postCondition>
                        <preCondition name="(newWithdraw = withdraw) &amp; (x &lt; 0)">
                          <modifiables>newWithdraw</modifiables>
                        </preCondition>
                      </refinement>
                      <postCondition name="newWithdraw = withdraw + x &amp; x&lt;0">
                        <modifiables>newWithdraw</modifiables>
                      </postCondition>
                      <preCondition name="(newWithdraw = withdraw) &amp; (x &lt; 0)">
                        <modifiables>newWithdraw</modifiables>
                      </preCondition>
                    </firstStatement>
                    <secondStatement name="statement2" id="2b344a64-6a2b-4155-a3e0-2d546e2f90ec">
                      <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" proven="true" id="3251ed33-411e-489b-ae4b-bbebb2134ebd" preProve="true">
                        <guards name="newWithdraw &lt; DAILY_LIMIT"/>
                        <guards name="newWithdraw >= DAILY_LIMIT"/>
                        <commands name="statement" id="06a274b8-8c37-46c9-8aaf-60b05f7eb888">
                          <refinement xsi:type="cbcmodel:ReturnStatement" name="false;" proven="true" comment="returnStatement" id="77412777-3d39-4b56-941e-fe9d9662631d">
                            <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
                              <modifiables>newWithdraw</modifiables>
                              <modifiables>ret</modifiables>
                            </postCondition>
                            <preCondition name="(newWithdraw = withdraw + x &amp; x&lt;0) &amp; (newWithdraw &lt; DAILY_LIMIT)">
                              <modifiables>newWithdraw</modifiables>
                            </preCondition>
                          </refinement>
                          <postCondition name="newWithdraw &lt;= withdraw">
                            <modifiables>newWithdraw</modifiables>
                            <modifiables>ret</modifiables>
                          </postCondition>
                          <preCondition name="(newWithdraw = withdraw + x &amp; x&lt;0) &amp; (newWithdraw &lt; DAILY_LIMIT)">
                            <modifiables>newWithdraw</modifiables>
                          </preCondition>
                        </commands>
                        <commands name="statement" id="68ab3c45-0625-4b8f-9d89-3a153841e429">
                          <refinement xsi:type="cbcmodel:SkipStatement" name=";" proven="true" id="6be7df85-2fb7-4195-9488-1a67f3ffe3cd">
                            <postCondition name="newWithdraw &lt;= withdraw">
                              <modifiables>newWithdraw</modifiables>
                            </postCondition>
                            <preCondition name="(newWithdraw = withdraw + x &amp; x&lt;0) &amp; (newWithdraw >= DAILY_LIMIT)">
                              <modifiables>newWithdraw</modifiables>
                            </preCondition>
                          </refinement>
                          <postCondition name="newWithdraw &lt;= withdraw">
                            <modifiables>newWithdraw</modifiables>
                          </postCondition>
                          <preCondition name="(newWithdraw = withdraw + x &amp; x&lt;0) &amp; (newWithdraw >= DAILY_LIMIT)">
                            <modifiables>newWithdraw</modifiables>
                          </preCondition>
                        </commands>
                      </refinement>
                      <postCondition name="newWithdraw &lt;= withdraw">
                        <modifiables>newWithdraw</modifiables>
                        <modifiables>ret</modifiables>
                      </postCondition>
                      <preCondition name="newWithdraw = withdraw + x &amp; x&lt;0">
                        <modifiables>newWithdraw</modifiables>
                      </preCondition>
                    </secondStatement>
                    <intermediateCondition name="newWithdraw = withdraw + x &amp; x&lt;0">
                      <modifiables>newWithdraw</modifiables>
                    </intermediateCondition>
                  </refinement>
                  <postCondition name="newWithdraw &lt;= withdraw">
                    <modifiables>newWithdraw</modifiables>
                    <modifiables>ret</modifiables>
                  </postCondition>
                  <preCondition name="(newWithdraw = withdraw) &amp; (x &lt; 0)">
                    <modifiables>newWithdraw</modifiables>
                  </preCondition>
                </commands>
                <commands name="statement" id="af9d39d3-e9e2-44c8-a29a-6f7ad922d8f1">
                  <refinement xsi:type="cbcmodel:SkipStatement" name=";" proven="true" id="a7f21422-9eb3-43d5-bea8-ae2b9aa60522">
                    <postCondition name="newWithdraw &lt;= withdraw">
                      <modifiables>newWithdraw</modifiables>
                    </postCondition>
                    <preCondition name="(newWithdraw = withdraw) &amp; (x >= 0)">
                      <modifiables>newWithdraw</modifiables>
                    </preCondition>
                  </refinement>
                  <postCondition name="newWithdraw &lt;= withdraw">
                    <modifiables>newWithdraw</modifiables>
                  </postCondition>
                  <preCondition name="(newWithdraw = withdraw) &amp; (x >= 0)">
                    <modifiables>newWithdraw</modifiables>
                  </preCondition>
                </commands>
              </refinement>
              <postCondition name="newWithdraw &lt;= withdraw">
                <modifiables>newWithdraw</modifiables>
                <modifiables>ret</modifiables>
              </postCondition>
              <preCondition name="newWithdraw = withdraw">
                <modifiables>newWithdraw</modifiables>
              </preCondition>
            </firstStatement>
            <secondStatement name="statement2" id="5d25a64c-e653-47c3-a936-c584cbfc5275">
              <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="069ae6ff-9973-4365-90fd-14685319483a">
                <firstStatement name="statement1" id="d153c953-c2ea-4d3b-bda9-591597bcdb7d">
                  <refinement xsi:type="cbcmodel:OriginalStatement" name="ret = original(x);" proven="true" id="7b53beb9-fb07-42ed-9bfa-acf50f6d2213">
                    <postCondition name="newWithdraw &lt;= withdraw &amp; (ret = TRUE -> \old(balance) + x = balance) &amp; (ret = FALSE -> \old(balance) = balance)">
                      <modifiables>newWithdraw</modifiables>
                      <modifiables>ret</modifiables>
                    </postCondition>
                    <preCondition name="newWithdraw &lt;= withdraw">
                      <modifiables>newWithdraw</modifiables>
                      <modifiables>ret</modifiables>
                    </preCondition>
                  </refinement>
                  <postCondition name="newWithdraw &lt;= withdraw &amp; (ret = TRUE -> \old(balance) + x = balance) &amp; (ret = FALSE -> \old(balance) = balance)">
                    <modifiables>newWithdraw</modifiables>
                    <modifiables>ret</modifiables>
                  </postCondition>
                  <preCondition name="newWithdraw &lt;= withdraw">
                    <modifiables>newWithdraw</modifiables>
                    <modifiables>ret</modifiables>
                  </preCondition>
                </firstStatement>
                <secondStatement name="statement2" id="efb93638-c678-44a4-adae-379ab9edbee4">
                  <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" proven="true" id="52641987-2c60-4e20-a7ef-f14bf72c77fc" preProve="true">
                    <guards name="ret = FALSE"/>
                    <guards name="ret = TRUE"/>
                    <commands name="statement" id="404ff7c8-9963-493f-8856-00a21d4e2ae2">
                      <refinement xsi:type="cbcmodel:ReturnStatement" name="false;" proven="true" comment="returnStatement" id="c31e9836-31b5-4085-811b-3a3716e63fcb">
                        <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
                          <modifiables>newWithdraw</modifiables>
                          <modifiables>ret</modifiables>
                          <modifiables>withdraw</modifiables>
                        </postCondition>
                        <preCondition name="(newWithdraw &lt;= withdraw &amp; (ret = TRUE -> \old(balance) + x = balance) &amp; (ret = FALSE -> \old(balance) = balance)) &amp; (ret = FALSE)">
                          <modifiables>newWithdraw</modifiables>
                          <modifiables>ret</modifiables>
                        </preCondition>
                      </refinement>
                      <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
                        <modifiables>newWithdraw</modifiables>
                        <modifiables>ret</modifiables>
                        <modifiables>withdraw</modifiables>
                      </postCondition>
                      <preCondition name="(newWithdraw &lt;= withdraw &amp; (ret = TRUE -> \old(balance) + x = balance) &amp; (ret = FALSE -> \old(balance) = balance)) &amp; (ret = FALSE)">
                        <modifiables>newWithdraw</modifiables>
                        <modifiables>ret</modifiables>
                      </preCondition>
                    </commands>
                    <commands name="statement" id="1d5b8041-7fd2-4307-99c6-1dac540608a3">
                      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="368814d7-cf56-4bcf-a240-a2a00c2461fa">
                        <firstStatement name="statement1" id="72822e5f-7029-47fe-9497-04ca1cd3fc2e">
                          <refinement name="withdraw = newWithdraw;" proven="true" id="f392ed52-cf76-4c6e-8dc5-bf4e783bb295">
                            <postCondition name="withdraw &#xD;&#xA;&lt;= \old(withdraw) &amp; balance = \old(balance) + x">
                              <modifiables>newWithdraw</modifiables>
                              <modifiables>ret</modifiables>
                              <modifiables>withdraw</modifiables>
                            </postCondition>
                            <preCondition name="(newWithdraw &lt;= withdraw &amp; (ret = TRUE -> \old(balance) + x = balance) &amp; (ret = FALSE -> \old(balance) = balance)) &amp; (ret = TRUE)">
                              <modifiables>newWithdraw</modifiables>
                              <modifiables>ret</modifiables>
                            </preCondition>
                          </refinement>
                          <postCondition name="withdraw &#xD;&#xA;&lt;= \old(withdraw) &amp; balance = \old(balance) + x">
                            <modifiables>newWithdraw</modifiables>
                            <modifiables>ret</modifiables>
                            <modifiables>withdraw</modifiables>
                          </postCondition>
                          <preCondition name="(newWithdraw &lt;= withdraw &amp; (ret = TRUE -> \old(balance) + x = balance) &amp; (ret = FALSE -> \old(balance) = balance)) &amp; (ret = TRUE)">
                            <modifiables>newWithdraw</modifiables>
                            <modifiables>ret</modifiables>
                          </preCondition>
                        </firstStatement>
                        <secondStatement name="statement2" id="b3815cea-5e32-485c-9f2b-e6986e61476f">
                          <refinement xsi:type="cbcmodel:ReturnStatement" name="true;" proven="true" comment="returnStatement" id="72c78200-a7e4-49ce-8aa6-65d5455baa62">
                            <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
                              <modifiables>newWithdraw</modifiables>
                              <modifiables>ret</modifiables>
                              <modifiables>withdraw</modifiables>
                            </postCondition>
                            <preCondition name="withdraw &#xD;&#xA;&lt;= \old(withdraw) &amp; balance = \old(balance) + x">
                              <modifiables>newWithdraw</modifiables>
                              <modifiables>ret</modifiables>
                              <modifiables>withdraw</modifiables>
                            </preCondition>
                          </refinement>
                          <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
                            <modifiables>newWithdraw</modifiables>
                            <modifiables>ret</modifiables>
                            <modifiables>withdraw</modifiables>
                          </postCondition>
                          <preCondition name="withdraw &#xD;&#xA;&lt;= \old(withdraw) &amp; balance = \old(balance) + x">
                            <modifiables>newWithdraw</modifiables>
                            <modifiables>ret</modifiables>
                            <modifiables>withdraw</modifiables>
                          </preCondition>
                        </secondStatement>
                        <intermediateCondition name="withdraw &#xD;&#xA;&lt;= \old(withdraw) &amp; balance = \old(balance) + x">
                          <modifiables>newWithdraw</modifiables>
                          <modifiables>ret</modifiables>
                          <modifiables>withdraw</modifiables>
                        </intermediateCondition>
                      </refinement>
                      <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
                        <modifiables>newWithdraw</modifiables>
                        <modifiables>ret</modifiables>
                        <modifiables>withdraw</modifiables>
                      </postCondition>
                      <preCondition name="(newWithdraw &lt;= withdraw &amp; (ret = TRUE -> \old(balance) + x = balance) &amp; (ret = FALSE -> \old(balance) = balance)) &amp; (ret = TRUE)">
                        <modifiables>newWithdraw</modifiables>
                        <modifiables>ret</modifiables>
                      </preCondition>
                    </commands>
                  </refinement>
                  <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
                    <modifiables>newWithdraw</modifiables>
                    <modifiables>ret</modifiables>
                    <modifiables>withdraw</modifiables>
                  </postCondition>
                  <preCondition name="newWithdraw &lt;= withdraw &amp; (ret = TRUE -> \old(balance) + x = balance) &amp; (ret = FALSE -> \old(balance) = balance)">
                    <modifiables>newWithdraw</modifiables>
                    <modifiables>ret</modifiables>
                  </preCondition>
                </secondStatement>
                <intermediateCondition name="newWithdraw &lt;= withdraw &amp; (ret = TRUE -> \old(balance) + x = balance) &amp; (ret = FALSE -> \old(balance) = balance)">
                  <modifiables>newWithdraw</modifiables>
                  <modifiables>ret</modifiables>
                </intermediateCondition>
              </refinement>
              <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
                <modifiables>newWithdraw</modifiables>
                <modifiables>ret</modifiables>
                <modifiables>withdraw</modifiables>
              </postCondition>
              <preCondition name="newWithdraw &lt;= withdraw">
                <modifiables>newWithdraw</modifiables>
                <modifiables>ret</modifiables>
              </preCondition>
            </secondStatement>
            <intermediateCondition name="newWithdraw &lt;= withdraw">
              <modifiables>newWithdraw</modifiables>
              <modifiables>ret</modifiables>
            </intermediateCondition>
          </refinement>
          <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
            <modifiables>newWithdraw</modifiables>
            <modifiables>ret</modifiables>
            <modifiables>withdraw</modifiables>
          </postCondition>
          <preCondition name="newWithdraw = withdraw">
            <modifiables>newWithdraw</modifiables>
          </preCondition>
        </secondStatement>
        <intermediateCondition name="newWithdraw = withdraw">
          <modifiables>newWithdraw</modifiables>
        </intermediateCondition>
      </refinement>
      <postCondition name="(\result = FALSE ->&#xD;&#xA; (withdraw = \old(withdraw) &amp;  balance = \old(balance)))&#xD;&#xA; &amp; (\result = TRUE ->&#xD;&#xA; (withdraw &lt;= \old(withdraw)) &amp;  balance = \old(balance) + x)">
        <modifiables>newWithdraw</modifiables>
        <modifiables>ret</modifiables>
        <modifiables>withdraw</modifiables>
      </postCondition>
      <preCondition name="true"/>
    </statement>
    <preCondition name="pre"/>
    <postCondition name="post"/>
    <methodObj href="Account.cbcclass#//@methods.0"/>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int newWithdraw"/>
  </cbcmodel:JavaVariables>
</xmi:XMI>
