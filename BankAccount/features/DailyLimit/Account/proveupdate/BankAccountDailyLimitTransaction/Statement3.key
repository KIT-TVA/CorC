\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Aug 23 17:04:01 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/runtime-EclipseApplication/BankAccount";\include "helper.key";\programVariables {int newWithdraw; int x; boolean ret; int x_old; int balance1_oldVal; Account self; Heap heapAtPre;}\problem {
     leq(newWithdraw,
         int::select(heap, self, Account::$withdraw))
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Account::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || x_old:=x
    || balance1_oldVal:=int::select(heap,
                                    self,
                                    Account::$balance)}
     \<{
         ret=self.original_update(x);
       }\> (  leq(newWithdraw,
                  int::select(heap,
                              self,
                              Account::$withdraw))
            & (   ret = TRUE
               ->   add(balance1_oldVal, x)
                  = int::select(heap,
                                self,
                                Account::$balance))
            & (   ret = FALSE
               ->   balance1_oldVal
                  = int::select(heap,
                                self,
                                Account::$balance))
            & x = x_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "253")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "7") (term "1,1,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,1,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1"))
(builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_original_update,result,exc,heapAfter_original_update,anon_heap_original_update") (contract "Account[Account::original_update(int)].JML normal_behavior operation contract.0"))
(branch "Post (original_update)"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,0,0,1,1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "polySimp_addComm0" (formula "10") (term "1,1"))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "pullOutSelect" (formula "11") (term "1") (inst "selectSK=Account_OVERDRAFT_LIMIT_0"))
   (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")))
   (rule "elementOfSingleton" (formula "11") (term "0,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
   (rule "hideAuxiliaryEq" (formula "11"))
   (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=Account_balance_0"))
   (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "11"))
   (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "11"))
   (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "2")))
   (rule "eqSymm" (formula "9") (term "1"))
   (rule "polySimp_homoEq" (formula "10") (term "1"))
   (rule "polySimp_addComm1" (formula "10") (term "0,1"))
   (rule "polySimp_addComm0" (formula "10") (term "0,0,1"))
   (rule "elementOfSingleton" (formula "11") (term "0,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "applyEqReverse" (formula "10") (term "0,0,0,0,1") (ifseqformula "11"))
   (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "11"))
   (rule "applyEqReverse" (formula "9") (term "1,1") (ifseqformula "11"))
   (rule "hideAuxiliaryEq" (formula "11"))
   (rule "eqSymm" (formula "9") (term "1"))
   (rule "polySimp_addComm0" (formula "10") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "10") (term "0,1"))
   (rule "polySimp_sepNegMonomial" (formula "10") (term "1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1"))
   (rule "emptyModality" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "replaceKnownSelect_taclet0_2" (formula "14") (term "0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "14") (term "0,1,1"))
   (rule "replaceKnownSelect_taclet0_2" (formula "14") (term "0,1,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "14") (term "0,1,1,0"))
   (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "polySimp_addComm0" (formula "14") (term "1,1,1"))
   (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "10"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "inEqSimp_geqRight" (formula "14"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Account_withdraw_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "4")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_homoInEq1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addComm0" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Exceptional Post (original_update)"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,0,0,1,1"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (original_update)"
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
   (rule "closeTrue" (formula "7"))
)
(branch "Null reference (self = null)"
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
   (rule "closeTrue" (formula "7"))
)
)

}
