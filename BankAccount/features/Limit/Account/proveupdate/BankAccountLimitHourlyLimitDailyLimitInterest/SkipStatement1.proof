\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "optimisedSelectRules" : "optimisedSelectRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 2147483647,
        "Timeout" : -1,
        "options" : { 
            "ABSTRACT_PROOF_FIRST_ORDER_GOALS_FORBIDDEN" : "true",
            "ABSTRACT_PROOF_FORBIDDEN_RULES" : "",
            "ABSTRACT_PROOF_FORBIDDEN_RULE_SETS" : "",
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_EXPAND",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_NONCLOSE",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "C:/Important/Work/CorC/BankAccount";
\include "helper.key";
\programVariables {
int newWithdrawDaily;
int newWithdrawHourly;
int x;
boolean ret;
int x_old;
boolean ret_old;
int withdrawHourly5_oldVal;
int balance8_oldVal;
int withdrawDaily9_oldVal;
int HOURLY_LIMIT3_oldVal;
int DAILY_LIMIT2_oldVal;
int interest4_oldVal;
int OVERDRAFT_LIMIT7_oldVal;
Account self;
Heap heapAtPre;
}
\problem {
       newWithdrawHourly
     = add(int::select(heap,
                       self,
                       Account::$withdrawHourly),
           x)
   &   newWithdrawDaily
     = add(int::select(heap,
                       self,
                       Account::$withdrawDaily),
           x)
   & lt(x, Z(0(#)))
   & limitExceeded(newWithdrawDaily,
                   newWithdrawHourly,
                   int::select(heap,
                               self,
                               Account::$DAILY_LIMIT),
                   int::select(heap,
                               self,
                               Account::$HOURLY_LIMIT))
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Account::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || x_old:=x
    || ret_old:=ret
    || withdrawHourly5_oldVal:=int::select(heap,
                                           self,
                                           Account::$withdrawHourly)
    || withdrawDaily9_oldVal:=int::select(heap,
                                          self,
                                          Account::$withdrawDaily)
    || interest4_oldVal:=int::select(heap,
                                     self,
                                     Account::$interest)
    || HOURLY_LIMIT3_oldVal:=int::select(heap,
                                         self,
                                         Account::$HOURLY_LIMIT)
    || OVERDRAFT_LIMIT7_oldVal:=int::select(heap,
                                            self,
                                            Account::$OVERDRAFT_LIMIT)
    || balance8_oldVal:=int::select(heap,
                                    self,
                                    Account::$balance)
    || DAILY_LIMIT2_oldVal:=int::select(heap,
                                        self,
                                        Account::$DAILY_LIMIT)}
     \<{
       ;
     }\> (  leq(newWithdrawDaily,
                int::select(heap,
                            self,
                            Account::$withdrawDaily))
          & leq(newWithdrawHourly,
                int::select(heap,
                            self,
                            Account::$withdrawHourly))
          & x = x_old
          & ret = ret_old)
}

\proof {
(keyLog "0" (keyUser "Fynn" ) (keyVersion "1fb0c10630b493ce138850ae0f9803d3f2fffc51"))

(autoModeTime "81")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "10") (term "1,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,1"))
(rule "polySimp_homoEq" (formula "1"))
(rule "polySimp_homoEq" (formula "2"))
(rule "polySimp_addComm0" (formula "1") (term "0,0"))
(rule "polySimp_addComm0" (formula "2") (term "0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "polySimp_addComm0" (formula "1") (term "0,0"))
(rule "polySimp_addComm0" (formula "2") (term "0,0"))
(rule "limitExceeded" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "inEqSimp_ltToLeq" (formula "3"))
(rule "times_zero_1" (formula "3") (term "1,0,0"))
(rule "add_zero_right" (formula "3") (term "0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "5"))
(rule "inEqSimp_commuteGeq" (formula "4"))
(rule "emptyStatement" (formula "11") (term "1"))
(rule "polySimp_sepPosMonomial" (formula "1"))
(rule "polySimp_mulComm0" (formula "1") (term "1"))
(rule "polySimp_rightDist" (formula "1") (term "1"))
(rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,1"))
(rule "polySimp_sepPosMonomial" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1"))
(rule "polySimp_rightDist" (formula "2") (term "1"))
(rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
(rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
(rule "polySimp_elimOne" (formula "2") (term "0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "3"))
(rule "mul_literals" (formula "3") (term "1"))
(rule "emptyModality" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "applyEq" (formula "11") (term "0,1") (ifseqformula "1"))
(rule "inEqSimp_homoInEq1" (formula "11") (term "1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,1"))
(rule "polySimp_pullOutFactor1" (formula "11") (term "0,0,1"))
(rule "add_literals" (formula "11") (term "1,0,0,1"))
(rule "times_zero_1" (formula "11") (term "0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,1"))
(rule "applyEq" (formula "11") (term "0,0") (ifseqformula "2"))
(rule "inEqSimp_homoInEq1" (formula "11") (term "0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0"))
(rule "polySimp_pullOutFactor1" (formula "11") (term "0,0,0"))
(rule "add_literals" (formula "11") (term "1,0,0,0"))
(rule "times_zero_1" (formula "11") (term "0,0,0"))
(rule "add_zero_left" (formula "11") (term "0,0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "inEqSimp_leqRight" (formula "11"))
(rule "times_zero_1" (formula "1") (term "1,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1"))
(rule "mul_literals" (formula "1") (term "1"))
(rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "4"))
(rule "qeq_literals" (formula "1") (term "0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "closeFalse" (formula "1"))
)
}
