\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Aug 25 14:34:10 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/runtime-EclipseApplication/EmailOO";\include "helper.key";\programVariables {int index; Client result; String address; Client ret; int variant; Client self; Heap heapAtPre;}\problem {
     geq(index, Z(0(#)))
   & \exists int k;
       (     geq(k, Z(0(#)))
           & lt(k, index)
           & !  Client::getName(heap,
                                Client::select(heap,
                                               Client[]::select(heap,
                                                                null,
                                                                Client::$clients),
                                               arr(k)))
              = null
           &   java.lang.Object::equals(heap,
                                        Client::getName(heap,
                                                        Client::select(heap,
                                                                       Client[]::select(heap,
                                                                                        null,
                                                                                        Client::$clients),
                                                                       arr(k))),
                                        address)
             = TRUE
        ->   result
           = Client::select(heap,
                            Client[]::select(heap,
                                             null,
                                             Client::$clients),
                            arr(k)))
   & lt(index,
        length(Client[]::select(heap,
                                null,
                                Client::$clients)))
   & !address = null
   &   boolean::select(heap,
                       address,
                       java.lang.Object::<created>)
     = TRUE
   &   java.lang.String::exactInstance(java.lang.String::select(heap,
                                                                self,
                                                                Client::$name))
     = TRUE
   &   boolean::select(heap,
                       java.lang.String::select(heap,
                                                self,
                                                Client::$name),
                       java.lang.Object::<created>)
     = TRUE
   & !  java.lang.String::select(heap,
                                 self,
                                 Client::$name)
      = null
   &   Client[]::exactInstance(Client[]::select(heap,
                                                null,
                                                Client::$clients))
     = TRUE
   &   boolean::select(heap,
                       Client[]::select(heap,
                                        null,
                                        Client::$clients),
                       java.lang.Object::<created>)
     = TRUE
   & !  Client[]::select(heap, null, Client::$clients)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Client::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || variant:=sub(length(Client[]::select(heap,
                                            null,
                                            Client::$clients)),
                    index)}
     \<{
         if (Client.clients[index]!=null&&Client.clients[index].getName().equals(address)==true) {
           result=Client.clients[index];
         }
         else 
           if (!(Client.clients[index]!=null&&Client.clients[index].getName().equals(address)==true)) {
             ;
           }
         index++;
       }\> (  lt(sub(length(Client[]::select(heap,
                                             null,
                                             Client::$clients)),
                     index),
                 variant)
            & geq(sub(length(Client[]::select(heap,
                                              null,
                                              Client::$clients)),
                      index),
                  Z(0(#))))

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "2066")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "2") (inst "sk=k_0"))
(rule "eqSymm" (formula "2") (term "1"))
(rule "polySimp_elimSub" (formula "17") (term "0,0"))
(rule "polySimp_elimSub" (formula "17") (term "0,1,0,1"))
(rule "polySimp_elimSub" (formula "17") (term "0,0,0,1"))
(rule "polySimp_addComm0" (formula "17") (term "0,0"))
(rule "polySimp_addComm0" (formula "17") (term "0,1,0,1"))
(rule "polySimp_addComm0" (formula "17") (term "0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "3"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "3") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1"))
(rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,1"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1"))
(rule "polySimp_elimOne" (formula "17") (term "1,1,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "3"))
(rule "polySimp_mulLiterals" (formula "3") (term "0"))
(rule "polySimp_elimOne" (formula "3") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "17") (term "0,1,0,0,1"))
(rule "mul_literals" (formula "17") (term "0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "17") (term "1,0,1,0,0,1"))
(rule "commute_and_2" (formula "2") (term "0,0"))
(rule "commute_and_2" (formula "2") (term "0"))
(rule "commute_and" (formula "2") (term "0,0,0"))
(rule "commute_and_2" (formula "2") (term "0,0"))
(rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "x"))
(rule "compound_assignment_3_nonsimple" (formula "17") (term "1"))
(rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "x_1"))
(rule "compound_assignment_2" (formula "17") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "17") (term "1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "x_2"))
(rule "compound_inequality_comparison_1" (formula "17") (term "1") (inst "#v0=c"))
(rule "variableDeclarationAssign" (formula "17") (term "1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "c"))
(rule "eval_order_array_access4" (formula "17") (term "1") (inst "#v0=c_arr"))
(rule "variableDeclarationAssign" (formula "17") (term "1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "c_arr"))
(rule "activeUseStaticFieldReadAccess" (formula "17") (term "1"))
(rule "assignment_read_static_attribute" (formula "17") (term "1"))
(builtin "One Step Simplification" (formula "17"))
(rule "assignment_array2" (formula "17"))
(branch "Normal Execution (c_arr != null)"
   (builtin "One Step Simplification" (formula "17"))
   (rule "inequality_comparison_simple" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "compound_assignment_1_new" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "ifthenelse_negated" (formula "17") (term "0,1,0"))
   (rule "ifElseSplit" (formula "17"))
   (branch "if x_1 true"
      (builtin "One Step Simplification" (formula "18"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "ifElseSkipThen" (formula "18") (term "1"))
      (rule "assignment" (formula "18") (term "1"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_11"))
      (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_12"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_12"))
      (rule "remove_parentheses_right" (formula "18") (term "1"))
      (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
      (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_13"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_13"))
      (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_14"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_14"))
      (rule "compound_inequality_comparison_1" (formula "18") (term "1") (inst "#v0=c"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "c_4"))
      (rule "eval_order_array_access4" (formula "18") (term "1") (inst "#v0=c_arr"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "c_arr_5"))
      (rule "activeUseStaticFieldReadAccess" (formula "18") (term "1"))
      (rule "assignment_read_static_attribute" (formula "18") (term "1"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "assignment_array2" (formula "18"))
      (branch "Normal Execution (c_arr_5 != null)"
         (builtin "One Step Simplification" (formula "18"))
         (rule "applyEq" (formula "18") (term "0,1,0") (ifseqformula "1"))
         (rule "inequality_comparison_simple" (formula "18") (term "1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "compound_assignment_1_new" (formula "18") (term "1"))
         (builtin "One Step Simplification" (formula "18"))
         (rule "arrayLengthNotNegative" (formula "4") (term "0"))
         (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "onlyCreatedObjectsAreObserved" (formula "3") (term "1,0,1,0,0,0"))
         (rule "ifElseSplit" (formula "20"))
         (branch "if x_13 true"
            (builtin "One Step Simplification" (formula "21"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "20") (term "1"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "compound_assignment_1_new" (formula "20") (term "1"))
            (builtin "One Step Simplification" (formula "20"))
            (rule "ifSplit" (formula "20"))
            (branch "if x_11 true"
               (builtin "One Step Simplification" (formula "21"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "emptyStatement" (formula "20") (term "1"))
               (rule "blockEmpty" (formula "20") (term "1"))
               (rule "postincrement" (formula "20") (term "1"))
               (rule "compound_int_cast_expression" (formula "20") (term "1") (inst "#v=x"))
               (rule "variableDeclarationAssign" (formula "20") (term "1"))
               (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_15"))
               (rule "remove_parentheses_right" (formula "20") (term "1"))
               (rule "assignmentAdditionInt" (formula "20") (term "1"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "translateJavaAddInt" (formula "20") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "20") (term "1"))
               (rule "assignment" (formula "20") (term "1"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "emptyModality" (formula "20") (term "1"))
               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "6")))
               (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
               (rule "add_literals" (formula "20") (term "0,0,1"))
               (rule "add_zero_left" (formula "20") (term "0,1"))
               (rule "polySimp_addAssoc" (formula "20") (term "1"))
               (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1"))
               (rule "add_literals" (formula "20") (term "1,0,1"))
               (rule "times_zero_1" (formula "20") (term "0,1"))
               (rule "add_zero_left" (formula "20") (term "1"))
               (rule "inEqSimp_leqRight" (formula "20"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_11 false"
               (builtin "One Step Simplification" (formula "21"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x_13 false"
            (builtin "One Step Simplification" (formula "21"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (c_arr_5 = null)"
         (builtin "One Step Simplification" (formula "19"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (c_arr_5 != null, but index Out of Bounds!)"
         (builtin "One Step Simplification" (formula "19"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "false_right" (formula "19"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0"))
         (rule "leq_literals" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x_1 false"
      (builtin "One Step Simplification" (formula "18"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "compound_equality_comparison_1" (formula "18") (term "1") (inst "#v0=x_1"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_3"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "18") (term "1") (inst "#v0=s"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "s"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "18") (term "1") (inst "#v0=c"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "c_1"))
      (rule "eval_order_array_access4" (formula "18") (term "1") (inst "#v0=c_arr"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "c_arr_1"))
      (rule "activeUseStaticFieldReadAccess" (formula "18") (term "1"))
      (rule "assignment_read_static_attribute" (formula "18") (term "1"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "assignment_array2" (formula "18"))
      (branch "Normal Execution (c_arr_1 != null)"
         (builtin "One Step Simplification" (formula "18"))
         (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_getName,result_0,exc,heapAfter_getName,anon_heap_getName") (contract "Client[Client::getName()].JML normal_behavior operation contract.0"))
         (branch "Post (getName)"
            (builtin "One Step Simplification" (formula "20"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,1,0") (ifseqformula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "notLeft" (formula "18"))
            (rule "eqSymm" (formula "16") (term "1"))
            (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "19"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "notLeft" (formula "17"))
            (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "18"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "assignment" (formula "25") (term "1"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=Client_name_0"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
            (rule "eqSymm" (formula "17"))
            (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "17"))
            (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "17"))
            (rule "hideAuxiliaryEq" (formula "17"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_equals,result_1,exc_0,heapAfter_equals,anon_heap_equals") (contract "java.lang.String[java.lang.String::equals(java.lang.Object)].stringEqualsNormal.0"))
            (branch "Post (equals)"
               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "22")))
               (builtin "One Step Simplification" (formula "26"))
               (rule "castDel" (formula "19") (term "0,1,1,0,1,1"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "21"))
               (rule "assignment" (formula "28") (term "1"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "equality_comparison_simple" (formula "28") (term "1"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "blockEmpty" (formula "28") (term "1"))
               (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "arrayLengthNotNegative" (formula "4") (term "0"))
               (rule "onlyCreatedObjectsAreObserved" (formula "3") (term "1,0,1,0,0,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "15"))
               (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "29"))
               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "12")))
               (rule "true_left" (formula "11"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,0") (ifseqformula "15"))
               (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "28"))
               (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "10")))
               (rule "true_left" (formula "8"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0,1") (ifseqformula "15"))
               (rule "ifElseSplit" (formula "31"))
               (branch "if x true"
                  (builtin "One Step Simplification" (formula "32"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "eval_order_array_access4" (formula "32") (term "1") (inst "#v0=c_arr"))
                  (rule "variableDeclarationAssign" (formula "32") (term "1"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "c_arr_4"))
                  (rule "activeUseStaticFieldReadAccess" (formula "32") (term "1"))
                  (rule "assignment_read_static_attribute" (formula "32") (term "1"))
                  (builtin "One Step Simplification" (formula "32"))
                  (rule "pullOutSelect" (formula "32") (term "0,1,0") (inst "selectSK=Client_clients_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "33") (term "0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "assignment_array2" (formula "32"))
                  (branch "Normal Execution (c_arr_4 != null)"
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "blockEmpty" (formula "32") (term "1"))
                     (rule "postincrement" (formula "32") (term "1"))
                     (rule "compound_int_cast_expression" (formula "32") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "32") (term "1"))
                     (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_10"))
                     (rule "remove_parentheses_right" (formula "32") (term "1"))
                     (rule "assignmentAdditionInt" (formula "32") (term "1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "translateJavaAddInt" (formula "32") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "32") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "32") (term "1"))
                     (rule "assignment" (formula "32") (term "1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "emptyModality" (formula "32") (term "1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "replaceKnownSelect_taclet000010_2" (formula "32") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet000010_2" (formula "32") (term "0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000010_4" (formula "32") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000010_4" (formula "32") (term "0,0,0"))
                     (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,1"))
                     (rule "add_literals" (formula "32") (term "0,0,1"))
                     (rule "add_zero_left" (formula "32") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "32") (term "1"))
                     (rule "polySimp_pullOutFactor1" (formula "32") (term "0,1"))
                     (rule "add_literals" (formula "32") (term "1,0,1"))
                     (rule "times_zero_1" (formula "32") (term "0,1"))
                     (rule "add_zero_left" (formula "32") (term "1"))
                     (rule "inEqSimp_leqRight" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Null Reference (c_arr_4 = null)"
                     (builtin "One Step Simplification" (formula "33"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (c_arr_4 != null, but index Out of Bounds!)"
                     (rule "false_right" (formula "33"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "if x false"
                  (builtin "One Step Simplification" (formula "32"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "25"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "equalityToSeqGetAndSeqLenRight" (formula "24") (inst "iv=iv"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1"))
                  (rule "nnf_imp2or" (formula "24") (term "0,1"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1"))
                  (rule "ifUnfold" (formula "32") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_4"))
                  (rule "compound_assignment_2" (formula "32") (term "1") (inst "#v=x_5"))
                  (rule "variableDeclarationAssign" (formula "32") (term "1"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_5"))
                  (rule "remove_parentheses_right" (formula "32") (term "1"))
                  (rule "compound_assignment_3_nonsimple" (formula "32") (term "1"))
                  (rule "ifElseUnfold" (formula "32") (term "1") (inst "#boolv=x_6"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_6"))
                  (rule "compound_assignment_2" (formula "32") (term "1") (inst "#v=x_7"))
                  (rule "variableDeclarationAssign" (formula "32") (term "1"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_7"))
                  (rule "compound_inequality_comparison_1" (formula "32") (term "1") (inst "#v0=c"))
                  (rule "variableDeclarationAssign" (formula "32") (term "1"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "c_2"))
                  (rule "eval_order_array_access4" (formula "32") (term "1") (inst "#v0=c_arr"))
                  (rule "variableDeclarationAssign" (formula "32") (term "1"))
                  (rule "variableDeclaration" (formula "32") (term "1") (newnames "c_arr_2"))
                  (rule "activeUseStaticFieldReadAccess" (formula "32") (term "1"))
                  (rule "assignment_read_static_attribute" (formula "32") (term "1"))
                  (builtin "One Step Simplification" (formula "32"))
                  (rule "pullOutSelect" (formula "32") (term "0,1,0") (inst "selectSK=Client_clients_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "33") (term "0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "assignment_array2" (formula "32"))
                  (branch "Normal Execution (c_arr_2 != null)"
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "pullOutSelect" (formula "32") (term "0,1,0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "13")))
                     (rule "applyEqReverse" (formula "33") (term "0,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "inequality_comparison_simple" (formula "32") (term "1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "replace_known_right" (formula "32") (term "0,0,1,0") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "compound_assignment_1_new" (formula "32") (term "1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "16"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "lenNonNegative" (formula "25") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "lenNonNegative" (formula "26") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "ifElseSplit" (formula "35"))
                     (branch "if x_6 true"
                        (builtin "One Step Simplification" (formula "36"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_6 false"
                        (builtin "One Step Simplification" (formula "36"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "compound_equality_comparison_1" (formula "35") (term "1") (inst "#v0=x_6"))
                        (rule "variableDeclarationAssign" (formula "35") (term "1"))
                        (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_8"))
                        (rule "methodCallWithAssignmentUnfoldTarget" (formula "35") (term "1") (inst "#v0=s"))
                        (rule "variableDeclaration" (formula "35") (term "1") (newnames "s_1"))
                        (rule "methodCallWithAssignmentUnfoldTarget" (formula "35") (term "1") (inst "#v0=c"))
                        (rule "variableDeclaration" (formula "35") (term "1") (newnames "c_3"))
                        (rule "eval_order_array_access4" (formula "35") (term "1") (inst "#v0=c_arr"))
                        (rule "variableDeclarationAssign" (formula "35") (term "1"))
                        (rule "variableDeclaration" (formula "35") (term "1") (newnames "c_arr_3"))
                        (rule "activeUseStaticFieldReadAccess" (formula "35") (term "1"))
                        (rule "assignment_read_static_attribute" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "replaceKnownSelect_taclet100010_2" (formula "35") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet100010_4" (formula "35") (term "0,1,0"))
                        (rule "assignment_array2" (formula "35"))
                        (branch "Normal Execution (c_arr_3 != null)"
                           (builtin "One Step Simplification" (formula "35"))
                           (rule "replaceKnownSelect_taclet0100010_5" (formula "35") (term "0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0100010_7" (formula "35") (term "0,1,0"))
                           (builtin "Use Operation Contract" (formula "35") (newnames "heapBefore_getName_0,result_2,exc_1,heapAfter_getName_0,anon_heap_getName_0") (contract "Client[Client::getName()].JML normal_behavior operation contract.0"))
                           (branch "Post (getName)"
                              (builtin "One Step Simplification" (formula "37"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,1,0") (ifseqformula "28"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1,1,0") (ifseqformula "25"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,1,1,0") (ifseqformula "21"))
                              (rule "andLeft" (formula "29"))
                              (rule "andLeft" (formula "30"))
                              (rule "andLeft" (formula "29"))
                              (rule "andLeft" (formula "30"))
                              (rule "andLeft" (formula "30"))
                              (rule "notLeft" (formula "32"))
                              (rule "eqSymm" (formula "30") (term "1"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "33"))
                              (builtin "One Step Simplification" (formula "31"))
                              (rule "notLeft" (formula "31"))
                              (rule "replace_known_right" (formula "30") (term "0,0") (ifseqformula "32"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "assignment" (formula "42") (term "1"))
                              (builtin "One Step Simplification" (formula "42"))
                              (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=Client_name_1"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "22"))
                              (rule "eqSymm" (formula "31"))
                              (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "31"))
                              (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "31"))
                              (rule "hideAuxiliaryEq" (formula "31"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Client_name_2"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                              (rule "replaceKnownSelect_taclet0010_0" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0010_1" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "23"))
                              (rule "eqSymm" (formula "2"))
                              (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "applyEq" (formula "30") (term "1,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "1,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "1,0,0,0,0") (ifseqformula "1"))
                              (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "applyEq" (formula "40") (term "0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "1"))
                              (builtin "Use Operation Contract" (formula "39") (newnames "heapBefore_equals_0,result_3,exc_2,heapAfter_equals_0,anon_heap_equals_0") (contract "java.lang.String[java.lang.String::equals(java.lang.Object)].stringEqualsNormal.0"))
                              (branch "Post (equals)"
                                 (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "37")))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "castDel" (formula "32") (term "0,1,1,0,1,1"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "assignment" (formula "43") (term "1"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "equality_comparison_simple" (formula "43") (term "1"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "blockEmpty" (formula "43") (term "1"))
                                 (rule "compound_assignment_1_new" (formula "43") (term "1"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "ifSplit" (formula "43"))
                                 (branch "if x_4 true"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "notLeft" (formula "34"))
                                    (rule "emptyStatement" (formula "44") (term "1"))
                                    (rule "blockEmpty" (formula "44") (term "1"))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "34") (inst "iv=iv"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1"))
                                    (rule "nnf_imp2or" (formula "34") (term "0,1"))
                                    (rule "nnf_notAnd" (formula "34") (term "0,0,1"))
                                    (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,1"))
                                    (rule "times_zero_1" (formula "34") (term "1,0,0,0,0,0,1"))
                                    (rule "add_literals" (formula "34") (term "0,0,0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,1"))
                                    (rule "mul_literals" (formula "34") (term "1,0,0,0,1"))
                                    (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1"))
                                    (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1"))
                                    (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1"))
                                    (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1"))
                                    (rule "postincrement" (formula "43") (term "1"))
                                    (rule "compound_int_cast_expression" (formula "43") (term "1") (inst "#v=x"))
                                    (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                    (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_9"))
                                    (rule "remove_parentheses_right" (formula "43") (term "1"))
                                    (rule "assignmentAdditionInt" (formula "43") (term "1"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "translateJavaAddInt" (formula "43") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "43") (term "0,1,0"))
                                    (rule "widening_identity_cast_5" (formula "43") (term "1"))
                                    (rule "assignment" (formula "43") (term "1"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "emptyModality" (formula "43") (term "1"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0,1,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,1,0"))
                                    (rule "add_zero_left" (formula "43") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "43") (term "0,1,0"))
                                    (rule "add_literals" (formula "43") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "43") (term "0,1,0"))
                                    (rule "add_zero_left" (formula "43") (term "1,0"))
                                    (rule "pullOutSelect" (formula "43") (term "0,0,1") (inst "selectSK=Client_clients_1"))
                                    (rule "applyEq" (formula "44") (term "0,0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replaceKnownSelect_taclet100010_2" (formula "1") (term "0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet100010_4" (formula "1") (term "0"))
                                    (rule "applyEqReverse" (formula "44") (term "0,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "44") (term "0,0,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "inEqSimp_leqRight" (formula "43"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_literals" (formula "1") (term "0"))
                                    (rule "qeq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if x_4 false"
                                    (builtin "One Step Simplification" (formula "44"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "35"))
                                    (rule "blockEmpty" (formula "44") (term "1"))
                                    (rule "applyEq" (formula "36") (term "0,0,0") (ifseqformula "35"))
                                    (builtin "One Step Simplification" (formula "36"))
                                    (rule "allRight" (formula "36") (inst "sk=iv_0"))
                                    (rule "orRight" (formula "36"))
                                    (rule "orRight" (formula "36"))
                                    (rule "inEqSimp_geqRight" (formula "37"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "37"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "37"))
                                    (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "36"))
                                    (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "36"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "closeTrue" (formula "37"))
                                 )
                              )
                              (branch "Exceptional Post (equals)"
                                 (builtin "One Step Simplification" (formula "41"))
                                 (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "37")))
                                 (rule "castDel" (formula "32") (term "0,1,1,0,1,1"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "1,0") (ifseqformula "32"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,1,0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,1,0") (ifseqformula "26"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,0,0,1,0") (ifseqformula "22"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "close" (formula "36") (ifseqformula "35"))
                              )
                              (branch "Pre (equals)"
                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "35")))
                                 (rule "wellFormedAnonEQ" (formula "39") (term "0") (ifseqformula "29"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "1") (ifseqformula "29"))
                                 (rule "wellFormedAnonEQ" (formula "39") (term "0,0") (ifseqformula "26"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,1") (ifseqformula "26"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,0,1") (ifseqformula "22"))
                                 (rule "wellFormedAnonEQ" (formula "39") (term "0,0,0") (ifseqformula "22"))
                                 (rule "replace_known_left" (formula "39") (term "1,0") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "25")) (ifInst ""  (formula "12")))
                                 (rule "closeTrue" (formula "39"))
                              )
                              (branch "Null reference (s_1 = null)"
                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "33")))
                                 (rule "closeTrue" (formula "39"))
                              )
                           )
                           (branch "Exceptional Post (getName)"
                              (builtin "One Step Simplification" (formula "37"))
                              (builtin "One Step Simplification" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,0") (ifseqformula "28"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1,0") (ifseqformula "25"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,0,1,0") (ifseqformula "21"))
                              (rule "andLeft" (formula "29"))
                              (rule "andLeft" (formula "29"))
                              (rule "andLeft" (formula "31"))
                              (rule "notLeft" (formula "29"))
                              (rule "close" (formula "32") (ifseqformula "31"))
                           )
                           (branch "Pre (getName)"
                              (builtin "One Step Simplification" (formula "35"))
                              (rule "wellFormedAnonEQ" (formula "35") (ifseqformula "25"))
                              (rule "wellFormedAnonEQ" (formula "35") (term "0") (ifseqformula "21"))
                              (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
                              (rule "closeTrue" (formula "35"))
                           )
                           (branch "Null reference (c_3 = null)"
                              (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "30")))
                              (rule "closeTrue" (formula "35"))
                           )
                        )
                        (branch "Null Reference (c_arr_3 = null)"
                           (builtin "One Step Simplification" (formula "36"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Index Out of Bounds (c_arr_3 != null, but index Out of Bounds!)"
                           (rule "false_right" (formula "36"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "1") (term "0,1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "11"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (c_arr_2 = null)"
                     (rule "false_right" (formula "33"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (c_arr_2 != null, but index Out of Bounds!)"
                     (builtin "One Step Simplification" (formula "33"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                     (rule "false_right" (formula "33"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_literals" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Exceptional Post (equals)"
               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "22")))
               (builtin "One Step Simplification" (formula "26"))
               (rule "castDel" (formula "19") (term "0,1,1,0,1,1"))
               (rule "andLeft" (formula "19"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "19"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,0") (ifseqformula "15"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "20"))
               (rule "notLeft" (formula "20"))
               (rule "close" (formula "23") (ifseqformula "22"))
            )
            (branch "Pre (equals)"
               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "20")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1") (ifseqformula "15"))
               (rule "wellFormedAnonEQ" (formula "24") (term "0") (ifseqformula "15"))
               (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
               (rule "closeTrue" (formula "24"))
            )
            (branch "Null reference (s = null)"
               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "18")))
               (rule "closeTrue" (formula "24"))
            )
         )
         (branch "Exceptional Post (getName)"
            (builtin "One Step Simplification" (formula "20"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,0") (ifseqformula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "17"))
            (rule "notLeft" (formula "15"))
            (rule "close" (formula "18") (ifseqformula "17"))
         )
         (branch "Pre (getName)"
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "12")))
            (rule "closeTrue" (formula "18"))
         )
         (branch "Null reference (c_1 = null)"
            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "13")))
            (rule "closeTrue" (formula "18"))
         )
      )
      (branch "Null Reference (c_arr_1 = null)"
         (builtin "One Step Simplification" (formula "19"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (c_arr_1 != null, but index Out of Bounds!)"
         (builtin "One Step Simplification" (formula "19"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "false_right" (formula "19"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0"))
         (rule "leq_literals" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Null Reference (c_arr = null)"
   (rule "false_right" (formula "18"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (c_arr != null, but index Out of Bounds!)"
   (rule "false_right" (formula "18"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
   (rule "andLeft" (formula "4"))
   (rule "inEqSimp_homoInEq1" (formula "4"))
   (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
   (rule "add_literals" (formula "4") (term "1,1,0"))
   (rule "times_zero_1" (formula "4") (term "1,0"))
   (rule "add_zero_right" (formula "4") (term "0"))
   (rule "leq_literals" (formula "4"))
   (rule "closeFalse" (formula "4"))
)
)

}
