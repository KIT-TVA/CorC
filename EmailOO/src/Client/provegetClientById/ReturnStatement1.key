\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Aug 25 14:35:37 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/runtime-EclipseApplication/EmailOO";\include "helper.key";\programVariables {int id; Client ret; int id_old; Client self; Heap heapAtPre;}\problem {
     !  Client[]::select(heap, null, Client::$clients)
      = null
   & geq(int::select(heap, self, Client::$id), Z(0(#)))
   & lt(int::select(heap, self, Client::$id),
        length(Client[]::select(heap,
                                null,
                                Client::$clients)))
   &   java.lang.String::exactInstance(java.lang.String::select(heap,
                                                                self,
                                                                Client::$name))
     = TRUE
   &   boolean::select(heap,
                       java.lang.String::select(heap,
                                                self,
                                                Client::$name),
                       java.lang.Object::<created>)
     = TRUE
   & !  java.lang.String::select(heap,
                                 self,
                                 Client::$name)
      = null
   &   Client[]::exactInstance(Client[]::select(heap,
                                                null,
                                                Client::$clients))
     = TRUE
   &   boolean::select(heap,
                       Client[]::select(heap,
                                        null,
                                        Client::$clients),
                       java.lang.Object::<created>)
     = TRUE
   & !  Client[]::select(heap, null, Client::$clients)
      = null
   &   java.lang.String::exactInstance(java.lang.String::select(heap,
                                                                self,
                                                                Client::$name))
     = TRUE
   &   boolean::select(heap,
                       java.lang.String::select(heap,
                                                self,
                                                Client::$name),
                       java.lang.Object::<created>)
     = TRUE
   & !  java.lang.String::select(heap,
                                 self,
                                 Client::$name)
      = null
   &   Client[]::exactInstance(Client[]::select(heap,
                                                null,
                                                Client::$clients))
     = TRUE
   &   boolean::select(heap,
                       Client[]::select(heap,
                                        null,
                                        Client::$clients),
                       java.lang.Object::<created>)
     = TRUE
   & !  Client[]::select(heap, null, Client::$clients)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Client::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || id_old:=int::select(heap, self, Client::$id)}
     \<{
         ret=Client.clients[self.id];
       }\> (    ret
              = Client::select(heap,
                               Client[]::select(heap,
                                                null,
                                                Client::$clients),
                               arr(int::select(heap,
                                               self,
                                               Client::$id)))
            &   int::select(heap, self, Client::$id)
              = id_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "164")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "eqSymm" (formula "14") (term "0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
(rule "eval_order_array_access4" (formula "14") (term "1") (inst "#v0=c_arr"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "c_arr"))
(rule "activeUseStaticFieldReadAccess" (formula "14") (term "1"))
(rule "assignment_read_static_attribute" (formula "14") (term "1"))
(builtin "One Step Simplification" (formula "14"))
(rule "eval_order_array_access5" (formula "14") (term "1") (inst "#v1=x") (inst "#ar1=c_arr_1"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "c_arr_1"))
(rule "assignment" (formula "14") (term "1"))
(builtin "One Step Simplification" (formula "14"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "x"))
(rule "assignment_read_attribute" (formula "14"))
(branch "Normal Execution (self != null)"
   (builtin "One Step Simplification" (formula "14"))
   (rule "assignment_array2" (formula "14"))
   (branch "Normal Execution (c_arr_1 != null)"
      (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "emptyModality" (formula "15") (term "1"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "closeTrue" (formula "15"))
   )
   (branch "Null Reference (c_arr_1 = null)"
      (rule "false_right" (formula "15"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (c_arr_1 != null, but x Out of Bounds!)"
      (rule "false_right" (formula "15"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (self = null)"
   (builtin "One Step Simplification" (formula "15"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
   (rule "closeFalse" (formula "1"))
)
)

}
