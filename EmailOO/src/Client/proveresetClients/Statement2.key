\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Aug 25 14:43:28 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/runtime-EclipseApplication/EmailOO";\include "helper.key";\programVariables {int index; Client self; Heap heapAtPre;}\problem {
     \forall int k;
       (     geq(k, Z(0(#)))
           & lt(k, index)
           & lt(k,
                length(Client[]::select(heap,
                                        null,
                                        Client::$clients)))
        ->   Client::select(heap,
                            Client[]::select(heap,
                                             null,
                                             Client::$clients),
                            arr(k))
           = null)
   &   int::select(heap, null, Client::$clientCounter)
     = Z(1(#))
   & geq(index, Z(0(#)))
   & lt(index,
        length(Client[]::select(heap,
                                null,
                                Client::$clients)))
   &   java.lang.String::exactInstance(java.lang.String::select(heap,
                                                                self,
                                                                Client::$name))
     = TRUE
   &   boolean::select(heap,
                       java.lang.String::select(heap,
                                                self,
                                                Client::$name),
                       java.lang.Object::<created>)
     = TRUE
   & !  java.lang.String::select(heap,
                                 self,
                                 Client::$name)
      = null
   &   Client[]::exactInstance(Client[]::select(heap,
                                                null,
                                                Client::$clients))
     = TRUE
   &   boolean::select(heap,
                       Client[]::select(heap,
                                        null,
                                        Client::$clients),
                       java.lang.Object::<created>)
     = TRUE
   & !  Client[]::select(heap, null, Client::$clients)
      = null
   &   java.lang.String::exactInstance(java.lang.String::select(heap,
                                                                self,
                                                                Client::$name))
     = TRUE
   &   boolean::select(heap,
                       java.lang.String::select(heap,
                                                self,
                                                Client::$name),
                       java.lang.Object::<created>)
     = TRUE
   & !  java.lang.String::select(heap,
                                 self,
                                 Client::$name)
      = null
   &   Client[]::exactInstance(Client[]::select(heap,
                                                null,
                                                Client::$clients))
     = TRUE
   &   boolean::select(heap,
                       Client[]::select(heap,
                                        null,
                                        Client::$clients),
                       java.lang.Object::<created>)
     = TRUE
   & !  Client[]::select(heap, null, Client::$clients)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Client::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap}
     \<{
         Client.clients[index]=null;
         index++;
       }\> (  \forall int k;
                (     geq(k, Z(0(#)))
                    & lt(k, index)
                    & lt(k,
                         length(Client[]::select(heap,
                                                 null,
                                                 Client::$clients)))
                 ->   Client::select(heap,
                                     Client[]::select(heap,
                                                      null,
                                                      Client::$clients),
                                     arr(k))
                    = null)
            &   int::select(heap,
                            null,
                            Client::$clientCounter)
              = Z(1(#))
            & geq(index, Z(0(#))))

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "514")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "4"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "4") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "eval_order_array_access1" (formula "16") (inst "#v0=c_arr"))
(rule "variableDeclarationAssign" (formula "16"))
(rule "variableDeclaration" (formula "16") (newnames "c_arr"))
(rule "activeUseStaticFieldReadAccess" (formula "16"))
(rule "assignment_read_static_attribute" (formula "16"))
(rule "assignment_to_reference_array_component" (formula "16"))
(branch "Normal Execution (c_arr != null)"
   (builtin "One Step Simplification" (formula "16"))
   (rule "inEqSimp_sepNegMonomial0" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
   (rule "polySimp_elimOne" (formula "4") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,0,0,0,1"))
   (rule "nnf_imp2or" (formula "1") (term "0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "16") (term "0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,1"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,0,0,1"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,0,1"))
   (rule "commute_or_2" (formula "1") (term "0"))
   (rule "commute_or_2" (formula "1") (term "0,0"))
   (rule "commute_or" (formula "1") (term "0,0,0"))
   (rule "postincrement" (formula "16") (term "1"))
   (rule "compound_int_cast_expression" (formula "16") (term "1") (inst "#v=x"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "x"))
   (rule "remove_parentheses_right" (formula "16") (term "1"))
   (rule "assignmentAdditionInt" (formula "16") (term "1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
   (rule "widening_identity_cast_5" (formula "16") (term "1"))
   (rule "assignment" (formula "16") (term "1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "emptyModality" (formula "16") (term "1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "dismissNonSelectedField" (formula "16") (term "0,1,0"))
   (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "2"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "dismissNonSelectedField" (formula "16") (term "0,1,1,0,0,0"))
   (rule "dismissNonSelectedField" (formula "16") (term "1,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1"))
   (rule "mul_literals" (formula "16") (term "1,1"))
   (rule "inEqSimp_subsumption1" (formula "16") (term "1") (ifseqformula "3"))
   (rule "leq_literals" (formula "16") (term "0,1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "allRight" (formula "16") (inst "sk=k_0"))
   (rule "orRight" (formula "16"))
   (rule "orRight" (formula "16"))
   (rule "orRight" (formula "16"))
   (rule "inEqSimp_geqRight" (formula "18"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "17"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_geqRight" (formula "18"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "1"))
   (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "eqSymm" (formula "1") (term "0,0"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
   (rule "times_zero_1" (formula "3") (term "0,0"))
   (rule "add_zero_left" (formula "3") (term "0"))
   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
   (rule "ifthenelse_split" (formula "1") (term "0"))
   (branch "k_0 = index TRUE"
      (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "closeTrue" (formula "22"))
   )
   (branch "k_0 = index FALSE"
      (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "17"))
      (rule "inEqSimp_contradEq3" (formula "17") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
      (rule "add_literals" (formula "17") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "17") (term "1,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0"))
      (rule "qeq_literals" (formula "17") (term "0"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "false_right" (formula "17"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
      (rule "times_zero_1" (formula "2") (term "0,0"))
      (rule "add_zero_left" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "2"))
      (rule "leq_literals" (formula "7") (term "0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "allLeft" (formula "5") (inst "t=k_0"))
      (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "21"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "5") (term "1,0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0"))
      (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0"))
      (rule "add_literals" (formula "5") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "5") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "5") (term "0,0,1,0"))
      (rule "leq_literals" (formula "5") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "5") (term "0,0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "5"))
      (rule "andLeft" (formula "4"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "1,1,0"))
      (rule "times_zero_1" (formula "4") (term "1,0"))
      (rule "add_literals" (formula "4") (term "0"))
      (rule "leq_literals" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
(branch "Null Reference (c_arr = null)"
   (rule "false_right" (formula "17"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (c_arr != null, but index Out of Bounds!)"
   (rule "false_right" (formula "17"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "5"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0"))
   (rule "polySimp_elimOne" (formula "5") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "5"))
   (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0"))
   (rule "leq_literals" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Array Store Exception (incompatible dynamic element type of c_arr and null)"
   (rule "false_right" (formula "17"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "15")))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "2"))
   (rule "array_store_known_dynamic_array_type" (formula "14") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "closeTrue" (formula "14"))
)
)

}
