\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Aug 25 13:43:49 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/corC/casestudies/Elevator";\include "helper.key";\programVariables {boolean result; Person p; boolean ret; Person p_old; boolean ret_old; int weight1_oldVal; Elevator self; Heap heapAtPre;}\problem {
     result = FALSE
   &   boolean::select(heap,
                       self,
                       Elevator::$old_contains)
     = ArrayList::contains(heap,
                           ArrayList::select(heap,
                                             self,
                                             Elevator::$persons),
                           p)
   &   boolean::select(heap,
                       self,
                       Elevator::$old_contains)
     = FALSE
   & !  Person[]::select(heap,
                         ArrayList::select(heap,
                                           self,
                                           Elevator::$persons),
                         ArrayList::$elements)
      = null
   & geq(int::select(heap, self, Elevator::$weight),
         Z(0(#)))
   &   ArrayList::exactInstance(ArrayList::select(heap,
                                                  self,
                                                  Elevator::$persons))
     = TRUE
   &   boolean::select(heap,
                       ArrayList::select(heap,
                                         self,
                                         Elevator::$persons),
                       java.lang.Object::<created>)
     = TRUE
   & !  ArrayList::select(heap,
                          self,
                          Elevator::$persons)
      = null
   &   Environment::exactInstance(Environment::select(heap,
                                                      self,
                                                      Elevator::$env))
     = TRUE
   &   boolean::select(heap,
                       Environment::select(heap,
                                           self,
                                           Elevator::$env),
                       java.lang.Object::<created>)
     = TRUE
   & !  Environment::select(heap, self, Elevator::$env)
      = null
   &   boolean[]::exactInstance(boolean[]::select(heap,
                                                  self,
                                                  Elevator::$floorButtons))
     = TRUE
   &   boolean::select(heap,
                       boolean[]::select(heap,
                                         self,
                                         Elevator::$floorButtons),
                       java.lang.Object::<created>)
     = TRUE
   & !  boolean[]::select(heap,
                          self,
                          Elevator::$floorButtons)
      = null
   & Person::exactInstance(p) = TRUE
   &   boolean::select(heap,
                       p,
                       java.lang.Object::<created>)
     = TRUE
   & !p = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Elevator::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || p_old:=p
    || ret_old:=ret
    || weight1_oldVal:=int::select(heap,
                                   self,
                                   Elevator::$weight)}
     \<{
         ;
       }\> (  (     (     boolean::select(heap,
                                          self,
                                          Elevator::$old_contains)
                        = TRUE
                     ->   result = TRUE
                        &   Person::isDestinationReached(heap,
                                                         p)
                          = TRUE
                        &   ArrayList::contains(heap,
                                                ArrayList::select(heap,
                                                                  self,
                                                                  Elevator::$persons),
                                                p)
                          = FALSE
                        &   int::select(heap,
                                        self,
                                        Elevator::$weight)
                          = sub(weight1_oldVal,
                                Person::getWeight(heap,
                                                  p)))
                  &   boolean::select(heap,
                                      self,
                                      Elevator::$old_contains)
                    = FALSE
               -> result = FALSE)
            & p = p_old
            & ret = ret_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "108")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "eqSymm" (formula "23") (term "1,0,1"))
(rule "eqSymm" (formula "23") (term "1,0,0,1"))
(rule "eqSymm" (formula "1"))
(rule "polySimp_elimSub" (formula "23") (term "1,1,1,0,0,0,0,0,1"))
(rule "emptyStatement" (formula "23") (term "1"))
(rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "16"))
(builtin "One Step Simplification" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "emptyModality" (formula "23") (term "1"))
(builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "15")))
(rule "closeTrue" (formula "23"))
)

}
