\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Aug 24 15:52:32 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/corC/casestudies/Elevator";\include "helper.key";\programVariables {int id; boolean ret; int id_old; Environment self; Heap heapAtPre;}\problem {
     !  Floor[]::select(heap,
                        self,
                        Environment::$floors)
      = null
   & geq(length(Floor[]::select(heap,
                                self,
                                Environment::$floors)),
         Z(0(#)))
   & geq(id, Z(0(#)))
   &   Floor[]::exactInstance(Floor[]::select(heap,
                                              self,
                                              Environment::$floors))
     = TRUE
   &   boolean::select(heap,
                       Floor[]::select(heap,
                                       self,
                                       Environment::$floors),
                       java.lang.Object::<created>)
     = TRUE
   & !  Floor[]::select(heap,
                        self,
                        Environment::$floors)
      = null
   &   Floor[]::exactInstance(Floor[]::select(heap,
                                              self,
                                              Environment::$floors))
     = TRUE
   &   boolean::select(heap,
                       Floor[]::select(heap,
                                       self,
                                       Environment::$floors),
                       java.lang.Object::<created>)
     = TRUE
   & !  Floor[]::select(heap,
                        self,
                        Environment::$floors)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Environment::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap || id_old:=id}
     \<{
         ret=(id==self.floors.length-1);
       }\> (  (     id
                  = sub(length(Floor[]::select(heap,
                                               self,
                                               Environment::$floors)),
                        Z(1(#)))
               -> ret = TRUE)
            & (   !  id
                   = sub(length(Floor[]::select(heap,
                                                self,
                                                Environment::$floors)),
                         Z(1(#)))
               -> ret = FALSE)
            & id = id_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "209")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "eqSymm" (formula "11") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "11") (term "0,0,1,0,0,1"))
(rule "eqSymm" (formula "11") (term "1,0,1"))
(rule "polySimp_elimSub" (formula "11") (term "0,0,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "11") (term "0,0,0,1,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,1"))
(rule "polySimp_homoEq" (formula "11") (term "0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "11") (term "0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "11") (term "0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "11") (term "0,0,0,0,1,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "11") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "11") (term "0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0,1"))
(rule "remove_parentheses_right" (formula "11") (term "1"))
(rule "compound_equality_comparison_2" (formula "11") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
(rule "assignment" (formula "11") (term "1"))
(builtin "One Step Simplification" (formula "11"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
(rule "compound_subtraction_1" (formula "11") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
(rule "eval_order_array_access6" (formula "11") (term "1") (inst "#v0=f_arr"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "f_arr"))
(rule "assignment_read_attribute" (formula "11"))
(branch "Normal Execution (self != null)"
   (builtin "One Step Simplification" (formula "11"))
   (rule "assignment_read_length" (formula "11"))
   (branch "Normal Execution (f_arr != null)"
      (builtin "One Step Simplification" (formula "11"))
      (rule "assignmentSubtractionInt" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
      (rule "polySimp_elimSub" (formula "11") (term "0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,1,0"))
      (rule "equality_comparison_simple" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "polySimp_homoEq" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
      (rule "polySimp_sepPosMonomial" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "closeTrue" (formula "11"))
   )
   (branch "Null Reference (f_arr = null)"
      (rule "false_right" (formula "12"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (self = null)"
   (builtin "One Step Simplification" (formula "12"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
   (rule "closeFalse" (formula "1"))
)
)

}
