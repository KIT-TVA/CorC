\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Aug 24 15:46:33 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/corC/casestudies/Elevator";\include "helper.key";\programVariables {int index; int numFloors; int numFloors_old; Environment self; Heap heapAtPre;}\problem {
     geq(index, Z(0(#)))
   &   length(Floor[]::select(heap,
                              self,
                              Environment::$floors))
     = numFloors
   & \forall int k;
       (     gt(k, Z(0(#)))
           & lt(k, index)
           & lt(k,
                length(Floor[]::select(heap,
                                       self,
                                       Environment::$floors)))
        ->     int::select(heap,
                           Floor::select(heap,
                                         Floor[]::select(heap,
                                                         self,
                                                         Environment::$floors),
                                         arr(k)),
                           Floor::$thisFloorID)
             = k
           &   Environment::select(heap,
                                   Floor::select(heap,
                                                 Floor[]::select(heap,
                                                                 self,
                                                                 Environment::$floors),
                                                 arr(k)),
                                   Floor::$env)
             = self)
   & lt(index,
        length(Floor[]::select(heap,
                               self,
                               Environment::$floors)))
   & geq(numFloors, Z(0(#)))
   & geq(index, Z(0(#)))
   &   Floor[]::exactInstance(Floor[]::select(heap,
                                              self,
                                              Environment::$floors))
     = TRUE
   &   boolean::select(heap,
                       Floor[]::select(heap,
                                       self,
                                       Environment::$floors),
                       java.lang.Object::<created>)
     = TRUE
   & !  Floor[]::select(heap,
                        self,
                        Environment::$floors)
      = null
   &   Floor[]::exactInstance(Floor[]::select(heap,
                                              self,
                                              Environment::$floors))
     = TRUE
   &   boolean::select(heap,
                       Floor[]::select(heap,
                                       self,
                                       Environment::$floors),
                       java.lang.Object::<created>)
     = TRUE
   & !  Floor[]::select(heap,
                        self,
                        Environment::$floors)
      = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & Environment::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap || numFloors_old:=numFloors}
     \<{
         self.floors[index]=new Floor (self,index);
         index=index+1;
       }\> (  geq(index, Z(0(#)))
            &   length(Floor[]::select(heap,
                                       self,
                                       Environment::$floors))
              = numFloors
            & \forall int k;
                (     gt(k, Z(0(#)))
                    & lt(k, index)
                    & lt(k,
                         length(Floor[]::select(heap,
                                                self,
                                                Environment::$floors)))
                 ->     int::select(heap,
                                    Floor::select(heap,
                                                  Floor[]::select(heap,
                                                                  self,
                                                                  Environment::$floors),
                                                  arr(k)),
                                    Floor::$thisFloorID)
                      = k
                    &   Environment::select(heap,
                                            Floor::select(heap,
                                                          Floor[]::select(heap,
                                                                          self,
                                                                          Environment::$floors),
                                                          arr(k)),
                                            Floor::$env)
                      = self)
            & numFloors = numFloors_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "1432")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "14") (term "1,0,1"))
(rule "inEqSimp_gtToGeq" (formula "14") (term "0,0,0,0,1,0,0,1"))
(rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,1,0,0,1"))
(rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "3"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "3") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
(rule "inEqSimp_gtToGeq" (formula "2") (term "0,0,0,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0"))
(rule "eval_order_array_access1" (formula "14") (term "1") (inst "#v0=f_arr"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "f_arr"))
(rule "assignment_read_attribute" (formula "14"))
(branch "Normal Execution (self != null)"
   (builtin "One Step Simplification" (formula "14"))
   (rule "eval_order_array_access3" (formula "14") (term "1") (inst "#v1=f") (inst "#v2=x") (inst "#v0=f_arr_1"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "f_arr_1"))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x"))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "f"))
   (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0,0,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "14") (term "0,1,0,0,1"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0,0,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0,0,1"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,1,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0,1,0,0,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,1,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,1,0,0,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0,0,1"))
   (rule "commute_and" (formula "2") (term "1,0"))
   (rule "cnf_rightDist" (formula "2") (term "0"))
   (rule "distr_forallAnd" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "3") (term "0"))
   (rule "commute_or_2" (formula "2") (term "0"))
   (rule "commute_or_2" (formula "2") (term "0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0"))
   (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_Floor,self_0,exc,heapAfter_Floor,anon_heap_Floor") (contract "Floor[Floor::Floor(Environment,int)].JML normal_behavior operation contract.0"))
   (branch "Post (Floor)"
      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
      (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "14"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,1,0,1,0") (ifseqformula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "16"))
      (rule "notLeft" (formula "16"))
      (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "assignment" (formula "25") (term "1"))
      (builtin "One Step Simplification" (formula "25"))
      (rule "assignment_to_reference_array_component" (formula "25"))
      (branch "Normal Execution (f_arr_1 != null)"
         (builtin "One Step Simplification" (formula "25"))
         (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=Floor_waiting_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
         (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=Floor_env_0"))
         (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
         (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "19"))
         (rule "hideAuxiliaryEq" (formula "19"))
         (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=Floor_thisFloorID_0"))
         (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
         (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "18"))
         (rule "hideAuxiliaryEq" (formula "18"))
         (rule "assignmentAdditionInt" (formula "25") (term "1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "translateJavaAddInt" (formula "25") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "25") (term "0,1,0"))
         (rule "emptyModality" (formula "25") (term "1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "dismissNonSelectedField" (formula "25") (term "0,1,1,0,1"))
         (rule "dismissNonSelectedField" (formula "25") (term "0,0,1,0"))
         (rule "dismissNonSelectedField" (formula "25") (term "0,1,1,0,0,1"))
         (rule "dismissNonSelectedField" (formula "25") (term "0,0,1,0,1"))
         (rule "dismissNonSelectedField" (formula "25") (term "1,1,0,1,1,0,1"))
         (rule "dismissNonSelectedField" (formula "25") (term "1,1,0,0,1,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0"))
         (rule "inEqSimp_subsumption1" (formula "25") (term "0,0") (ifseqformula "6"))
         (rule "leq_literals" (formula "25") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "pullOutSelect" (formula "25") (term "0,1,1,0,0,1") (inst "selectSK=Environment_floors_0"))
         (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,1,0,1,1,0,1") (ifseqformula "1"))
         (rule "applyEq" (formula "26") (term "1,1,0,0,1,0,1") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "10")))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "26") (term "0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,1,0,0,1,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "1,1,0,1,1,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "26") (term "0,1,1,0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "25"))
         (rule "allRight" (formula "25") (inst "sk=k_0"))
         (rule "orRight" (formula "25"))
         (rule "orRight" (formula "25"))
         (rule "orRight" (formula "25"))
         (rule "inEqSimp_geqRight" (formula "27"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "27"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_leqRight" (formula "27"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "4"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1"))
         (rule "polySimp_elimOne" (formula "2") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "pullOutSelect" (formula "28") (term "1,0,0") (inst "selectSK=arr_0"))
         (rule "applyEq" (formula "29") (term "1,0,1") (ifseqformula "1"))
         (rule "simplifySelectOfStore" (formula "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0"))
         (rule "pullOutSelect" (formula "29") (term "0,0") (inst "selectSK=Floor_thisFloorID_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "30") (term "0"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1") (term "1,0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "pullOutSelect" (formula "30") (term "0,1") (inst "selectSK=Floor_env_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "31") (term "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1") (term "0,0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=arr_1"))
         (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "21"))
         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "30")) (ifInst ""  (formula "15")))
         (rule "elementOfUnion" (formula "3") (term "0,0"))
         (rule "elementOfSingleton" (formula "3") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "elementOfUnion" (formula "3") (term "0,0"))
         (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "elementOfSingleton" (formula "3") (term "0,0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
         (rule "hideAuxiliaryEq" (formula "3"))
         (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
         (rule "mul_literals" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4"))
         (rule "mul_literals" (formula "4") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "4"))
         (rule "leq_literals" (formula "13") (term "0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "commute_and" (formula "31"))
         (rule "cnf_rightDist" (formula "2") (term "0,0"))
         (rule "commute_or" (formula "2") (term "1,0,0"))
         (rule "commute_or" (formula "2") (term "0,0,0"))
         (rule "cnf_rightDist" (formula "1") (term "0,0"))
         (rule "commute_or" (formula "1") (term "0,0,0"))
         (rule "commute_or" (formula "1") (term "1,0,0"))
         (rule "arrayLengthNotNegative" (formula "8") (term "0"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
         (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0,0") (ifseqformula "18"))
         (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "15"))
         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "30")))
         (rule "true_left" (formula "13"))
         (rule "ifthenelse_split" (formula "3") (term "0"))
         (branch "k_0 = index TRUE"
            (rule "applyEqReverse" (formula "1") (term "1,0,0,1,1,0,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "2") (term "1,0,0,1,1,0,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "1") (term "1,0,1,0,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "27")))
            (rule "applyEqReverse" (formula "2") (term "1,1,0,0,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")) (ifInst ""  (formula "4")) (ifInst ""  (formula "27")))
            (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "32") (term "1,1") (ifseqformula "2"))
            (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "eqSymm" (formula "29") (term "1"))
            (rule "eqSymm" (formula "29") (term "0"))
            (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "29"))
            (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "1"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "27") (term "0") (ifseqformula "20"))
            (rule "eqSymm" (formula "27"))
            (rule "close" (formula "27") (ifseqformula "1"))
         )
         (branch "k_0 = index FALSE"
            (rule "applyEqReverse" (formula "2") (term "1,0,1,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "1") (term "1,1,0,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "1") (term "1,0,1,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "1") (term "1,0,0,1,1,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "2") (term "1,0,0,1,1,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "2") (term "1,1,0,0,0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "eqSymm" (formula "2") (term "0,1,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0,0"))
            (rule "eqSymm" (formula "1") (term "0,1,0,0"))
            (rule "eqSymm" (formula "2") (term "1,0,0,0"))
            (rule "inEqSimp_strengthen0" (formula "5") (ifseqformula "25"))
            (rule "inEqSimp_contradEq3" (formula "25") (ifseqformula "5"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
            (rule "add_literals" (formula "25") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "25") (term "1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0"))
            (rule "qeq_literals" (formula "25") (term "0"))
            (builtin "One Step Simplification" (formula "25"))
            (rule "false_right" (formula "25"))
            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
            (rule "mul_literals" (formula "4") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0"))
            (rule "add_literals" (formula "4") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
            (rule "leq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "ifthenelse_split" (formula "2") (term "0"))
            (branch " (!self.floors[k_0] = null | self.floors[k_0] = self_0) & ( self.floors[k_0] = self_0 | !self.floors[k_0].<created> = TRUE) TRUE"
               (rule "andLeft" (formula "2"))
               (rule "applyEqReverse" (formula "32") (term "1,1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "eqSymm" (formula "31") (term "1"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
               (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "30") (term "0"))
               (rule "allLeft" (formula "9") (inst "t=k_0"))
               (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
               (rule "inEqSimp_contradInEq0" (formula "9") (term "1,0,0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
               (rule "leq_literals" (formula "9") (term "0,1,0,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "9") (term "0,0,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0"))
               (rule "leq_literals" (formula "9") (term "0,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "allLeft" (formula "8") (inst "t=k_0"))
               (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "8") (term "1,0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
               (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
               (rule "leq_literals" (formula "8") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "8") (term "0,1,0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
               (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "8") (term "0,0,1"))
               (rule "leq_literals" (formula "8") (term "0,1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0") (ifseqformula "20"))
               (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
               (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "32"))
               (builtin "One Step Simplification" (formula "26"))
               (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "27"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "20"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "cut_direct" (formula "3") (term "0"))
               (branch "CUT: self.floors[k_0] = self_0 TRUE"
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "referencedObjectIsCreatedRightEQ" (formula "30") (ifseqformula "3") (ifseqformula "31"))
                  (rule "close" (formula "30") (ifseqformula "21"))
               )
               (branch "CUT: self.floors[k_0] = self_0 FALSE"
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "notLeft" (formula "3"))
                  (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "29"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "27"))
                  (rule "close" (formula "28") (ifseqformula "18"))
               )
            )
            (branch " (!self.floors[k_0] = null | self.floors[k_0] = self_0) & ( self.floors[k_0] = self_0 | !self.floors[k_0].<created> = TRUE) FALSE"
               (rule "applyEqReverse" (formula "31") (term "1,1") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "eqSymm" (formula "30") (term "1"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "29") (term "0"))
               (rule "andRight" (formula "23"))
               (branch
                  (rule "orRight" (formula "23"))
                  (rule "notRight" (formula "23"))
                  (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "24"))
                  (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "29") (term "1,0,1") (ifseqformula "1"))
                  (rule "allLeft" (formula "7") (inst "t=k_0"))
                  (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
                  (rule "applyEq" (formula "7") (term "1,0,0,0,0") (ifseqformula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,1"))
                  (rule "leq_literals" (formula "7") (term "0,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq0" (formula "7") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "7") (term "0,0,1"))
                  (rule "leq_literals" (formula "7") (term "0,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "7") (term "0,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "30"))
                  (rule "allLeft" (formula "9") (inst "t=k_0"))
                  (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                  (rule "applyEq" (formula "9") (term "1,0,1") (ifseqformula "1"))
                  (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "31"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "9") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_contradInEq0" (formula "9") (term "0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "5"))
                  (rule "andLeft" (formula "9"))
                  (rule "inEqSimp_homoInEq1" (formula "9"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                  (rule "add_literals" (formula "9") (term "1,1,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0"))
                  (rule "add_literals" (formula "9") (term "0"))
                  (rule "leq_literals" (formula "9"))
                  (rule "closeFalse" (formula "9"))
               )
               (branch
                  (rule "orRight" (formula "23"))
                  (rule "notRight" (formula "24"))
                  (rule "allLeft" (formula "7") (inst "t=k_0"))
                  (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "7") (term "0,1,0,0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq0" (formula "7") (term "1,0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "7") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "7") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1"))
                  (rule "leq_literals" (formula "7") (term "0,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "allLeft" (formula "9") (inst "t=k_0"))
                  (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "32"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "9") (term "1,0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "9") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "9") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                  (rule "add_literals" (formula "9") (term "0,0,1"))
                  (rule "leq_literals" (formula "9") (term "0,1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "closeFalse" (formula "9"))
               )
            )
         )
      )
      (branch "Null Reference (f_arr_1 = null)"
         (rule "false_right" (formula "26"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (f_arr_1 != null, but x Out of Bounds!)"
         (rule "false_right" (formula "26"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
         (rule "qeq_literals" (formula "1") (term "0,1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Array Store Exception (incompatible dynamic element type of f_arr_1 and f)"
         (rule "false_right" (formula "26"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "7")))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "2"))
         (rule "array_store_known_dynamic_array_type" (formula "21") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "23")))
         (rule "closeTrue" (formula "21"))
      )
   )
   (branch "Exceptional Post (Floor)"
      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
      (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "14"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,0,0") (ifseqformula "14"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,1,0,1,0") (ifseqformula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "21"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "15"))
      (rule "close" (formula "22") (ifseqformula "21"))
   )
   (branch "Pre (Floor)"
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")) (ifInst ""  (formula "6")) (ifInst ""  (formula "14")) (ifInst ""  (formula "12")) (ifInst ""  (formula "14")) (ifInst ""  (formula "9")))
      (rule "closeTrue" (formula "15"))
   )
)
(branch "Null Reference (self = null)"
   (rule "false_right" (formula "15"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
   (rule "closeFalse" (formula "1"))
)
)

}
