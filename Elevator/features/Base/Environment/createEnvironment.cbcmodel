<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="createEnvironment" proven="true" comment="" className="Environment" methodName="createEnvironment">
    <statement name="statement" id="bec509c2-8518-4811-af90-67b4b46ae9c5">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="623a6ca6-17db-4b01-b8c6-c94b79c57196">
        <firstStatement name="statement1" id="3e368958-ac4d-4333-bcd9-69d0a11840bc">
          <refinement name="index = 0;&#xD;&#xA;this.floors = new Floor[numFloors];" proven="true" id="f63a0d95-c70a-46e5-888e-3ca37330d14d">
            <postCondition name="index = 0 &#xD;&#xA;&amp; this.floors.&lt;created> = TRUE &#xD;&#xA;&amp; this.floors.length = numFloors">
              <modifiables>index</modifiables>
              <modifiables>this.floors</modifiables>
            </postCondition>
            <preCondition name="numFloors >= 0"/>
          </refinement>
          <postCondition name="index = 0 &#xD;&#xA;&amp; this.floors.&lt;created> = TRUE &#xD;&#xA;&amp; this.floors.length = numFloors">
            <modifiables>index</modifiables>
            <modifiables>this.floors</modifiables>
          </postCondition>
          <preCondition name="numFloors >= 0"/>
        </firstStatement>
        <secondStatement name="statement2" id="35fc9429-154a-49fb-84cf-e71158df50ad">
          <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" id="4a1def82-5eef-46b2-a8a0-6ec239a4e407" variantProven="true" preProven="true" postProven="true">
            <postCondition name="this.floors.length = numFloors&amp; (\forall int k;((k>0 &amp; k&lt;this.floors.length -> (this.floors[k].thisFloorID = k &amp; this.floors[k].env = this))))">
              <modifiables>index</modifiables>
              <modifiables>this.floors</modifiables>
            </postCondition>
            <preCondition name="index = 0 &#xD;&#xA;&amp; this.floors.&lt;created> = TRUE &#xD;&#xA;&amp; this.floors.length = numFloors">
              <modifiables>index</modifiables>
              <modifiables>this.floors</modifiables>
            </preCondition>
            <loopStatement name="loop" id="93b1f05d-ca62-4f25-98ee-88674b79a3e0">
              <refinement name="this.floors[index] = new Floor(this, index); index = index + 1;" proven="true" id="af547c10-307b-448b-b82e-ccf587e1b345">
                <postCondition name="index >= 0 &amp; this.floors.length = numFloors &amp;(\forall int k;(((k>0 &amp; k&lt;index &amp; k&lt;this.floors.length) -> (this.floors[k].thisFloorID = k &amp; this.floors[k].env = this ))))">
                  <modifiables>index</modifiables>
                  <modifiables>this.floors</modifiables>
                  <modifiables>this.floors[index]</modifiables>
                </postCondition>
                <preCondition name="(index >= 0 &amp; this.floors.length = numFloors &amp;(\forall int k;(((k>0 &amp; k&lt;index &amp; k&lt;this.floors.length) -> (this.floors[k].thisFloorID = k &amp; this.floors[k].env = this ))))) &amp; (index &lt; this.floors.length)">
                  <modifiables>index</modifiables>
                  <modifiables>this.floors</modifiables>
                </preCondition>
              </refinement>
              <postCondition name="index >= 0 &amp; this.floors.length = numFloors &amp;(\forall int k;(((k>0 &amp; k&lt;index &amp; k&lt;this.floors.length) -> (this.floors[k].thisFloorID = k &amp; this.floors[k].env = this ))))">
                <modifiables>index</modifiables>
                <modifiables>this.floors</modifiables>
                <modifiables>this.floors[index]</modifiables>
              </postCondition>
              <preCondition name="(index >= 0 &amp; this.floors.length = numFloors &amp;(\forall int k;(((k>0 &amp; k&lt;index &amp; k&lt;this.floors.length) -> (this.floors[k].thisFloorID = k &amp; this.floors[k].env = this ))))) &amp; (index &lt; this.floors.length)">
                <modifiables>index</modifiables>
                <modifiables>this.floors</modifiables>
              </preCondition>
            </loopStatement>
            <variant name="(this.floors.length - index)"/>
            <invariant name="index >= 0 &amp; this.floors.length = numFloors &amp;(\forall int k;(((k>0 &amp; k&lt;index &amp; k&lt;this.floors.length) -> (this.floors[k].thisFloorID = k &amp; this.floors[k].env = this ))))"/>
            <guard name="index &lt; this.floors.length"/>
          </refinement>
          <postCondition name="this.floors.length = numFloors&amp; (\forall int k;((k>0 &amp; k&lt;this.floors.length -> (this.floors[k].thisFloorID = k &amp; this.floors[k].env = this))))">
            <modifiables>index</modifiables>
            <modifiables>this.floors</modifiables>
            <modifiables>this.floors[index]</modifiables>
          </postCondition>
          <preCondition name="index = 0 &#xD;&#xA;&amp; this.floors.&lt;created> = TRUE &#xD;&#xA;&amp; this.floors.length = numFloors">
            <modifiables>index</modifiables>
            <modifiables>this.floors</modifiables>
          </preCondition>
        </secondStatement>
        <intermediateCondition name="index = 0 &#xD;&#xA;&amp; this.floors.&lt;created> = TRUE &#xD;&#xA;&amp; this.floors.length = numFloors">
          <modifiables>index</modifiables>
          <modifiables>this.floors</modifiables>
        </intermediateCondition>
      </refinement>
      <postCondition name="this.floors.length = numFloors&amp; (\forall int k;((k>0 &amp; k&lt;this.floors.length -> (this.floors[k].thisFloorID = k &amp; this.floors[k].env = this))))">
        <modifiables>index</modifiables>
        <modifiables>this.floors</modifiables>
        <modifiables>this.floors[index]</modifiables>
      </postCondition>
      <preCondition name="numFloors >= 0"/>
    </statement>
    <preCondition name="pre"/>
    <postCondition name="post"/>
    <methodObj href="Environment.cbcclass#//@methods.2"/>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int index"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="numFloors >= 0"/>
    <conditions name="index >= 0"/>
  </cbcmodel:GlobalConditions>
</xmi:XMI>
