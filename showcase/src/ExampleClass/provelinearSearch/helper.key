\predicates {
	app(int[], int, int, int);
	maxi(int[], int, int, int);
	sort(int[], int, int, int);
	s(int[], int, int, int);
	c(int[], int, int, int);
}

\rules {
	app{
		\schemaVar \term int[] A;
		\schemaVar \term int begin;
		\schemaVar \term int end;
		\schemaVar \term int search;
		\schemaVar \variable int q;
		\find (app(A, begin, end, search))
		\varcond (\notFreeIn(q, A), \notFreeIn(q, begin), \notFreeIn(q, end), \notFreeIn(q, search))
		\replacewith (\exists q; (q >= begin & q < end & A[q]=search))
		\heuristics(simplify)
	};

	maxi{
		\schemaVar \term int[] A;
		\schemaVar \term int begin;
		\schemaVar \term int end;
		\schemaVar \term int max;
		\schemaVar \variable int q;
		\find (maxi(A, begin, end, max))
		\varcond (\notFreeIn(q, A), \notFreeIn(q, begin), \notFreeIn(q, end), \notFreeIn(q, max))
		\replacewith (\forall q; ((q >= begin & q < end) -> A[max]>=A[q]))
		\heuristics(simplify)
	};

	sort{
		\schemaVar \term int[] A;
		\schemaVar \term int begin;
		\schemaVar \term int end;
		\schemaVar \term int max;
		\schemaVar \variable int q;
		\find (sort(A, begin, end, max))
		\varcond (\notFreeIn(q, A), \notFreeIn(q, begin), \notFreeIn(q, end), \notFreeIn(q, max))
		\replacewith (\forall q; ((q >= 1 & q < length(A)) -> A[q-1]<=A[q]))
		\heuristics(simplify)
	};

	s{
		\schemaVar \term int[] A;
		\schemaVar \term int wb;
		\schemaVar \term int wt;
		\schemaVar \term int bb;
		\find (s(A, wb, wt, bb))
		\replacewith (c(A,0,wb,0) & c(A,wb,wt,1) & c(A,bb,length(A),2) & 0<=wb & wb<=wt & wt<=bb & bb<=length(A))
		\heuristics(simplify)
	};

	c{
		\schemaVar \term int[] A;
		\schemaVar \term int l;
		\schemaVar \term int h;
		\schemaVar \term int s;
		\schemaVar \variable int q;
		\find (c(A, l, h, s))
		\varcond (\notFreeIn(q, A), \notFreeIn(q, l), \notFreeIn(q, h), \notFreeIn(q, s))
		\replacewith ((\forall q; ((q >= l & q < h) -> A[q]=s)))
		\heuristics(simplify)
	};

}