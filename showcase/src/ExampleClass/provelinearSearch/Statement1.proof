\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "optimisedSelectRules" : "optimisedSelectRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 2147483647,
        "Timeout" : -1,
        "options" : { 
            "ABSTRACT_PROOF_FIRST_ORDER_GOALS_FORBIDDEN" : "true",
            "ABSTRACT_PROOF_FORBIDDEN_RULES" : "",
            "ABSTRACT_PROOF_FORBIDDEN_RULE_SETS" : "",
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_EXPAND",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_OFF",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_OFF",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_NONCLOSE",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\include "helper.key";
\javaSource "C:/Users/Fynn/Desktop/CorC/showcase";
\programVariables {
int[] A;
int x;
int i;
int[] A_old;
int x_old;
ExampleClass self;
Heap heapAtPre;
}
\problem {
     app(A, x, Z(0(#)), length(A))
   & lt(length(A), Z(0(1(#))))
   & gt(length(A), Z(0(#)))
   & !A = null
   & app(A, x, Z(0(#)), length(A))
   & geq(i, Z(0(#)))
   & lt(i, length(A))
   &   boolean::select(heap,
                       A,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       A,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       A_old,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & ExampleClass::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap || A_old:=A || x_old:=x}
     \<{
       i = A.length;
     }\> (i = length(A) & A = A_old & x = x_old)
}

\proof {
(keyLog "0" (keyUser "Fynn" ) (keyVersion "255661ae2f2ff3b2df9506575116825ddb2e1159"))

(autoModeTime "130")

(branch "dummy ID"
(rule "eq_and_2" (formula "1") (term "0,0,0,0,0,0,0"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "14") (term "0,0,0,1"))
(rule "eqSymm" (formula "14") (term "1,0,0,1"))
(rule "eqSymm" (formula "14") (term "1,0,1"))
(rule "app" (formula "3") (inst "q=q"))
(rule "exLeft" (formula "3") (inst "sk=q_0"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "inEqSimp_gtToGeq" (formula "2"))
(rule "times_zero_1" (formula "2") (term "1,0,0"))
(rule "add_zero_right" (formula "2") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "1"))
(rule "mul_literals" (formula "1") (term "1,0,0"))
(rule "add_literals" (formula "1") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "4"))
(rule "times_zero_1" (formula "4") (term "1,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0"))
(rule "inEqSimp_commuteGeq" (formula "3"))
(rule "assignment_read_length" (formula "16"))
(branch "Normal Execution (A != null)"
   (rule "sequentialToParallel2" (formula "16"))
   (rule "simplifyUpdate3" (formula "16") (term "1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "polySimp_elimOne" (formula "7") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "mul_literals" (formula "2") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
   (rule "mul_literals" (formula "4") (term "1"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
   (rule "polySimp_rightDist" (formula "7") (term "0,0"))
   (rule "mul_literals" (formula "7") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "add_literals" (formula "7") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "polySimp_elimOne" (formula "7") (term "0"))
   (rule "emptyModality" (formula "17") (term "1"))
   (rule "applyOnRigidFormula" (formula "17"))
   (rule "simplifyUpdate2" (formula "17") (term "1"))
   (rule "simplifyUpdate2" (formula "17") (term "0"))
   (rule "applyOnRigidFormula" (formula "17") (term "1"))
   (rule "simplifyUpdate1" (formula "17") (term "1,1"))
   (rule "applyOnPV" (formula "17") (term "0,1"))
   (rule "eqClose" (formula "17") (term "1"))
   (rule "concrete_and_3" (formula "17"))
   (rule "applyOnRigidFormula" (formula "17"))
   (rule "simplifyUpdate2" (formula "17") (term "1"))
   (rule "simplifyUpdate2" (formula "17") (term "0"))
   (rule "applyOnRigidFormula" (formula "17") (term "1"))
   (rule "applyOnPV" (formula "17") (term "0,1"))
   (rule "simplifyUpdate1" (formula "17") (term "1,1"))
   (rule "eqClose" (formula "17") (term "1"))
   (rule "concrete_and_3" (formula "17"))
   (rule "applyOnRigidFormula" (formula "17"))
   (rule "applyOnPV" (formula "17") (term "1"))
   (rule "simplifyUpdate1" (formula "17") (term "0"))
   (rule "eqClose" (formula "17"))
   (rule "closeTrue" (formula "17"))
)
(branch "Null Reference (A = null)"
   (rule "false_right" (formula "17"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "close" (formula "15") (ifseqformula "1"))
)
)
}
