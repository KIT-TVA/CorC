<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:de.tu-bs.cs.isf.cbc.cbcmodel="http://www.example.org/cbcmodel">
  <de.tu-bs.cs.isf.cbc.cbcmodel:CbCFormula name="linearSearch" comment="" className="ExampleClass" methodName="linearSearch">
    <statement name="statement" id="c4f2c739-0cfa-4c67-8daa-0c6520577807">
      <refinement xsi:type="de.tu-bs.cs.isf.cbc.cbcmodel:CompositionStatement" name="compositionStatement" id="83e98505-c080-4d60-a32d-106541ee636b">
        <firstStatement name="statement1" id="e1fcef87-3300-4b4b-b9fd-a96dcd2bf438">
          <refinement name="i = A.length;" proven="true" id="7bb14f09-c24e-4068-86be-fe0169d8fcd2" codeRepresentation="i = A.length;&#xA;">
            <postCondition name="i = A.length">
              <modifiables>i</modifiables>
            </postCondition>
            <preCondition name="appears(A, x, 0, A.length)"/>
          </refinement>
          <postCondition name="i = A.length">
            <modifiables>i</modifiables>
          </postCondition>
          <preCondition name="appears(A, x, 0, A.length)"/>
        </firstStatement>
        <secondStatement name="statement2" id="bdacf04a-3a0b-4a22-a2a8-63f69e3fc8f3">
          <refinement xsi:type="de.tu-bs.cs.isf.cbc.cbcmodel:SmallRepetitionStatement" name="repetitionStatement" id="061bea32-51be-42fb-8f0f-a10686becab1" preProven="true" postProven="true">
            <postCondition name="A[i] = x">
              <modifiables>i</modifiables>
            </postCondition>
            <preCondition name="i = A.length">
              <modifiables>i</modifiables>
            </preCondition>
            <loopStatement name="loop" id="26be4126-663a-4c98-a357-3eb7dd878c60">
              <refinement name="i = i - 1;" id="131a8dd0-d8d1-4c8e-8b69-f13aa29d2e2a" codeRepresentation="i = i - 1;&#xA;">
                <postCondition name="!appears(A, x, i+1, A.length)">
                  <modifiables>i</modifiables>
                </postCondition>
                <preCondition name="(!appears(A, x, i+1, A.length)) &amp; (A[i] != x)">
                  <modifiables>i</modifiables>
                </preCondition>
              </refinement>
              <postCondition name="!appears(A, x, i+1, A.length)">
                <modifiables>i</modifiables>
              </postCondition>
              <preCondition name="(!appears(A, x, i+1, A.length)) &amp; (A[i] != x)">
                <modifiables>i</modifiables>
              </preCondition>
            </loopStatement>
            <variant name="i"/>
            <invariant name="!appears(A, x, i+1, A.length)"/>
            <guard name="A[i] != x" codeRepresentation="while (A[i] != x) {&#xA;"/>
          </refinement>
          <postCondition name="A[i] = x">
            <modifiables>i</modifiables>
          </postCondition>
          <preCondition name="i = A.length">
            <modifiables>i</modifiables>
          </preCondition>
        </secondStatement>
        <intermediateCondition name="i = A.length">
          <modifiables>i</modifiables>
        </intermediateCondition>
      </refinement>
      <postCondition name="A[i] = x">
        <modifiables>i</modifiables>
      </postCondition>
      <preCondition name="appears(A, x, 0, A.length)"/>
    </statement>
    <preCondition name="pre"/>
    <postCondition name="post"/>
    <methodObj href="ExampleClass.cbcclass#//@methods.0"/>
  </de.tu-bs.cs.isf.cbc.cbcmodel:CbCFormula>
  <de.tu-bs.cs.isf.cbc.cbcmodel:Renaming>
    <rename type="bool" function="app" newName="appears"/>
  </de.tu-bs.cs.isf.cbc.cbcmodel:Renaming>
  <de.tu-bs.cs.isf.cbc.cbcmodel:JavaVariables/>
  <de.tu-bs.cs.isf.cbc.cbcmodel:GlobalConditions>
    <conditions name="A.length &lt; 10"/>
    <conditions name="A.length > 0"/>
    <conditions name="A != null"/>
    <conditions name="appears(A, x, 0, A.length)"/>
    <conditions name="i >= 0 &amp; i &lt; A.length"/>
  </de.tu-bs.cs.isf.cbc.cbcmodel:GlobalConditions>
</xmi:XMI>
