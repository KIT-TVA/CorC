\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Aug 23 15:21:59 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/runtime-EclipseApplication/IntegerList";\include "helper.key";\programVariables {int tmp; int j; int i; int variant; IntList self; Heap heapAtPre;}\problem {
     \forall int k;
       (   leq(Z(0(#)), k) & lt(k, i)
        -> \forall int m;
             (     lt(k, m)
                 & lt(m,
                      length(int[]::select(heap,
                                           self,
                                           IntList::$data)))
              -> leq(int::select(heap,
                                 int[]::select(heap,
                                               self,
                                               IntList::$data),
                                 arr(k)),
                     int::select(heap,
                                 int[]::select(heap,
                                               self,
                                               IntList::$data),
                                 arr(m)))))
   & lt(i,
        length(int[]::select(heap,
                             self,
                             IntList::$data)))
   & !int[]::select(heap, self, IntList::$data) = null
   & geq(i, Z(0(#)))
   & leq(i,
         length(int[]::select(heap,
                              self,
                              IntList::$data)))
   & leq(j,
         sub(length(int[]::select(heap,
                                  self,
                                  IntList::$data)),
             Z(2(#))))
   & geq(j, sub(i, Z(1(#))))
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & IntList::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || variant:=sub(length(int[]::select(heap,
                                         self,
                                         IntList::$data)),
                    i)}
     \<{
         j=self.data.length-2;
         i++;
       }\> (  lt(sub(length(int[]::select(heap,
                                          self,
                                          IntList::$data)),
                     i),
                 variant)
            & geq(sub(length(int[]::select(heap,
                                           self,
                                           IntList::$data)),
                      i),
                  Z(0(#))))

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "320")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "polySimp_elimSub" (formula "13") (term "0,1,0,1"))
(rule "polySimp_elimSub" (formula "13") (term "0,0,0,1"))
(rule "polySimp_elimSub" (formula "13") (term "0,0"))
(rule "polySimp_elimSub" (formula "6") (term "1"))
(rule "mul_literals" (formula "6") (term "1,1"))
(rule "polySimp_elimSub" (formula "5") (term "1"))
(rule "mul_literals" (formula "5") (term "1,1"))
(rule "polySimp_addComm0" (formula "13") (term "0,1,0,1"))
(rule "polySimp_addComm0" (formula "13") (term "0,0,0,1"))
(rule "polySimp_addComm0" (formula "13") (term "0,0"))
(rule "polySimp_addComm0" (formula "6") (term "1"))
(rule "polySimp_addComm0" (formula "5") (term "1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1"))
(rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0"))
(rule "inEqSimp_homoInEq0" (formula "5"))
(rule "polySimp_addComm1" (formula "5") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "polySimp_elimOne" (formula "2") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1"))
(rule "mul_literals" (formula "13") (term "0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1"))
(rule "polySimp_rightDist" (formula "5") (term "1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
(rule "mul_literals" (formula "5") (term "0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1"))
(rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
(rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
(rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
(rule "add_literals" (formula "4") (term "1,1,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0"))
(rule "add_literals" (formula "4") (term "0,0"))
(rule "qeq_literals" (formula "4") (term "0"))
(builtin "One Step Simplification" (formula "4"))
(rule "true_left" (formula "4"))
(rule "nnf_imp2or" (formula "1") (term "0"))
(rule "nnf_notAnd" (formula "1") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "1") (term "0,1,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0,0,1,0"))
(rule "add_zero_left" (formula "1") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,0,0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1,0"))
(rule "commute_or" (formula "1") (term "0,0,1,0"))
(rule "compound_subtraction_1" (formula "12") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "x"))
(rule "eval_order_array_access6" (formula "12") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "x_arr"))
(rule "assignment_read_attribute" (formula "12"))
(branch "Normal Execution (self != null)"
   (builtin "One Step Simplification" (formula "12"))
   (rule "assignment_read_length" (formula "12"))
   (branch "Normal Execution (x_arr != null)"
      (builtin "One Step Simplification" (formula "12"))
      (rule "assignmentSubtractionInt" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "postincrement" (formula "12") (term "1"))
      (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
      (rule "remove_parentheses_right" (formula "12") (term "1"))
      (rule "assignmentAdditionInt" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,1,0"))
      (rule "widening_identity_cast_5" (formula "12") (term "1"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "emptyModality" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")))
      (rule "polySimp_addAssoc" (formula "12") (term "0,1"))
      (rule "add_literals" (formula "12") (term "0,0,1"))
      (rule "add_zero_left" (formula "12") (term "0,1"))
      (rule "polySimp_addAssoc" (formula "12") (term "1"))
      (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1"))
      (rule "add_literals" (formula "12") (term "1,0,1"))
      (rule "times_zero_1" (formula "12") (term "0,1"))
      (rule "add_zero_left" (formula "12") (term "1"))
      (rule "inEqSimp_leqRight" (formula "12"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Null Reference (x_arr = null)"
      (builtin "One Step Simplification" (formula "13"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (self = null)"
   (builtin "One Step Simplification" (formula "13"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
   (rule "closeFalse" (formula "1"))
)
)

}
