\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Aug 23 12:37:13 CEST 2022
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/mko/Documents/ISF/0_feat-CorC2.0modifiable/runtime-EclipseApplication/IntegerList";\include "helper.key";\programVariables {int i; int[] tmp; int newTop; int newTop_old; int[] data1_oldVal; IntList self; Heap heapAtPre;}\problem {
       length(tmp)
     = add(length(int[]::select(heap,
                                self,
                                IntList::$data)),
           Z(1(#)))
   &   int::select(heap,
                   tmp,
                   arr(sub(length(tmp), Z(1(#)))))
     = newTop
   & !int[]::select(heap, self, IntList::$data) = null
   & geq(length(int[]::select(heap,
                              self,
                              IntList::$data)),
         Z(0(#)))
   & geq(i, Z(0(#)))
   &   data1_oldVal
     = int[]::select(heap, self, IntList::$data)
   & !tmp = null
   &   int[]::exactInstance(int[]::select(heap,
                                          self,
                                          IntList::$data))
     = TRUE
   &   boolean::select(heap,
                       int[]::select(heap,
                                     self,
                                     IntList::$data),
                       java.lang.Object::<created>)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   &   boolean::select(heap,
                       tmp,
                       java.lang.Object::<created>)
     = TRUE
   &   int[]::exactInstance(int[]::select(heap,
                                          self,
                                          IntList::$data))
     = TRUE
   &   boolean::select(heap,
                       int[]::select(heap,
                                     self,
                                     IntList::$data),
                       java.lang.Object::<created>)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   &   boolean::select(heap,
                       data1_oldVal,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & IntList::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || newTop_old:=newTop
    || data1_oldVal:=int[]::select(heap,
                                   self,
                                   IntList::$data)}
     \<{
         i=0;
       }\> (    length(tmp)
              = add(length(int[]::select(heap,
                                         self,
                                         IntList::$data)),
                    Z(1(#)))
            &   int::select(heap,
                            tmp,
                            arr(sub(length(tmp),
                                    Z(1(#)))))
              = newTop
            & \forall int j;
                (   leq(Z(0(#)), j) & lt(j, i)
                 ->   int::select(heap,
                                  int[]::select(heap,
                                                self,
                                                IntList::$data),
                                  arr(j))
                    = int::select(heap, tmp, arr(j)))
            & i = Z(0(#))
            & newTop = newTop_old)

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "223")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "17") (term "1,0,1"))
(rule "eqSymm" (formula "5"))
(rule "polySimp_homoEq" (formula "17") (term "0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "17") (term "0,2,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "17") (term "1,0,2,0,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "2") (term "0,2,0"))
(rule "mul_literals" (formula "2") (term "1,0,2,0"))
(rule "polySimp_homoEq" (formula "1"))
(rule "polySimp_addComm0" (formula "17") (term "0,0,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "17") (term "0,2,0,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "2") (term "0,2,0"))
(rule "polySimp_addComm0" (formula "1") (term "0,0"))
(rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "1") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,0,0,1"))
(rule "assignment" (formula "17") (term "1"))
(builtin "One Step Simplification" (formula "17"))
(rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "5"))
(rule "polySimp_addComm1" (formula "1") (term "0"))
(rule "applyEq" (formula "8") (term "1,0") (ifseqformula "5"))
(rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
(rule "applyEq" (formula "7") (term "0,0") (ifseqformula "5"))
(rule "applyEq" (formula "14") (term "0") (ifseqformula "5"))
(rule "polySimp_sepPosMonomial" (formula "16") (term "0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0"))
(rule "polySimp_elimOne" (formula "1") (term "0"))
(rule "applyEq" (formula "2") (term "1,0,2,0") (ifseqformula "1"))
(rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
(rule "add_literals" (formula "2") (term "0,0,2,0"))
(rule "add_zero_left" (formula "2") (term "0,2,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "16") (term "0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "16") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "16") (term "0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,0,0,0,1"))
(rule "emptyModality" (formula "16") (term "1"))
(builtin "One Step Simplification" (formula "16"))
(rule "applyEq" (formula "16") (term "0,0,0,0") (ifseqformula "5"))
(rule "polySimp_homoEq" (formula "16") (term "0,0"))
(rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
(rule "applyEq" (formula "16") (term "1,0,2,0,1,0") (ifseqformula "1"))
(rule "polySimp_addAssoc" (formula "16") (term "0,2,0,1,0"))
(rule "add_literals" (formula "16") (term "0,0,2,0,1,0"))
(rule "add_zero_left" (formula "16") (term "0,2,0,1,0"))
(rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "2"))
(builtin "One Step Simplification" (formula "16"))
(rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "1"))
(rule "polySimp_addAssoc" (formula "16") (term "0,0"))
(rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
(rule "add_literals" (formula "16") (term "0,0,0,0"))
(rule "add_zero_left" (formula "16") (term "0,0,0"))
(rule "polySimp_pullOutFactor2" (formula "16") (term "0,0"))
(rule "add_literals" (formula "16") (term "1,0,0"))
(rule "times_zero_1" (formula "16") (term "0,0"))
(builtin "One Step Simplification" (formula "16"))
(rule "allRight" (formula "16") (inst "sk=j_0"))
(rule "orRight" (formula "16"))
(rule "orRight" (formula "16"))
(rule "inEqSimp_geqRight" (formula "17"))
(rule "times_zero_1" (formula "1") (term "1,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0"))
(rule "inEqSimp_leqRight" (formula "17"))
(rule "mul_literals" (formula "1") (term "1,0,0"))
(rule "add_literals" (formula "1") (term "0,0"))
(rule "add_zero_left" (formula "1") (term "0"))
(rule "applyEq" (formula "18") (term "1,0") (ifseqformula "7"))
(rule "eqSymm" (formula "18"))
(rule "inEqSimp_sepPosMonomial0" (formula "2"))
(rule "mul_literals" (formula "2") (term "1"))
(rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
(rule "qeq_literals" (formula "2") (term "0"))
(builtin "One Step Simplification" (formula "2"))
(rule "closeFalse" (formula "2"))
)

}
