\predicates {
	sorted(int[]);
	containsNewTop(int[], int);
	containsOldElements(int[], int[]);
}

\rules {
	sorted{
		\schemaVar \term int[] list;
		\schemaVar \variable int k;
		\find (sorted(list))
		\varcond (\notFreeIn(k, list))
		\replacewith ((\forall k; (0 <= k & k < length(list)-1 -> (list[k] >= list[k+1]))))
		\heuristics(simplify)
	};

	containsNewTop{
		\schemaVar \term int[] list;
		\schemaVar \term int new;
		\schemaVar \variable int v;
		\find (containsNewTop(list, new))
		\varcond (\notFreeIn(v, list), \notFreeIn(v, new))
		\replacewith ((\exists v; (0 <= v & v < length(list) -> list[v] = new)))
		\heuristics(simplify)
	};

	containsOldElements{
		\schemaVar \term int[] list;
		\schemaVar \term int[] oldList;
		\schemaVar \variable int z;
		\schemaVar \variable int k;
		\find (containsOldElements(list, oldList))
		\varcond (\notFreeIn(z, list), \notFreeIn(z, oldList), \notFreeIn(k, list), \notFreeIn(k, oldList))
		\replacewith (((\forall k; (0 <= k & k < length(oldList) -> (\exists z; (0 <= z & z < length(list) & list[z] = oldList[k]))))))
		\heuristics(simplify)
	};

}