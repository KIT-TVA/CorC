\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 16 16:02:09 CEST 2020
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=20000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "C:/bachelor/redmine/Fallbeispiele/IntegerList";\include "helper.key";\programVariables {int[] data; int[] old_data; int newTop;  Heap heapAtPre;}\problem {
     true
   & true
   & !data = null
   & geq(length(data), Z(0(#)))
   & old_data = data
   &   boolean::select(heap,
                       data,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       old_data,
                       java.lang.Object::<created>)
     = TRUE
   & wellFormed(heap)
-> {heapAtPre:=heap}
     \<{
         data=Generated_IntegerList.generated_base(data,old_data,newTop);
       }\> (    int::select(heap,
                            data,
                            arr(sub(length(data),
                                    Z(1(#)))))
              = newTop
            & (  \exists int z;
                   (  leq(Z(0(#)), z)
                    & lt(z, length(data))
                    &   int::select(heap, data, arr(z))
                      = newTop)
               & \forall int k;
                   (     leq(Z(0(#)), k)
                       & lt(k, length(old_data))
                    -> \exists int z;
                         (  leq(Z(0(#)), z)
                          & lt(z, length(data))
                          &   int::select(heap,
                                          data,
                                          arr(z))
                            = int::select(heap,
                                          old_data,
                                          arr(k))))
               &   int::select(heap,
                               data,
                               arr(sub(length(data),
                                       Z(1(#)))))
                 = newTop))

}

\proof {
(keyLog "0" (keyUser "mko" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "860")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "polySimp_elimSub" (formula "7") (term "0,2,0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,2,0,0,0"))
(rule "polySimp_elimSub" (formula "7") (term "0,2,0,1,1,0"))
(rule "mul_literals" (formula "7") (term "1,0,2,0,1,1,0"))
(rule "polySimp_addComm0" (formula "7") (term "0,2,0,0,0"))
(rule "polySimp_addComm0" (formula "7") (term "0,2,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,1,0,1,0"))
(rule "applyEq" (formula "4") (term "1,0") (ifseqformula "2"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0,0,1,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,1,0,1,0"))
(rule "nnf_imp2or" (formula "6") (term "0,1,0,1,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0,1,0,1,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,1,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0,1,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1,0,1,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,1,0,1,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0,1,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,1,0,1,0"))
(builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_generated_base,result,exc,heapAfter_generated_base,anon_heap_generated_base") (contract "Generated_IntegerList[Generated_IntegerList::generated_base([I,[I,int)].JML normal_behavior operation contract.0"))
(branch "Post (generated_base)"
   (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "6") (term "0,2,0,1,0,0,1,1"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "exLeft" (formula "8") (inst "sk=z_0"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_elimSub" (formula "12") (term "0,2,0"))
   (rule "mul_literals" (formula "12") (term "1,0,2,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0,2,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "assignment" (formula "16") (term "1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "applyEq" (formula "11") (term "0,0,1,0,0,1,0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "11") (term "1,1,1,0,1,0") (ifseqformula "2"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
   (rule "polySimp_elimOne" (formula "9") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "15")))
   (rule "eqSymm" (formula "11"))
   (rule "applyEqReverse" (formula "10") (term "1") (ifseqformula "11"))
   (rule "hideAuxiliaryEq" (formula "11"))
   (rule "elementOfSetMinus" (formula "10") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
   (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=arr_1"))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")))
   (rule "eqSymm" (formula "13"))
   (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "13"))
   (rule "hideAuxiliaryEq" (formula "13"))
   (rule "elementOfSetMinus" (formula "12") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "emptyModality" (formula "16") (term "1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "replaceKnownSelect_taclet0_2" (formula "16") (term "0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "16") (term "0,0"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "replaceKnownSelect_taclet0_2" (formula "16") (term "0,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "16") (term "0,1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "applyEq" (formula "16") (term "1,1,1,0,1,0,1") (ifseqformula "2"))
   (rule "applyEq" (formula "16") (term "0,1,1,0,0,1") (ifseqformula "2"))
   (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "nnf_ex2all" (formula "16"))
   (rule "nnf_notAnd" (formula "1") (term "0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "ex_pull_out3" (formula "12") (term "0"))
   (rule "cnf_rightDist" (formula "12") (term "0,0"))
   (rule "commute_or" (formula "12") (term "1,0,0"))
   (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
   (rule "commute_or" (formula "12") (term "1,0,0,0"))
   (rule "arrayLengthNotNegative" (formula "2") (term "0"))
   (rule "arrayLengthIsAnInt" (formula "2") (term "0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "commute_and_2" (formula "12") (term "0,0"))
   (rule "cut_direct" (formula "8") (term "0"))
   (branch "CUT: result.<created> = TRUE TRUE"
      (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "allLeft" (formula "1") (inst "t=z_0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "10"))
      (rule "qeq_literals" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
      (rule "andLeft" (formula "11"))
      (rule "inEqSimp_homoInEq1" (formula "11"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "1,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0"))
      (rule "add_zero_right" (formula "11") (term "0"))
      (rule "leq_literals" (formula "11"))
      (rule "closeFalse" (formula "11"))
   )
   (branch "CUT: result.<created> = TRUE FALSE"
      (builtin "One Step Simplification" (formula "8"))
      (rule "allLeft" (formula "1") (inst "t=z_0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "11"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "leq_literals" (formula "1") (term "0,1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
      (rule "qeq_literals" (formula "10") (term "0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "closeFalse" (formula "10"))
   )
)
(branch "Exceptional Post (generated_base)"
   (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "6") (term "0,2,0,1,0,0,1,1"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "11") (ifseqformula "10"))
)
(branch "Pre (generated_base)"
   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")))
   (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "2"))
   (rule "replace_known_right" (formula "6") (term "0,1") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "applyEq" (formula "6") (term "1,0,1") (ifseqformula "2"))
   (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "notRight" (formula "6"))
   (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
   (rule "eqSymm" (formula "3"))
   (rule "close" (formula "6") (ifseqformula "3"))
)
)

}
