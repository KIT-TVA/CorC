\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Feb 29 14:05:31 CET 2024
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Important/Work/Master/CorC/IntegerList/meta_product_gen";
\include "helper.key";
\programVariables {
int i;
int[] tmp;
int newTop;
int[] data1_oldVal;
IntList self;
Heap heapAtPre;
}\problem {
       length(tmp)
     = add(length(int[]::select(heap,
                                self,
                                IntList::$data)),
           Z(1(#)))
   &   int::select(heap,
                   tmp,
                   arr(sub(length(tmp), Z(1(#)))))
     = newTop
   & \forall int j;
       (   leq(Z(0(#)), j) & lt(j, i)
        ->   int::select(heap,
                         int[]::select(heap,
                                       self,
                                       IntList::$data),
                         arr(j))
           = int::select(heap, tmp, arr(j)))
   & i = Z(0(#))
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_SORTED)
        = FALSE
      &   boolean::select(heap,
                          null,
                          MetaVariables::$FV_CONS)
        = TRUE
      &   boolean::select(heap,
                          null,
                          MetaVariables::$FV_BASE)
        = TRUE)
   & !int[]::select(heap, self, IntList::$data) = null
   & geq(length(int[]::select(heap,
                              self,
                              IntList::$data)),
         Z(0(#)))
   & geq(i, Z(0(#)))
   &   data1_oldVal
     = int[]::select(heap, self, IntList::$data)
   & !tmp = null
   & !data1_oldVal = null
   & geq(length(data1_oldVal), Z(0(#)))
   &   boolean::select(heap,
                       null,
                       MetaVariables::$FV_INTEGERLIST)
     = TRUE
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INTEGERLIST)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_BASE)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INTEGERLIST)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_CONS)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INTEGERLIST)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_SORTED)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_BASE)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_INTEGERLIST)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_SORTED)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_INCREASING)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_SORTED)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_DECREASING)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INCREASING)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_DECREASING)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_SORTED)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INCREASING)
        = FALSE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_DECREASING)
        = FALSE)
   &   boolean::select(heap,
                       tmp,
                       java.lang.Object::<created>)
     = TRUE
   &   int[]::exactInstance(int[]::select(heap,
                                          self,
                                          IntList::$data))
     = TRUE
   &   boolean::select(heap,
                       int[]::select(heap,
                                     self,
                                     IntList::$data),
                       java.lang.Object::<created>)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & IntList::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap}
     (    length(tmp)
        = add(length(int[]::select(heap,
                                   self,
                                   IntList::$data)),
              Z(1(#)))
      &   int::select(heap,
                      tmp,
                      arr(sub(length(tmp), Z(1(#)))))
        = newTop
      & \forall int j;
          (   leq(Z(0(#)), j) & lt(j, i)
           ->   int::select(heap,
                            int[]::select(heap,
                                          self,
                                          IntList::$data),
                            arr(j))
              = int::select(heap, tmp, arr(j)))
      & (    boolean::select(heap,
                             null,
                             MetaVariables::$FV_SORTED)
           = FALSE
         &   boolean::select(heap,
                             null,
                             MetaVariables::$FV_CONS)
           = TRUE
         &   boolean::select(heap,
                             null,
                             MetaVariables::$FV_BASE)
           = TRUE))

}

\proof {
(keyLog "0" (keyUser "Work" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "142")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "9"))
(rule "replace_known_left" (formula "15") (term "0") (ifseqformula "6"))
(builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "11")))
(rule "true_left" (formula "15"))
(rule "replace_known_right" (formula "15") (term "0") (ifseqformula "26"))
(builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "replace_known_right" (formula "15") (term "0") (ifseqformula "26"))
(builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "6"))
(builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
(rule "true_left" (formula "12"))
(rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "25"))
(builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
(rule "true_left" (formula "13"))
(rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
(rule "true_left" (formula "12"))
(rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "23"))
(builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
(rule "true_left" (formula "12"))
(rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "20"))
(builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "21")))
(rule "true_left" (formula "12"))
(rule "replace_known_left" (formula "26") (term "1,1") (ifseqformula "6"))
(builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "21")) (ifInst ""  (formula "5")))
(rule "closeTrue" (formula "26"))
)

}
