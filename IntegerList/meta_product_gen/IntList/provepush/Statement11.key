\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Feb 29 14:05:21 CET 2024
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Important/Work/Master/CorC/IntegerList/meta_product_gen";
\include "helper.key";
\programVariables {
int i;
int[] tmp;
int newTop;
int i_old;
int[] tmp_old;
int newTop_old;
int[] data1_oldVal;
IntList self;
Heap heapAtPre;
}\problem {
     \exists int z;
       (  leq(Z(0(#)), z)
        & lt(z,
             length(int[]::select(heap,
                                  self,
                                  IntList::$data)))
        &   int::select(heap,
                        int[]::select(heap,
                                      self,
                                      IntList::$data),
                        arr(z))
          = newTop)
   & \forall int k;
       (     leq(Z(0(#)), k)
           & lt(k, length(data1_oldVal))
        -> \exists int z;
             (  leq(Z(0(#)), z)
              & lt(z,
                   length(int[]::select(heap,
                                        self,
                                        IntList::$data)))
              &   int::select(heap,
                              int[]::select(heap,
                                            self,
                                            IntList::$data),
                              arr(z))
                = int::select(heap,
                              data1_oldVal,
                              arr(k))))
   &   boolean::select(heap,
                       null,
                       MetaVariables::$FV_SORTED)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   & geq(length(int[]::select(heap,
                              self,
                              IntList::$data)),
         Z(0(#)))
   & geq(i, Z(0(#)))
   &   data1_oldVal
     = int[]::select(heap, self, IntList::$data)
   & !tmp = null
   & !data1_oldVal = null
   & geq(length(data1_oldVal), Z(0(#)))
   &   boolean::select(heap,
                       null,
                       MetaVariables::$FV_INTEGERLIST)
     = TRUE
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INTEGERLIST)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_BASE)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INTEGERLIST)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_CONS)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INTEGERLIST)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_SORTED)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_BASE)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_INTEGERLIST)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_SORTED)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_INCREASING)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_SORTED)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_DECREASING)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INCREASING)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_DECREASING)
        = TRUE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_SORTED)
        = FALSE)
   & (    boolean::select(heap,
                          null,
                          MetaVariables::$FV_INCREASING)
        = FALSE
      |   boolean::select(heap,
                          null,
                          MetaVariables::$FV_DECREASING)
        = FALSE)
   &   boolean::select(heap,
                       tmp,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       tmp,
                       java.lang.Object::<created>)
     = TRUE
   &   int[]::exactInstance(int[]::select(heap,
                                          self,
                                          IntList::$data))
     = TRUE
   &   boolean::select(heap,
                       int[]::select(heap,
                                     self,
                                     IntList::$data),
                       java.lang.Object::<created>)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   &   int[]::exactInstance(int[]::select(heap,
                                          self,
                                          IntList::$data))
     = TRUE
   &   boolean::select(heap,
                       int[]::select(heap,
                                     self,
                                     IntList::$data),
                       java.lang.Object::<created>)
     = TRUE
   & !int[]::select(heap, self, IntList::$data) = null
   &   boolean::select(heap,
                       tmp_old,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & IntList::exactInstance(self) = TRUE
   & !self = null
   & java.lang.Object::<inv>(heap, self)
   & wellFormed(heap)
-> {heapAtPre:=heap
    || i_old:=i
    || tmp_old:=tmp
    || newTop_old:=newTop}
     \<{
         self.sort();
       }\> (  (     boolean::select(heap,
                                    null,
                                    MetaVariables::$FV_SORTED)
                  = TRUE
               ->   \forall int k;
                      (     leq(Z(0(#)), k)
                          & lt(k, length(data1_oldVal))
                       -> \exists int z;
                            (  leq(Z(0(#)), z)
                             & lt(z,
                                  length(int[]::select(heap,
                                                       self,
                                                       IntList::$data)))
                             &   int::select(heap,
                                             int[]::select(heap,
                                                           self,
                                                           IntList::$data),
                                             arr(z))
                               = int::select(heap,
                                             data1_oldVal,
                                             arr(k))))
                  & (  \forall int k;
                         (     leq(Z(0(#)), k)
                             & lt(k,
                                  sub(length(int[]::select(heap,
                                                           self,
                                                           IntList::$data)),
                                      Z(1(#))))
                          -> geq(int::select(heap,
                                             int[]::select(heap,
                                                           self,
                                                           IntList::$data),
                                             arr(k)),
                                 int::select(heap,
                                             int[]::select(heap,
                                                           self,
                                                           IntList::$data),
                                             arr(add(k,
                                                     Z(1(#)))))))
                     | \forall int k;
                         (     leq(Z(0(#)), k)
                             & lt(k,
                                  sub(length(int[]::select(heap,
                                                           self,
                                                           IntList::$data)),
                                      Z(1(#))))
                          -> leq(int::select(heap,
                                             int[]::select(heap,
                                                           self,
                                                           IntList::$data),
                                             arr(k)),
                                 int::select(heap,
                                             int[]::select(heap,
                                                           self,
                                                           IntList::$data),
                                             arr(add(k,
                                                     Z(1(#)))))))))
            & (     boolean::select(heap,
                                    null,
                                    MetaVariables::$FV_SORTED)
                  = FALSE
               ->   (     boolean::select(heap,
                                          null,
                                          MetaVariables::$FV_CONS)
                        = TRUE
                     ->   (     boolean::select(heap,
                                                null,
                                                MetaVariables::$FV_BASE)
                              = TRUE
                           ->   \exists int z;
                                  (  leq(Z(0(#)), z)
                                   & lt(z,
                                        length(int[]::select(heap,
                                                             self,
                                                             IntList::$data)))
                                   &   int::select(heap,
                                                   int[]::select(heap,
                                                                 self,
                                                                 IntList::$data),
                                                   arr(z))
                                     = newTop)
                              & \forall int k;
                                  (     leq(Z(0(#)), k)
                                      & lt(k,
                                           length(data1_oldVal))
                                   -> \exists int z;
                                        (  leq(Z(0(#)),
                                               z)
                                         & lt(z,
                                              length(int[]::select(heap,
                                                                   self,
                                                                   IntList::$data)))
                                         &   int::select(heap,
                                                         int[]::select(heap,
                                                                       self,
                                                                       IntList::$data),
                                                         arr(z))
                                           = int::select(heap,
                                                         data1_oldVal,
                                                         arr(k))))
                              &   int::select(heap,
                                              int[]::select(heap,
                                                            self,
                                                            IntList::$data),
                                              arr(sub(length(int[]::select(heap,
                                                                           self,
                                                                           IntList::$data)),
                                                      Z(1(#)))))
                                = newTop)
                        &   int::select(heap,
                                        int[]::select(heap,
                                                      self,
                                                      IntList::$data),
                                        arr(sub(length(int[]::select(heap,
                                                                     self,
                                                                     IntList::$data)),
                                                Z(1(#)))))
                          = newTop)
                  & (     boolean::select(heap,
                                          null,
                                          MetaVariables::$FV_CONS)
                        = FALSE
                     ->   boolean::select(heap,
                                          null,
                                          MetaVariables::$FV_BASE)
                        = TRUE
                     ->   \exists int z;
                            (  leq(Z(0(#)), z)
                             & lt(z,
                                  length(int[]::select(heap,
                                                       self,
                                                       IntList::$data)))
                             &   int::select(heap,
                                             int[]::select(heap,
                                                           self,
                                                           IntList::$data),
                                             arr(z))
                               = newTop)
                        & \forall int k;
                            (     leq(Z(0(#)), k)
                                & lt(k,
                                     length(data1_oldVal))
                             -> \exists int z;
                                  (  leq(Z(0(#)), z)
                                   & lt(z,
                                        length(int[]::select(heap,
                                                             self,
                                                             IntList::$data)))
                                   &   int::select(heap,
                                                   int[]::select(heap,
                                                                 self,
                                                                 IntList::$data),
                                                   arr(z))
                                     = int::select(heap,
                                                   data1_oldVal,
                                                   arr(k))))
                        &   int::select(heap,
                                        int[]::select(heap,
                                                      self,
                                                      IntList::$data),
                                        arr(sub(length(int[]::select(heap,
                                                                     self,
                                                                     IntList::$data)),
                                                Z(1(#)))))
                          = newTop))
            & i = i_old
            & tmp = tmp_old
            & newTop = newTop_old)

}

\proof {
(keyLog "0" (keyUser "Work" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "2191")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "1") (inst "sk=z_0"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "31") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "31") (term "1,0,0,1"))
(rule "eqSymm" (formula "31") (term "1,0,1"))
(rule "eqSymm" (formula "8"))
(rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "10"))
(builtin "One Step Simplification" (formula "14"))
(rule "replace_known_left" (formula "16") (term "0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "16"))
(rule "true_left" (formula "16"))
(rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "10")))
(rule "true_left" (formula "13"))
(rule "replace_known_left" (formula "11") (term "0") (ifseqformula "10"))
(builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")))
(rule "true_left" (formula "11"))
(rule "replace_known_left" (formula "13") (term "0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "13"))
(rule "true_left" (formula "13"))
(rule "replace_known_left" (formula "11") (term "0") (ifseqformula "10"))
(builtin "One Step Simplification" (formula "11"))
(rule "true_left" (formula "11"))
(rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "12"))
(rule "polySimp_elimSub" (formula "26") (term "0,2,0,1,1,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "26") (term "1,0,2,0,1,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "26") (term "1,1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "26") (term "0,2,0,1,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "26") (term "1,0,2,0,1,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "26") (term "0,2,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "26") (term "1,0,2,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "26") (term "0,2,1,1,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "26") (term "0,2,1,1,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "26") (term "0,2,0,1,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "26") (term "0,2,0,1,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "26") (term "0,2,0,1,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1"))
(rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "26") (term "1,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,1,1,0,0,0,0,0,1"))
(rule "applyEq" (formula "3") (term "1,0") (ifseqformula "8"))
(rule "applyEq" (formula "4") (term "1,0,1,0,1,0") (ifseqformula "8"))
(rule "applyEq" (formula "16") (term "1,0") (ifseqformula "8"))
(rule "applyEq" (formula "15") (term "0,0") (ifseqformula "8"))
(rule "applyEq" (formula "4") (term "0,0,1,0,0,1,0,0,1,0") (ifseqformula "8"))
(rule "applyEq" (formula "6") (term "0,0") (ifseqformula "8"))
(rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "7"))
(rule "applyEq" (formula "23") (term "0") (ifseqformula "7"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0"))
(rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "polySimp_elimOne" (formula "2") (term "0"))
(rule "nnf_imp2or" (formula "4") (term "0"))
(rule "nnf_notAnd" (formula "4") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
(rule "mul_literals" (formula "4") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
(rule "commute_or" (formula "12"))
(rule "nnf_imp2or" (formula "24") (term "0,0,1,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "24") (term "0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "24") (term "0,0,1,1,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "24") (term "0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "24") (term "0,1,1,1,0,0,0,0,0,1"))
(rule "commute_or" (formula "11"))
(rule "nnf_notAnd" (formula "24") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,1,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,1,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "1,0,0,0,0,1,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "24") (term "0,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "1,0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "24") (term "0,0,1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,1,1,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,0,0,1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "1,0,0,0,1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1,1,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "24") (term "0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "24") (term "0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1"))
(rule "arrayLengthNotNegative" (formula "8") (term "0"))
(rule "arrayLengthIsAnInt" (formula "8") (term "0"))
(builtin "One Step Simplification" (formula "8"))
(rule "true_left" (formula "8"))
(rule "ex_pull_out3" (formula "4") (term "0"))
(rule "cnf_rightDist" (formula "4") (term "0,0"))
(rule "commute_or" (formula "4") (term "1,0,0"))
(rule "cnf_rightDist" (formula "4") (term "0,0,0"))
(rule "commute_or" (formula "4") (term "1,0,0,0"))
(builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_sort,exc,heapAfter_sort,anon_heap_sort") (contract "IntList[IntList::sort()].JML normal_behavior operation contract.0"))
(branch "Post (sort)"
   (builtin "One Step Simplification" (formula "22"))
   (builtin "One Step Simplification" (formula "26"))
   (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0,1,1,0,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "22") (term "0,2,1,1,0,1,1,0,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0,1,1,1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "22") (term "0,2,1,1,0,1,1,1,1,0,0,1,1"))
   (rule "andLeft" (formula "22"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "24"))
   (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "25") (term "1,1,1,0,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "24") (term "1,1,0,0,1,1"))
   (rule "mul_literals" (formula "24") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "24") (term "0,2,1,1,0,1,1"))
   (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0,1,1,1"))
   (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_addComm0" (formula "24") (term "1,1,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,1,1"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,1,1"))
   (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0,1,1,1"))
   (rule "applyEq" (formula "25") (term "0,0,1,0,0,1,0,0,0,1,1") (ifseqformula "7"))
   (rule "applyEq" (formula "25") (term "1,1,1,0,1,0,0,1,1") (ifseqformula "7"))
   (rule "applyEq" (formula "24") (term "0,0,1,0,0,1,0,0,0,1") (ifseqformula "7"))
   (rule "applyEq" (formula "24") (term "1,1,1,0,1,0,0,1") (ifseqformula "7"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "25") (term "0,1,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1"))
   (rule "pullOutSelect" (formula "25") (term "1,0,1,0,1,0,0,1,1") (inst "selectSK=IntList_data_0"))
   (rule "applyEq" (formula "24") (term "1,0,1,0,1,0,0,1") (ifseqformula "25"))
   (rule "applyEq" (formula "26") (term "0,1,1,1,0,0,1,1,1") (ifseqformula "25"))
   (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1,1") (ifseqformula "25"))
   (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1,0,0,1") (ifseqformula "25"))
   (rule "applyEq" (formula "26") (term "1,0,1,0,1,1,1") (ifseqformula "25"))
   (rule "applyEq" (formula "26") (term "0,1,1,1,0,0,1,0,0,1,1") (ifseqformula "25"))
   (rule "applyEq" (formula "26") (term "1,1,1,0,1,1,1") (ifseqformula "25"))
   (rule "applyEq" (formula "24") (term "1,0,1,0,1,1") (ifseqformula "25"))
   (rule "applyEq" (formula "24") (term "1,1,1,0,1,1") (ifseqformula "25"))
   (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "22"))
   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "17")))
   (rule "elementOfSingleton" (formula "25") (term "0,0"))
   (builtin "One Step Simplification" (formula "25"))
   (rule "applyEqReverse" (formula "26") (term "1,0,1,0,1,1,1") (ifseqformula "25"))
   (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0,1,0,0,1") (ifseqformula "25"))
   (rule "applyEqReverse" (formula "24") (term "1,0,1,0,1,0,0,1") (ifseqformula "25"))
   (rule "applyEqReverse" (formula "26") (term "1,0,1,0,1,0,0,1,1") (ifseqformula "25"))
   (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0,1,1") (ifseqformula "25"))
   (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0,1,1,1") (ifseqformula "25"))
   (rule "applyEqReverse" (formula "24") (term "1,1,1,0,1,1") (ifseqformula "25"))
   (rule "applyEqReverse" (formula "26") (term "1,1,1,0,1,1,1") (ifseqformula "25"))
   (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0,1,0,0,1,1") (ifseqformula "25"))
   (rule "applyEqReverse" (formula "24") (term "1,0,1,0,1,1") (ifseqformula "25"))
   (rule "hideAuxiliaryEq" (formula "25"))
   (rule "pullOutSelect" (formula "24") (term "0,0") (inst "selectSK=MetaVariables_FV_INCREASING_0"))
   (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "24"))
   (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "22"))
   (builtin "One Step Simplification" (formula "24"))
   (rule "elementOfSingleton" (formula "24") (term "0,0"))
   (builtin "One Step Simplification" (formula "24"))
   (rule "applyEqReverse" (formula "26") (term "0,0,0") (ifseqformula "24"))
   (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
   (rule "hideAuxiliaryEq" (formula "24"))
   (rule "pullOutSelect" (formula "25") (term "0,0,1") (inst "selectSK=MetaVariables_FV_DECREASING_0"))
   (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "22"))
   (builtin "One Step Simplification" (formula "25"))
   (rule "elementOfSingleton" (formula "25") (term "0,0"))
   (builtin "One Step Simplification" (formula "25"))
   (rule "applyEqReverse" (formula "26") (term "0,0,1") (ifseqformula "25"))
   (rule "hideAuxiliaryEq" (formula "25"))
   (rule "nnf_imp2or" (formula "24") (term "0,0,1"))
   (rule "nnf_imp2or" (formula "24") (term "0,1,1"))
   (rule "nnf_imp2or" (formula "25") (term "0,1,1,1"))
   (rule "nnf_imp2or" (formula "25") (term "0,0,1,1"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,1"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,1"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,1"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,1"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,1"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1"))
   (rule "nnf_notAnd" (formula "25") (term "0,0,1,1,1"))
   (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,1,1"))
   (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,1,1,1"))
   (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,1,1"))
   (rule "mul_literals" (formula "25") (term "1,0,0,0,1,1,1"))
   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,1,1"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,1,1"))
   (rule "nnf_notAnd" (formula "25") (term "0,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,1,1"))
   (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0,1,1"))
   (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,1,1"))
   (rule "mul_literals" (formula "25") (term "1,0,0,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,1,1"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,1,1"))
   (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,1"))
   (rule "emptyModality" (formula "30") (term "1"))
   (builtin "One Step Simplification" (formula "30"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,1,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,1,1,1,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,0,0,1,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,0,1,1,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,1,1,0,0,1,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,1,1,0,1,1,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,1,1,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,0,0,1,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,0,1,1,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,1,1,0,0,1,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,1,1,0,1,1,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,1,0,1,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,0,1,0,0,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,1,1,0,0,0,1,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,0,2,0,1,1,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,1,1,0,0,1,1,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,1,0,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,0,1,0,0,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,1,1,0,0,1,0,0,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,0,0,0,1,1,1,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,0,2,0,1,1,1,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,1,1,0,0,0,1,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,0,2,0,1,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,1,1,0,0,1,1,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,0,2,0,1,1,0,1,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,0,0,0,1,0,1,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,0,1,0,1,0,1,1,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,1,1,0,0,1,0,0,1,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,1,1,0,0,0,0,1,1,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,0,0,0,1,1,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,0,2,0,1,1,1,1,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "1,0,1,0,1,0,1,0,1,0,1,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,1,1,0,0,0,0,1,0,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,0,2,0,1,1,0,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,0,0,0,1,0,1,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,1,1,0,0,1,0,1,0,1,1,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,0,1,0,1,0,1,1,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,1,1,0,0,0,0,1,1,1,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "30") (term "0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "1,0,1,0,1,0,1,0,1,0,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,1,1,0,0,0,0,1,0,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,1,1,0,0,1,0,1,0,1,1,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "30") (term "0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1"))
   (rule "pullOutSelect" (formula "30") (term "0,0,0") (inst "selectSK=MetaVariables_FV_SORTED_0"))
   (rule "applyEq" (formula "31") (term "0,0,0,1") (ifseqformula "1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "31") (term "0,0,0,1") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "31") (term "0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "5")))
   (rule "commute_and_2" (formula "4") (term "0,0"))
   (rule "cut_direct" (formula "12") (term "0,0"))
   (branch "CUT: MetaVariables.FV_DECREASING = TRUE TRUE"
      (builtin "One Step Simplification" (formula "13"))
      (rule "notLeft" (formula "13"))
      (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "27"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "12")))
      (rule "true_left" (formula "11"))
      (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "26"))
      (builtin "One Step Simplification" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "25")))
      (rule "andLeft" (formula "23"))
      (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "23"))
      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "24")))
      (rule "closeTrue" (formula "30"))
   )
   (branch "CUT: MetaVariables.FV_DECREASING = TRUE FALSE"
      (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "26"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "replace_known_left" (formula "31") (term "1,1") (ifseqformula "24"))
      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "23")))
      (rule "closeTrue" (formula "31"))
   )
)
(branch "Exceptional Post (sort)"
   (builtin "One Step Simplification" (formula "22"))
   (builtin "One Step Simplification" (formula "26"))
   (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0,1,1,0,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "22") (term "0,2,1,1,0,1,1,1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "22") (term "0,2,1,1,0,1,1,0,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0,1,1,1,1,0,0,1,1"))
   (rule "andLeft" (formula "22"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0") (ifseqformula "22"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "25"))
   (rule "notLeft" (formula "23"))
   (rule "close" (formula "27") (ifseqformula "26"))
)
(branch "Pre (sort)"
   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
   (rule "closeTrue" (formula "24"))
)
(branch "Null reference (self = null)"
   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")))
   (rule "closeTrue" (formula "24"))
)
)

}
