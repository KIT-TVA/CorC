<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="Exponentation" proven="true">
    <statement name="statement">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true">
        <firstStatement name="statement1">
          <refinement name="i = n-1; b = a;&#xD;&#xA;z = a;" proven="true">
            <postCondition name="z * pow(b,i) = pow(a,n)"/>
            <preCondition name="n > 0"/>
          </refinement>
          <postCondition name="z * pow(b,i) = pow(a,n)"/>
          <preCondition name="n > 0"/>
        </firstStatement>
        <secondStatement name="statement2">
          <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" variantProven="true" preProven="true" postProven="true">
            <postCondition name="i = 0 &amp; z * pow(b,i) = pow(a,n)"/>
            <preCondition name="z * pow(b,i) = pow(a,n)"/>
            <loopStatement name="loop">
              <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" proven="true" preProve="true">
                <guards name="i%2 = 0"/>
                <guards name="i%2 = 1"/>
                <commands name="statement">
                  <refinement name="i = i/2; b = b*b;" proven="true">
                    <postCondition name="z * pow(b,i) = pow(a,n)"/>
                    <preCondition name="((z * pow(b,i) = pow(a,n)) &amp; (i != 0)) &amp; (i%2 = 0)"/>
                  </refinement>
                  <postCondition name="z * pow(b,i) = pow(a,n)"/>
                  <preCondition name="((z * pow(b,i) = pow(a,n)) &amp; (i != 0)) &amp; (i%2 = 0)"/>
                </commands>
                <commands name="statement">
                  <refinement name="i = i-1; z = z*b;" proven="true">
                    <postCondition name="z * pow(b,i) = pow(a,n)"/>
                    <preCondition name="((z * pow(b,i) = pow(a,n)) &amp; (i != 0)) &amp; (i%2 = 1)"/>
                  </refinement>
                  <postCondition name="z * pow(b,i) = pow(a,n)"/>
                  <preCondition name="((z * pow(b,i) = pow(a,n)) &amp; (i != 0)) &amp; (i%2 = 1)"/>
                </commands>
              </refinement>
              <postCondition name="z * pow(b,i) = pow(a,n)"/>
              <preCondition name="(z * pow(b,i) = pow(a,n)) &amp; (i != 0)"/>
            </loopStatement>
            <variant name="i"/>
            <invariant name="z * pow(b,i) = pow(a,n)"/>
            <guard name="i != 0"/>
          </refinement>
          <postCondition name="i = 0 &amp; z * pow(b,i) = pow(a,n)"/>
          <preCondition name="z * pow(b,i) = pow(a,n)"/>
        </secondStatement>
        <intermediateCondition name="z * pow(b,i) = pow(a,n)"/>
      </refinement>
      <postCondition name="i = 0 &amp; z * pow(b,i) = pow(a,n)"/>
      <preCondition name="n > 0"/>
    </statement>
  </cbcmodel:CbCFormula>
  <cbcmodel:GlobalConditions>
    <conditions name="n>0 &amp; a > 0"/>
    <conditions name="n&lt;6 &amp; a&lt;6"/>
    <conditions name="i>=0 &amp; i&lt;n"/>
  </cbcmodel:GlobalConditions>
  <cbcmodel:JavaVariables>
    <variables name="int z"/>
    <variables name="int a"/>
    <variables name="int b"/>
    <variables name="int i"/>
    <variables name="int n"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:Renaming>
    <rename type="int" function="Helper.pow" newName="pow"/>
  </cbcmodel:Renaming>
</xmi:XMI>
