<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="Exponentation" proven="true" comment="">
    <statement name="statement" id="576b09e7-5780-4747-a44f-d814e2d235da">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="55d4508a-88eb-4eb3-9fbb-0b872c49ebcd">
        <firstStatement name="statement1" id="3524ec84-bf03-4e90-b99a-6f53218729d4">
          <refinement name="i = n-1; b = a; z = a;" proven="true" id="ace98c2d-1a79-43a0-b1b3-51a018756a44">
            <postCondition name="z * pow(b,i) = pow(a,n)">
              <modifiables>b</modifiables>
              <modifiables>i</modifiables>
              <modifiables>z</modifiables>
            </postCondition>
            <preCondition name="n > 0"/>
          </refinement>
          <postCondition name="z * pow(b,i) = pow(a,n)">
            <modifiables>b</modifiables>
            <modifiables>i</modifiables>
            <modifiables>z</modifiables>
          </postCondition>
          <preCondition name="n > 0"/>
        </firstStatement>
        <secondStatement name="statement2" id="549f7272-2547-456e-80d4-a470a3dd9f26">
          <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" id="d2b2bd91-64da-42a4-877e-9d6dcb87a6a4" variantProven="true" preProven="true" postProven="true">
            <postCondition name="i = 0 &amp; z * pow(b,i) = pow(a,n)">
              <modifiables>b</modifiables>
              <modifiables>i</modifiables>
              <modifiables>z</modifiables>
            </postCondition>
            <preCondition name="z * pow(b,i) = pow(a,n)">
              <modifiables>b</modifiables>
              <modifiables>i</modifiables>
              <modifiables>z</modifiables>
            </preCondition>
            <loopStatement name="loop" id="1e150e4d-d37a-4d3e-acc2-46cc5fbf2d1e">
              <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" proven="true" id="b958236f-75f4-4206-af8b-f58c9e6da9c4" preProve="true">
                <guards name="i%2 = 0"/>
                <guards name="i%2 = 1"/>
                <commands name="statement" id="312f6c10-bc7b-4577-b2ec-971ca951bd2d">
                  <refinement name="i = i/2; b = b*b;" proven="true" id="eb50eeaa-84d9-49d8-bed2-26681b75d315">
                    <postCondition name="z * pow(b,i) = pow(a,n)">
                      <modifiables>b</modifiables>
                      <modifiables>i</modifiables>
                      <modifiables>z</modifiables>
                    </postCondition>
                    <preCondition name="((z * pow(b,i) = pow(a,n)) &amp; (i != 0)) &amp; (i%2 = 0)">
                      <modifiables>b</modifiables>
                      <modifiables>i</modifiables>
                      <modifiables>z</modifiables>
                    </preCondition>
                  </refinement>
                  <postCondition name="z * pow(b,i) = pow(a,n)">
                    <modifiables>b</modifiables>
                    <modifiables>i</modifiables>
                    <modifiables>z</modifiables>
                  </postCondition>
                  <preCondition name="((z * pow(b,i) = pow(a,n)) &amp; (i != 0)) &amp; (i%2 = 0)">
                    <modifiables>b</modifiables>
                    <modifiables>i</modifiables>
                    <modifiables>z</modifiables>
                  </preCondition>
                </commands>
                <commands name="statement" id="b5f00caf-3400-4d9d-a83a-3d9f6278db84">
                  <refinement name="i = i-1; z = z*b;" proven="true" id="a6d283e8-bf64-4630-b2da-5111ee35652a">
                    <postCondition name="z * pow(b,i) = pow(a,n)">
                      <modifiables>b</modifiables>
                      <modifiables>i</modifiables>
                      <modifiables>z</modifiables>
                    </postCondition>
                    <preCondition name="((z * pow(b,i) = pow(a,n)) &amp; (i != 0)) &amp; (i%2 = 1)">
                      <modifiables>b</modifiables>
                      <modifiables>i</modifiables>
                      <modifiables>z</modifiables>
                    </preCondition>
                  </refinement>
                  <postCondition name="z * pow(b,i) = pow(a,n)">
                    <modifiables>b</modifiables>
                    <modifiables>i</modifiables>
                    <modifiables>z</modifiables>
                  </postCondition>
                  <preCondition name="((z * pow(b,i) = pow(a,n)) &amp; (i != 0)) &amp; (i%2 = 1)">
                    <modifiables>b</modifiables>
                    <modifiables>i</modifiables>
                    <modifiables>z</modifiables>
                  </preCondition>
                </commands>
              </refinement>
              <postCondition name="z * pow(b,i) = pow(a,n)">
                <modifiables>b</modifiables>
                <modifiables>i</modifiables>
                <modifiables>z</modifiables>
              </postCondition>
              <preCondition name="(z * pow(b,i) = pow(a,n)) &amp; (i != 0)">
                <modifiables>b</modifiables>
                <modifiables>i</modifiables>
                <modifiables>z</modifiables>
              </preCondition>
            </loopStatement>
            <variant name="i"/>
            <invariant name="z * pow(b,i) = pow(a,n)"/>
            <guard name="i != 0"/>
          </refinement>
          <postCondition name="i = 0 &amp; z * pow(b,i) = pow(a,n)">
            <modifiables>b</modifiables>
            <modifiables>i</modifiables>
            <modifiables>z</modifiables>
          </postCondition>
          <preCondition name="z * pow(b,i) = pow(a,n)">
            <modifiables>b</modifiables>
            <modifiables>i</modifiables>
            <modifiables>z</modifiables>
          </preCondition>
        </secondStatement>
        <intermediateCondition name="z * pow(b,i) = pow(a,n)">
          <modifiables>b</modifiables>
          <modifiables>i</modifiables>
          <modifiables>z</modifiables>
        </intermediateCondition>
      </refinement>
      <postCondition name="i = 0 &amp; z * pow(b,i) = pow(a,n)">
        <modifiables>b</modifiables>
        <modifiables>i</modifiables>
        <modifiables>z</modifiables>
      </postCondition>
      <preCondition name="n > 0"/>
    </statement>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int n"/>
    <variables name="int i"/>
    <variables name="int b"/>
    <variables name="int z"/>
    <variables/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="n > 0 &amp; a > 0"/>
    <conditions name="n &lt; 6 &amp; a &lt; 6"/>
    <conditions name="i >= 0 &amp; i &lt; n"/>
  </cbcmodel:GlobalConditions>
  <cbcmodel:Renaming>
    <rename type="int" function="Helper.pow" newName="pow"/>
  </cbcmodel:Renaming>
</xmi:XMI>
