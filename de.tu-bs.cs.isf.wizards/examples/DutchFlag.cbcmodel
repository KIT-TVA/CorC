<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="DutchFlag" proven="true" comment="">
    <statement name="statement" id="7638c0fa-bfab-4d53-850c-8a74034d01aa">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true" id="89c9703b-8212-4a10-98ac-15415b1e6551">
        <firstStatement name="statement1" id="700e90f8-0dcd-4ffc-a857-14b0d9e46b3d">
          <refinement name="wb = 0; wt = 0; bb = A.length;" proven="true" id="7a0a652e-1c05-45fa-9508-117e57b6e42d">
            <postCondition name="s(A, wb, wt, bb)">
              <modifiables>bb</modifiables>
              <modifiables>wb</modifiables>
              <modifiables>wt</modifiables>
            </postCondition>
            <preCondition name="s(A, 0, 0, A.length)"/>
          </refinement>
          <postCondition name="s(A, wb, wt, bb)">
            <modifiables>bb</modifiables>
            <modifiables>wb</modifiables>
            <modifiables>wt</modifiables>
          </postCondition>
          <preCondition name="s(A, 0, 0, A.length)"/>
        </firstStatement>
        <secondStatement name="statement2" id="49948403-1f60-437e-a83a-356ad43beaf8">
          <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" id="b08d02df-e9ae-480d-9bfa-effed9ba46a5" variantProven="true" preProven="true" postProven="true">
            <postCondition name="s(A, wb, wt, bb) &amp; wt = bb">
              <modifiables>bb</modifiables>
              <modifiables>wb</modifiables>
              <modifiables>wt</modifiables>
            </postCondition>
            <preCondition name="s(A, wb, wt, bb)">
              <modifiables>bb</modifiables>
              <modifiables>wb</modifiables>
              <modifiables>wt</modifiables>
            </preCondition>
            <loopStatement name="loop" id="903ffeb0-a8db-4925-b71f-45a112b781f6">
              <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" proven="true" id="f42f116a-7d24-4efd-a602-06b050535f86" preProve="true">
                <guards name="A[wt] = 0"/>
                <guards name="A[wt] = 1"/>
                <guards name="A[wt] = 2"/>
                <commands name="statement" id="48a22d5e-8d2e-4fb6-b69d-791e2f313bf6">
                  <refinement name="t = A[wt]; A[wt] = A[wb]; A[wb] = t; wt = wt+1; wb = wb+1;" proven="true" id="7bbf8178-b459-427d-b2b6-998af29635c8">
                    <postCondition name="s(A, wb, wt, bb)">
                      <modifiables>A[bb-1]</modifiables>
                      <modifiables>A[wt]</modifiables>
                      <modifiables>bb</modifiables>
                      <modifiables>t</modifiables>
                      <modifiables>wb</modifiables>
                      <modifiables>wt</modifiables>
                      <modifiables>A[wb]</modifiables>
                    </postCondition>
                    <preCondition name="((s(A, wb, wt, bb)) &amp; (wt != bb)) &amp; (A[wt] = 0)">
                      <modifiables>bb</modifiables>
                      <modifiables>wb</modifiables>
                      <modifiables>wt</modifiables>
                    </preCondition>
                  </refinement>
                  <postCondition name="s(A, wb, wt, bb)">
                    <modifiables>A[bb-1]</modifiables>
                    <modifiables>A[wt]</modifiables>
                    <modifiables>bb</modifiables>
                    <modifiables>t</modifiables>
                    <modifiables>wb</modifiables>
                    <modifiables>wt</modifiables>
                    <modifiables>A[wb]</modifiables>
                  </postCondition>
                  <preCondition name="((s(A, wb, wt, bb)) &amp; (wt != bb)) &amp; (A[wt] = 0)">
                    <modifiables>bb</modifiables>
                    <modifiables>wb</modifiables>
                    <modifiables>wt</modifiables>
                  </preCondition>
                </commands>
                <commands name="statement" id="b85d79ad-f910-409d-89de-af8ef588d8cb">
                  <refinement name="wt = wt+1;" proven="true" id="eb36ac55-e482-49a8-8eeb-4ee5999a3e89">
                    <postCondition name="s(A, wb, wt, bb)">
                      <modifiables>A[bb-1]</modifiables>
                      <modifiables>A[wt]</modifiables>
                      <modifiables>bb</modifiables>
                      <modifiables>t</modifiables>
                      <modifiables>wb</modifiables>
                      <modifiables>wt</modifiables>
                      <modifiables>A[wb]</modifiables>
                    </postCondition>
                    <preCondition name="((s(A, wb, wt, bb)) &amp; (wt != bb)) &amp; (A[wt] = 1)">
                      <modifiables>bb</modifiables>
                      <modifiables>wb</modifiables>
                      <modifiables>wt</modifiables>
                    </preCondition>
                  </refinement>
                  <postCondition name="s(A, wb, wt, bb)">
                    <modifiables>A[bb-1]</modifiables>
                    <modifiables>A[wt]</modifiables>
                    <modifiables>bb</modifiables>
                    <modifiables>t</modifiables>
                    <modifiables>wb</modifiables>
                    <modifiables>wt</modifiables>
                    <modifiables>A[wb]</modifiables>
                  </postCondition>
                  <preCondition name="((s(A, wb, wt, bb)) &amp; (wt != bb)) &amp; (A[wt] = 1)">
                    <modifiables>bb</modifiables>
                    <modifiables>wb</modifiables>
                    <modifiables>wt</modifiables>
                  </preCondition>
                </commands>
                <commands name="statement" id="e56097b1-ae77-46eb-88c8-c510d7b3d226">
                  <refinement name="t = A[wt]; A[wt] = A[bb-1]; A[bb-1] = t; bb = bb-1;" proven="true" id="d5600931-ca8a-4f0b-bb86-10d3fdd35206">
                    <postCondition name="s(A, wb, wt, bb)">
                      <modifiables>A[bb-1]</modifiables>
                      <modifiables>A[wt]</modifiables>
                      <modifiables>bb</modifiables>
                      <modifiables>t</modifiables>
                      <modifiables>wb</modifiables>
                      <modifiables>wt</modifiables>
                      <modifiables>A[wb]</modifiables>
                    </postCondition>
                    <preCondition name="((s(A, wb, wt, bb)) &amp; (wt != bb)) &amp; (A[wt] = 2)">
                      <modifiables>bb</modifiables>
                      <modifiables>wb</modifiables>
                      <modifiables>wt</modifiables>
                    </preCondition>
                  </refinement>
                  <postCondition name="s(A, wb, wt, bb)">
                    <modifiables>A[bb-1]</modifiables>
                    <modifiables>A[wt]</modifiables>
                    <modifiables>bb</modifiables>
                    <modifiables>t</modifiables>
                    <modifiables>wb</modifiables>
                    <modifiables>wt</modifiables>
                    <modifiables>A[wb]</modifiables>
                  </postCondition>
                  <preCondition name="((s(A, wb, wt, bb)) &amp; (wt != bb)) &amp; (A[wt] = 2)">
                    <modifiables>bb</modifiables>
                    <modifiables>wb</modifiables>
                    <modifiables>wt</modifiables>
                  </preCondition>
                </commands>
              </refinement>
              <postCondition name="s(A, wb, wt, bb)">
                <modifiables>A[bb-1]</modifiables>
                <modifiables>A[wt]</modifiables>
                <modifiables>bb</modifiables>
                <modifiables>t</modifiables>
                <modifiables>wb</modifiables>
                <modifiables>wt</modifiables>
                <modifiables>A[wb]</modifiables>
              </postCondition>
              <preCondition name="(s(A, wb, wt, bb)) &amp; (wt != bb)">
                <modifiables>bb</modifiables>
                <modifiables>wb</modifiables>
                <modifiables>wt</modifiables>
              </preCondition>
            </loopStatement>
            <variant name="bb-wt"/>
            <invariant name="s(A, wb, wt, bb)"/>
            <guard name="wt != bb"/>
          </refinement>
          <postCondition name="s(A, wb, wt, bb) &amp; wt = bb">
            <modifiables>A[bb-1]</modifiables>
            <modifiables>A[wt]</modifiables>
            <modifiables>bb</modifiables>
            <modifiables>t</modifiables>
            <modifiables>wb</modifiables>
            <modifiables>wt</modifiables>
            <modifiables>A[wb]</modifiables>
          </postCondition>
          <preCondition name="s(A, wb, wt, bb)">
            <modifiables>bb</modifiables>
            <modifiables>wb</modifiables>
            <modifiables>wt</modifiables>
          </preCondition>
        </secondStatement>
        <intermediateCondition name="s(A, wb, wt, bb)">
          <modifiables>bb</modifiables>
          <modifiables>wb</modifiables>
          <modifiables>wt</modifiables>
        </intermediateCondition>
      </refinement>
      <postCondition name="s(A, wb, wt, bb) &amp; wt = bb">
        <modifiables>A[bb-1]</modifiables>
        <modifiables>A[wt]</modifiables>
        <modifiables>bb</modifiables>
        <modifiables>t</modifiables>
        <modifiables>wb</modifiables>
        <modifiables>wt</modifiables>
        <modifiables>A[wb]</modifiables>
      </postCondition>
      <preCondition name="s(A, 0, 0, A.length)"/>
    </statement>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int[] A"/>
    <variables name="int t"/>
    <variables name="int wt"/>
    <variables name="int wb"/>
    <variables name="int bb"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="A != null"/>
    <conditions name="A.length > 0"/>
    <conditions name="0 &lt;= wb &amp; wb &lt;= wt &amp; wt &lt;= bb &amp; bb &lt;= A.length"/>
    <conditions name="\forall int i; ((i >= 0 &amp; i &lt; A.length) -> (A[i] = 0 | A[i] = 1 | A[i] = 2))"/>
  </cbcmodel:GlobalConditions>
</xmi:XMI>
