<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="DutchFlag" proven="true">
    <statement name="statement">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement" proven="true">
        <firstStatement name="statement1">
          <refinement name="wb = 0; wt = 0; bb = A.length;" proven="true">
            <postCondition name="s(A,wb,wt,bb)"/>
            <preCondition name="s(A,0,0,A.length)"/>
          </refinement>
          <postCondition name="s(A,wb,wt,bb)"/>
          <preCondition name="s(A,0,0,A.length)"/>
        </firstStatement>
        <secondStatement name="statement2">
          <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" proven="true" variantProven="true" preProven="true" postProven="true">
            <postCondition name="s(A,wb,wt,bb) &amp; wt = bb"/>
            <preCondition name="s(A,wb,wt,bb)"/>
            <loopStatement name="loop">
              <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" proven="true" preProve="true">
                <guards name="A[wt] = 0"/>
                <guards name="A[wt] = 1"/>
                <guards name="A[wt] = 2"/>
                <commands name="statement11">
                  <refinement name="t = A[wt]; A[wt] = A[wb]; A[wb] = t; wt = wt + 1; wb = wb + 1;" proven="true">
                    <postCondition name="s(A,wb,wt,bb)"/>
                    <preCondition name="((s(A,wb,wt,bb)) &amp; (wt != bb)) &amp; (A[wt] = 0)"/>
                  </refinement>
                  <postCondition name="s(A,wb,wt,bb)"/>
                  <preCondition name="((s(A,wb,wt,bb)) &amp; (wt != bb)) &amp; (A[wt] = 0)"/>
                </commands>
                <commands name="statement21">
                  <refinement name="wt = wt + 1;" proven="true">
                    <postCondition name="s(A,wb,wt,bb)"/>
                    <preCondition name="((s(A,wb,wt,bb)) &amp; (wt != bb)) &amp; (A[wt] = 1)"/>
                  </refinement>
                  <postCondition name="s(A,wb,wt,bb)"/>
                  <preCondition name="((s(A,wb,wt,bb)) &amp; (wt != bb)) &amp; (A[wt] = 1)"/>
                </commands>
                <commands name="statement31">
                  <refinement name="t = A[wt]; A[wt] = A[bb-1]; A[bb-1] = t; bb = bb - 1;" proven="true">
                    <postCondition name="s(A,wb,wt,bb)"/>
                    <preCondition name="((s(A,wb,wt,bb)) &amp; (wt != bb)) &amp; (A[wt] = 2)"/>
                  </refinement>
                  <postCondition name="s(A,wb,wt,bb)"/>
                  <preCondition name="((s(A,wb,wt,bb)) &amp; (wt != bb)) &amp; (A[wt] = 2)"/>
                </commands>
              </refinement>
              <postCondition name="s(A,wb,wt,bb)"/>
              <preCondition name="(s(A,wb,wt,bb)) &amp; (wt != bb)"/>
            </loopStatement>
            <variant name="bb-wt"/>
            <invariant name="s(A,wb,wt,bb)"/>
            <guard name="wt != bb"/>
          </refinement>
          <postCondition name="s(A,wb,wt,bb) &amp; wt = bb"/>
          <preCondition name="s(A,wb,wt,bb)"/>
        </secondStatement>
        <intermediateCondition name="s(A,wb,wt,bb)"/>
      </refinement>
      <postCondition name="s(A,wb,wt,bb) &amp; wt = bb"/>
      <preCondition name="s(A,0,0,A.length)"/>
    </statement>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int[] A"/>
    <variables name="int wt"/>
    <variables name="int wb"/>
    <variables name="int bb"/>
    <variables name="int t"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="A!=null"/>
    <conditions name="A.length>0"/>
    <conditions name="0&lt;=wb &amp; wb&lt;=wt &amp; wt&lt;=bb &amp; bb&lt;=A.length"/>
    <conditions name="(\forall int i; ((i>=0 &amp; i&lt;A.length) -> (A[i] = 0 | A[i] = 1 | A[i] = 2)))"/>
  </cbcmodel:GlobalConditions>
</xmi:XMI>
