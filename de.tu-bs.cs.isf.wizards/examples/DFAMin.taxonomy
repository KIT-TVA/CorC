<?xml version="1.0" encoding="ASCII"?>
<taxonomy:Taxonomy xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:taxonomy="http://www.example.org/taxonomy" name="DFAMin">
  <Algorithms name="AbstractMinimization" abstract="true" childAlgorithms="//@Algorithms.1 //@Algorithms.2" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="invariant">
    <dataStructures name="M" initialValue="">
      <dataType name="Aut"/>
    </dataStructures>
    <methods name="minimize(M)">
      <dataTypes name="Aut"/>
    </methods>
    <methods name="merge(M,H)">
      <dataTypes name="Aut"/>
      <dataTypes name="Set&lt;Pair&lt;State,State>>"/>
    </methods>
  </Algorithms>
  <Algorithms name="EquivalenceRelation" abstract="true" childAlgorithms="//@Algorithms.5 //@Algorithms.6" parentAlgorithms="//@Algorithms.0" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
  </Algorithms>
  <Algorithms name="Pointwise" childAlgorithms="//@Algorithms.3" parentAlgorithms="//@Algorithms.0" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
    <methods name="equiv(p,q,S)">
      <dataTypes name="State"/>
      <dataTypes name="State"/>
      <dataTypes name="Set&lt;Pair&lt;State,State>>"/>
    </methods>
  </Algorithms>
  <Algorithms name="PointwiseImperative" childAlgorithms="//@Algorithms.4" parentAlgorithms="//@Algorithms.2" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <dataStructures name="EqPairs">
      <dataType name="Set&lt;Pair&lt;State,State>>"/>
    </dataStructures>
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
    <methods name="equiv(p,q,k)">
      <dataTypes name="State"/>
      <dataTypes name="State"/>
      <dataTypes/>
    </methods>
  </Algorithms>
  <Algorithms name="PointwiseMemoization" parentAlgorithms="//@Algorithms.3" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <dataStructures name="EqPairs">
      <dataType name="Set&lt;Pair&lt;State,State>>"/>
    </dataStructures>
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
    <methods name="equiv(p,q,k)">
      <dataTypes name="State"/>
      <dataTypes name="State"/>
      <dataTypes/>
    </methods>
  </Algorithms>
  <Algorithms name="EqRelFromBelow" parentAlgorithms="//@Algorithms.1" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
    <methods name="equiv(p,q,k)">
      <dataTypes name="State"/>
      <dataTypes name="State"/>
      <dataTypes/>
    </methods>
  </Algorithms>
  <Algorithms name="EqRelFromAbove" abstract="true" childAlgorithms="//@Algorithms.7 //@Algorithms.8 //@Algorithms.9" parentAlgorithms="//@Algorithms.1" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
  </Algorithms>
  <Algorithms name="EqRelLayerwise" parentAlgorithms="//@Algorithms.6" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
  </Algorithms>
  <Algorithms name="EqRelUnordered" abstract="true" childAlgorithms="//@Algorithms.10 //@Algorithms.11" parentAlgorithms="//@Algorithms.6" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
  </Algorithms>
  <Algorithms name="Hopcroft-Ullman" parentAlgorithms="//@Algorithms.6" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <dataStructures name="associatedPairs">
      <dataType name="Set&lt;Pair&lt;State,State>>"/>
    </dataStructures>
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
  </Algorithms>
  <Algorithms name="EqRelNaive" childAlgorithms="//@Algorithms.12" parentAlgorithms="//@Algorithms.8" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
  </Algorithms>
  <Algorithms name="EqRelImproved" childAlgorithms="//@Algorithms.14" parentAlgorithms="//@Algorithms.8" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
  </Algorithms>
  <Algorithms name="ASU" parentAlgorithms="//@Algorithms.10" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
    <methods name="Splittable(Q0,Q1,a)">
      <dataTypes name="EqClass"/>
      <dataTypes name="EqClass"/>
      <dataTypes name="Char"/>
    </methods>
  </Algorithms>
  <Algorithms name="Hopcroft" parentAlgorithms="//@Algorithms.15" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <dataStructures name="toSplit">
      <dataType name="Set&lt;Pair&lt;EqClass,Char>>"/>
    </dataStructures>
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
    <methods name="Splittable(Q0,Q1,a)">
      <dataTypes name="EqClass"/>
      <dataTypes name="EqClass"/>
      <dataTypes name="Char"/>
    </methods>
  </Algorithms>
  <Algorithms name="EqClasses" childAlgorithms="//@Algorithms.15" parentAlgorithms="//@Algorithms.11" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
    <methods name="Splittable(Q0,Q1,a)">
      <dataTypes name="EqClass"/>
      <dataTypes name="EqClass"/>
      <dataTypes name="Char"/>
    </methods>
  </Algorithms>
  <Algorithms name="EqClassesWithLists" childAlgorithms="//@Algorithms.13" parentAlgorithms="//@Algorithms.14" preCondition="M=Aut(Q,V,T,0,S,F) &amp; Useful(M)" postCondition="Min(M) &amp; Useful(M)" invariant="">
    <dataStructures name="toSplit">
      <dataType name="Set&lt;Pair&lt;EqClass,Char>>"/>
    </dataStructures>
    <methods name="minimize(M)" preCondition="" postCondition="">
      <dataTypes name="Aut"/>
    </methods>
    <methods name="Splittable(Q0,Q1,a)">
      <dataTypes name="EqClass"/>
      <dataTypes name="EqClass"/>
      <dataTypes name="Char"/>
    </methods>
  </Algorithms>
</taxonomy:Taxonomy>
