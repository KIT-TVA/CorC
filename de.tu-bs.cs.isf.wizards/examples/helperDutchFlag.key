\predicates {app(int[], int, int, int);
			 maxi(int[], int, int, int);
			 sort(int[]);
			 s(int[],int,int,int);
			 c(int[],int,int,int);
			}

\rules{
	app_toExist{
		\schemaVar \term int[]A;
		\schemaVar \term int begin;
		\schemaVar \term int end;
		\schemaVar \term int search;
		\schemaVar \variable int q;
		\find (app(A,search,begin,end))
		\varcond (\notFreeIn(q,begin),\notFreeIn(q,end),\notFreeIn(q,search),\notFreeIn(q,A))
		\replacewith((\exists q; (q >= begin & q < end & A[q]=search)))
		\heuristics(simplify)
	};
	
	max_toForAll{
		\schemaVar \term int[]A;
		\schemaVar \term int begin;
		\schemaVar \term int end;
		\schemaVar \term int max;
		\schemaVar \variable int q;
		\find (maxi(A,begin,end,max))
		\varcond (\notFreeIn(q,begin),\notFreeIn(q,end),\notFreeIn(q,max),\notFreeIn(q,A))
		\replacewith((\forall q; ((q >= begin & q < end) -> A[max]>=A[q])))
		\heuristics(simplify)
	};
	
	sort_toForAll{
		\schemaVar \term int[]A;
		\schemaVar \term int begin;
		\schemaVar \term int end;
		\schemaVar \term int max;
		\schemaVar \variable int q;
		\find (sort(A))
		\varcond (\notFreeIn(q,begin),\notFreeIn(q,end),\notFreeIn(q,max),\notFreeIn(q,A))
		\replacewith((\forall q; ((q >= 1 & q < A.length) -> A[q-1]<=A[q])))
		\heuristics(simplify)
	};
	
	s_toC{
		\schemaVar \term int[]A;
		\schemaVar \term int wb;
		\schemaVar \term int wt;
		\schemaVar \term int bb;
		\schemaVar \variable int q;
		\find (s(A,wb,wt,bb))
		\replacewith(c(A,0,wb,0) & c(A,wb,wt,1) & c(A,bb,A.length,2) & 0<=wb & wb<=wt & wt<=bb & bb<=A.length)
		\heuristics(simplify)
	};
	
	c_toForAll{
		\schemaVar \term int[]A;
		\schemaVar \term int l;
		\schemaVar \term int h;
		\schemaVar \term int s;
		\schemaVar \variable int q;
		\find (c(A,l,h,s))
		\varcond (\notFreeIn(q,A),\notFreeIn(q,l),\notFreeIn(q,h),\notFreeIn(q,s))
		\replacewith((\forall q; ((q >= l & q < h) -> A[q]=s)))
		\heuristics(simplify)
	};
}