\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jul 09 13:48:48 CEST 2019
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=20000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/tbord/Documents/EvaluationIntList";\include "helper.key";\programVariables {int[] data; int[] old_data; int newTop; int[] old_data_old; int newTop_old;  Heap heapAtPre;}\problem {
     \forall int k;
       (     leq(Z(0(#)), k)
           & lt(k, sub(length(data), Z(1(#))))
        -> geq(int::select(heap, data, arr(k)),
               int::select(heap,
                           data,
                           arr(add(k, Z(1(#)))))))
   & !data = null
   & geq(length(data), Z(0(#)))
   & !old_data = null
   & geq(length(old_data), Z(0(#)))
   & old_data = data
   &   boolean::select(heap,
                       data,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       old_data,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       old_data_old,
                       java.lang.Object::<created>)
     = TRUE
   & wellFormed(heap)
-> {heapAtPre:=heap
    || old_data_old:=old_data
    || newTop_old:=newTop}
     \<{
         data=GeneratedIntList.push_Cons(newTop,old_data,data);
       }\> (  \exists int z;
                (  leq(Z(0(#)), z)
                 & lt(z, length(data))
                 &   int::select(heap, data, arr(z))
                   = newTop)
            & \forall int k;
                (     leq(Z(0(#)), k)
                    & lt(k, length(old_data))
                 -> \exists int z;
                      (  leq(Z(0(#)), z)
                       & lt(z, length(data))
                       &   int::select(heap,
                                       data,
                                       arr(z))
                         = int::select(heap,
                                       old_data,
                                       arr(k))))
            & old_data = old_data_old
            & newTop = newTop_old)

}

\proof {
(keyLog "0" (keyUser "tbord" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "459")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "11") (term "1,0,0,1"))
(rule "eqSymm" (formula "11") (term "1,0,1"))
(rule "polySimp_elimSub" (formula "1") (term "1,1,0,0"))
(rule "mul_literals" (formula "1") (term "1,1,1,0,0"))
(rule "polySimp_addComm0" (formula "1") (term "0,2,1,1,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
(rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
(rule "applyEq" (formula "10") (term "0") (ifseqformula "4"))
(rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
(rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "3"))
(rule "applyEq" (formula "5") (term "1,0") (ifseqformula "3"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "1") (term "0"))
(rule "nnf_notAnd" (formula "1") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "8") (term "0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "8") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,1,0,0,0,1"))
(builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_push_Cons,result,exc,heapAfter_push_Cons,anon_heap_push_Cons") (contract "GeneratedIntList[GeneratedIntList::push_Cons(int,[I,[I)].JML normal_behavior operation contract.0"))
(branch "Post (push_Cons)"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1,0,0,1,1"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "exLeft" (formula "11") (inst "sk=z_0"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "16"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "polySimp_elimSub" (formula "15") (term "0,2,0"))
   (rule "mul_literals" (formula "15") (term "1,0,2,0"))
   (rule "polySimp_addComm0" (formula "15") (term "0,2,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "assignment" (formula "18") (term "1"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "applyEq" (formula "14") (term "1,1,1,0,1,0") (ifseqformula "3"))
   (rule "applyEq" (formula "14") (term "0,0,1,0,0,1,0,0") (ifseqformula "3"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0"))
   (rule "polySimp_elimOne" (formula "12") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "17")))
   (rule "eqSymm" (formula "14"))
   (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "14"))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=arr_1"))
   (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "17")))
   (rule "eqSymm" (formula "16"))
   (rule "applyEqReverse" (formula "15") (term "1") (ifseqformula "16"))
   (rule "hideAuxiliaryEq" (formula "16"))
   (rule "nnf_imp2or" (formula "14") (term "0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
   (rule "emptyModality" (formula "18") (term "1"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "eqSymm" (formula "18") (term "1"))
   (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "3"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "applyEq" (formula "18") (term "1,1,1,0,1,0,1") (ifseqformula "3"))
   (rule "applyEq" (formula "18") (term "0,1,1,0,0,1") (ifseqformula "3"))
   (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "14"))
   (builtin "One Step Simplification" (formula "18"))
   (rule "nnf_ex2all" (formula "18"))
   (rule "nnf_notAnd" (formula "1") (term "0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "arrayLengthIsAnInt" (formula "3") (term "0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "arrayLengthNotNegative" (formula "3") (term "0"))
   (rule "ex_pull_out3" (formula "15") (term "0"))
   (rule "cnf_rightDist" (formula "15") (term "0,0"))
   (rule "commute_or" (formula "15") (term "1,0,0"))
   (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
   (rule "commute_or" (formula "15") (term "1,0,0,0"))
   (rule "ifthenelse_split" (formula "16") (term "0"))
   (branch "result = data | !result.<created> = TRUE TRUE"
      (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "16"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "commute_and_2" (formula "15") (term "0,0"))
      (rule "cut_direct" (formula "11") (term "0"))
      (branch "CUT: result.<created> = TRUE TRUE"
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "11"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "16"))
         (rule "applyEq" (formula "14") (term "0,1,1,1,1,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "16") (term "0,1,0,2,0") (ifseqformula "15"))
         (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "15"))
         (rule "applyEq" (formula "1") (term "0,1,1,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "14") (term "1,0,1,1,0,0,0") (ifseqformula "15"))
         (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "15"))
         (rule "applyEq" (formula "1") (term "1,0,0,1,0") (ifseqformula "15"))
         (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
         (rule "commute_and" (formula "14") (term "0,0,0"))
         (rule "allLeft" (formula "1") (inst "t=z_0"))
         (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "13"))
         (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
         (rule "leq_literals" (formula "1") (term "0,1,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "12"))
         (rule "qeq_literals" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=arr_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
         (rule "close" (formula "18") (ifseqformula "14"))
      )
      (branch "CUT: result.<created> = TRUE FALSE"
         (builtin "One Step Simplification" (formula "11"))
         (rule "replace_known_right" (formula "16") (term "0,1") (ifseqformula "18"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "commute_and" (formula "15") (term "0,0,0"))
         (rule "allLeft" (formula "1") (inst "t=z_0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0,0,1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "13"))
         (rule "qeq_literals" (formula "1") (term "0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "result = data | !result.<created> = TRUE FALSE"
      (rule "orRight" (formula "17"))
      (rule "notRight" (formula "18"))
      (rule "replace_known_left" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "18")))
      (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "commute_and_2" (formula "15") (term "0,0"))
      (rule "commute_and" (formula "15") (term "0,0,0"))
      (rule "allLeft" (formula "2") (inst "t=z_0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "2") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "2") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "13"))
      (rule "qeq_literals" (formula "2") (term "0,0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "2"))
      (rule "andLeft" (formula "14"))
      (rule "inEqSimp_homoInEq1" (formula "14"))
      (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
      (rule "add_literals" (formula "14") (term "1,1,0"))
      (rule "times_zero_1" (formula "14") (term "1,0"))
      (rule "add_zero_right" (formula "14") (term "0"))
      (rule "leq_literals" (formula "14"))
      (rule "closeFalse" (formula "14"))
   )
)
(branch "Exceptional Post (push_Cons)"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1,0,0,1,1"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "13") (ifseqformula "12"))
)
(branch "Pre (push_Cons)"
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "4")))
   (rule "eqSymm" (formula "8") (term "0,0"))
   (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "3"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "applyEq" (formula "8") (term "0,0,1") (ifseqformula "3"))
   (rule "replace_known_right" (formula "8") (term "0,1") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "3"))
   (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "3"))
   (rule "close" (formula "8") (ifseqformula "4"))
)
)

}
