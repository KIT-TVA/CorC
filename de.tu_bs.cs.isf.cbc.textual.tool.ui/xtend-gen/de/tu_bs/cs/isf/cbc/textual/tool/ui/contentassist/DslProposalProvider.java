/**
 * generated by Xtext 2.10.0
 */
package de.tu_bs.cs.isf.cbc.textual.tool.ui.contentassist;

import de.tu_bs.cs.isf.cbc.textual.tool.ui.contentassist.AbstractDslProposalProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class DslProposalProvider extends AbstractDslProposalProvider {
  @Override
  public void complete_CompositionStatement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_CompositionStatement(model, ruleCall, context, acceptor);
    final String proposal = "{\"<statement>\"} intm: [\"<condition>\"] {\"<statement>\"}";
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_SmallRepetitionStatement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_SmallRepetitionStatement(model, ruleCall, context, acceptor);
    final String proposal = (("while (\"<guard>\") do\n" + "\t\tinv: [\"<invariant>\"] var: [\"<variant>\"]\n") + "\t\t{\"<statement>\"} od");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_SelectionStatement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_SelectionStatement(model, ruleCall, context, acceptor);
    final String proposal = ((("if (\"<guard>\") then\n" + "\t\t{\"<statement>\"}\n") + "\t\telseif (\"<guard>\") then\n") + "\t\t{\"<statement>\"} fi");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_CbCFormula(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_CbCFormula(model, ruleCall, context, acceptor);
    final String proposal = ((("Formula \"<formula>\"\n" + "\tpre: {\"<condition>\"}\n") + "\t{\"<statement>\"}\n") + "\tpost: {\"<condition>\"}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_StrengthWeakStatement(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_StrengthWeakStatement(model, ruleCall, context, acceptor);
    final String proposal = (("pre: {\"<condition>\"}\n" + "\t\t{\"<statement>\"}\n") + "\t\tpost: {\"<condition>\"}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_JavaVariables(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_JavaVariables(model, ruleCall, context, acceptor);
    final String proposal = ("JavaVariables\n" + "\tvariables {\"<variable>\", \"<variable>\"}\n");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_GlobalConditions(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_GlobalConditions(model, ruleCall, context, acceptor);
    final String proposal = ("GlobalConditions\n" + "\tconditions {\"<condition>\", \"<condition>\"}\n");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_Renaming(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_Renaming(model, ruleCall, context, acceptor);
    final String proposal = ((((("Renaming\n" + "\trenames {\n") + "\t\t{type \"<type>\"") + " function \"<functionName>\"") + " newName \"<newName>\"}\n") + "\t}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
  
  @Override
  public void complete_Rename(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_Rename(model, ruleCall, context, acceptor);
    final String proposal = (("{type \"<type>\"" + " function \"<functionName>\"") + " newName \"<newName>\"}");
    acceptor.accept(this.createCompletionProposal(proposal, context));
  }
}
